{"5a0e3ad6af8660be21ca98a971cd00f331318c05":{"author":"Tejun Heo","email":"tj@kernel.org","date":"2010-03-24 08:04:11 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h\n\npercpu.h is included by sched.h and module.h and thus ends up being\nincluded when building most .c files.  percpu.h includes slab.h which\nin turn includes gfp.h making everything defined by the two files\nuniversally available and complicating inclusion dependencies.\n\npercpu.h -> slab.h dependency is about to be removed.  Prepare for\nthis change by updating users of gfp and slab facilities include those\nheaders directly instead of assuming availability.  As this conversion\nneeds to touch large number of source files, the following script is\nused as the basis of conversion.\n\n  http://userweb.kernel.org/~tj/misc/slabh-sweep.py\n\nThe script does the followings.\n\n* Scan files for gfp and slab usages and update includes such that\n  only the necessary includes are there.  ie. if only gfp is used,\n  gfp.h, if slab is used, slab.h.\n\n* When the script inserts a new include, it looks a\n"},"b24413180f5600bcb3bb70fbed5cf186b60864bd":{"author":"Greg Kroah-Hartman","email":"gregkh@linuxfoundation.org","date":"2017-11-01 14:07:57 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: License cleanup: add SPDX GPL-2.0 license identifier to files with no license\n\nMany source files in the tree are missing licensing information, which\nmakes it harder for compliance tools to determine the correct license.\n\nBy default all files without license information are under the default\nlicense of the kernel, which is GPL version 2.\n\nUpdate the files which contain no license information with the 'GPL-2.0'\nSPDX license identifier.  The SPDX identifier is a legally binding\nshorthand, which can be used instead of the full boiler plate text.\n\nThis patch is based on work done by Thomas Gleixner and Kate Stewart and\nPhilippe Ombredanne.\n\nHow this work was done:\n\nPatches were generated and checked against linux-4.14-rc6 for a subset of\nthe use cases:\n - file had no licensing information it it.\n - file was a */uapi/* one with no licensing information in it,\n - file was a */uapi/* one with existing licensing information,\n\nFurther patches will be generated in subsequent months to fix up case\n"},"7c0f6ba682b9c7632072ffbedf8d328c8f3c42ba":{"author":"Linus Torvalds","email":"torvalds@linux-foundation.org","date":"2016-12-24 19:46:01 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: Replace <asm/uaccess.h> with <linux/uaccess.h> globally\n\nThis was entirely automated, using the script by Al:\n\n  PATT='^[[:blank:]]*#[[:blank:]]*include[[:blank:]]*<asm/uaccess.h>'\n  sed -i -e \"s!$PATT!#include <linux/uaccess.h>!\" \\\n        $(git grep -l \"$PATT\"|grep -v ^include/linux/uaccess.h)\n\nto do the replacement at the end of the merge window.\n\nRequested-by: Al Viro <viro@zeniv.linux.org.uk>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>\n"},"607ca46e97a1b6594b29647d98a32d545c24bdff":{"author":"David Howells","email":"dhowells@redhat.com","date":"2012-10-13 09:46:48 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: UAPI: (Scripted) Disintegrate include/linux\n\nSigned-off-by: David Howells <dhowells@redhat.com>\nAcked-by: Arnd Bergmann <arnd@arndb.de>\nAcked-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Michael Kerrisk <mtk.manpages@gmail.com>\nAcked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>\nAcked-by: Dave Jones <davej@redhat.com>\n"},"a7f7f6248d9740d710fd6bd190293fe5e16410ac":{"author":"Masahiro Yamada","email":"masahiroy@kernel.org","date":"2020-06-13 16:50:22 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: treewide: replace '---help---' in Kconfig files with 'help'\n\nSince commit 84af7a6194e4 (\"checkpatch: kconfig: prefer 'help' over\n'---help---'\"), the number of '---help---' has been gradually\ndecreasing, but there are still more than 2400 instances.\n\nThis commit finishes the conversion. While I touched the lines,\nI also fixed the indentation.\n\nThere are a variety of indentation styles found.\n\n  a) 4 spaces + '---help---'\n  b) 7 spaces + '---help---'\n  c) 8 spaces + '---help---'\n  d) 1 space + 1 tab + '---help---'\n  e) 1 tab + '---help---'    (correct indentation)\n  f) 1 tab + 1 space + '---help---'\n  g) 1 tab + 2 spaces + '---help---'\n\nIn order to convert all of them to 1 tab + 'help', I ran the\nfollowing commend:\n\n  $ find . -name 'Kconfig*' | xargs sed -i 's/^[[:space:]]*---help---/\\thelp/'\n\nSigned-off-by: Masahiro Yamada <masahiroy@kernel.org>\n"},"6da2ec56059c3c7a7e5f729e6349e74ace1e5c57":{"author":"Kees Cook","email":"keescook@chromium.org","date":"2018-06-12 20:55:00 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: treewide: kmalloc() -> kmalloc_array()\n\nThe kmalloc() function has a 2-factor argument form, kmalloc_array(). This\npatch replaces cases of:\n\n        kmalloc(a * b, gfp)\n\nwith:\n        kmalloc_array(a * b, gfp)\n\nas well as handling cases of:\n\n        kmalloc(a * b * c, gfp)\n\nwith:\n\n        kmalloc(array3_size(a, b, c), gfp)\n\nas it's slightly less ugly than:\n\n        kmalloc_array(array_size(a, b), c, gfp)\n\nThis does, however, attempt to ignore constant size factors like:\n\n        kmalloc(4 * 1024, gfp)\n\nthough any constants defined via macros get caught up in the conversion.\n\nAny factors with a sizeof() of \"unsigned char\", \"char\", and \"u8\" were\ndropped, since they're redundant.\n\nThe tools/ directory was manually excluded, since it has its own\nimplementation of kmalloc().\n\nThe Coccinelle script used for this was:\n\n// Fix redundant parens around sizeof().\n@@\ntype TYPE;\nexpression THING, E;\n@@\n\n(\n  kmalloc(\n-\t(sizeof(TYPE)) * E\n+\tsizeof(TYPE) * E\n  , ...)\n|\n  kmalloc(\n-\t(sizeof(THING)) * E\n\n"},"b17b01533b719e9949e437abf66436a875739b40":{"author":"Ingo Molnar","email":"mingo@kernel.org","date":"2017-02-08 17:51:35 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: sched/headers: Prepare for new header dependencies before moving code to <linux/sched/debug.h>\n\nWe are going to split <linux/sched/debug.h> out of <linux/sched.h>, which\nwill have to be picked up from other headers and a couple of .c files.\n\nCreate a trivial placeholder <linux/sched/debug.h> file that just\nmaps to <linux/sched.h> to make this patch obviously correct and\nbisectable.\n\nInclude the new header in the files that are going to need it.\n\nAcked-by: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Mike Galbraith <efault@gmx.de>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: linux-kernel@vger.kernel.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>\n"},"6bb27d7349db51b50c40534710fe164ca0d58902":{"author":"Stephen Warren","email":"swarren@nvidia.com","date":"2012-11-08 19:40:59 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: ARM: delete struct sys_timer\n\nNow that the only field in struct sys_timer is .init, delete the struct,\nand replace the machine descriptor .timer field with the initialization\nfunction itself.\n\nThis will enable moving timer drivers into drivers/clocksource without\nhaving to place a public prototype of each struct sys_timer object into\ninclude/linux; the intent is to create a single of_clocksource_init()\nfunction that determines which timer driver to initialize by scanning\nthe device dtree, much like the proposed irqchip_init() at:\nhttp://www.spinics.net/lists/arm-kernel/msg203686.html\n\nIncludes mach-omap2 fixes from Igor Grinberg.\n\nTested-by: Robert Jarzmik <robert.jarzmik@free.fr>\nSigned-off-by: Stephen Warren <swarren@nvidia.com>\n"},"3f649ab728cda8038259d8f14492fe400fbab911":{"author":"Kees Cook","email":"keescook@chromium.org","date":"2020-06-03 20:09:38 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: treewide: Remove uninitialized_var() usage\n\nUsing uninitialized_var() is dangerous as it papers over real bugs[1]\n(or can in the future), and suppresses unrelated compiler warnings\n(e.g. \"unused variable\"). If the compiler thinks it is uninitialized,\neither simply initialize the variable or make compiler changes.\n\nIn preparation for removing[2] the[3] macro[4], remove all remaining\nneedless uses with the following script:\n\ngit grep '\\buninitialized_var\\b' | cut -d: -f1 | sort -u | \\\n\txargs perl -pi -e \\\n\t\t's/\\buninitialized_var\\(([^\\)]+)\\)/\\1/g;\n\t\t s:\\s*/\\* (GCC be quiet|to make compiler happy) \\*/$::g;'\n\ndrivers/video/fbdev/riva/riva_hw.c was manually tweaked to avoid\npathological white-space.\n\nNo outstanding warnings were found building allmodconfig with GCC 9.3.0\nfor x86_64, i386, arm64, arm, powerpc, powerpc64le, s390x, mips, sparc64,\nalpha, and m68k.\n\n[1] https://lore.kernel.org/lkml/20200603174714.192027-1-glider@google.com/\n[2] https://lore.kernel.org/lkml/CA+55aFw+Vbj0i=1TGqCR5v\n"},"c4028958b6ecad064b1a6303a6a5906d4fe48d73":{"author":"David Howells","email":"dhowells@redhat.com","date":"2006-11-22 14:57:56 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: WorkStruct: make allyesconfig\n\nFix up for make allyesconfig.\n\nSigned-Off-By: David Howells <dhowells@redhat.com>\n"},"2e4e6a17af35be359cc8f1c924f8f198fbd478cc":{"author":"Harald Welte","email":"laforge@netfilter.org","date":"2006-01-12 21:30:04 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: [NETFILTER] x_tables: Abstraction layer for {ip,ip6,arp}_tables\n\nThis monster-patch tries to do the best job for unifying the data\nstructures and backend interfaces for the three evil clones ip_tables,\nip6_tables and arp_tables.  In an ideal world we would never have\nallowed this kind of copy+paste programming... but well, our world\nisn't (yet?) ideal.\n\no introduce a new x_tables module\no {ip,arp,ip6}_tables depend on this x_tables module\no registration functions for tables, matches and targets are only\n  wrappers around x_tables provided functions\no all matches/targets that are used from ip_tables and ip6_tables\n  are now implemented as xt_FOOBAR.c files and provide module aliases\n  to ipt_FOOBAR and ip6t_FOOBAR\no header files for xt_matches are in include/linux/netfilter/,\n  include/linux/netfilter_{ipv4,ipv6} contains compatibility wrappers\n  around the xt_FOOBAR.h headers\n\nBased on this patchset we're going to further unify the code,\ngradually getting rid of all the layer 3 specific\n"},"6aa7de059173a986114ac43b8f50b297a86f09a8":{"author":"Mark Rutland","email":"mark.rutland@arm.com","date":"2017-10-23 21:07:29 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: locking/atomics: COCCINELLE/treewide: Convert trivial ACCESS_ONCE() patterns to READ_ONCE()/WRITE_ONCE()\n\nPlease do not apply this to mainline directly, instead please re-run the\ncoccinelle script shown below and apply its output.\n\nFor several reasons, it is desirable to use {READ,WRITE}_ONCE() in\npreference to ACCESS_ONCE(), and new code is expected to use one of the\nformer. So far, there's been no reason to change most existing uses of\nACCESS_ONCE(), as these aren't harmful, and changing them results in\nchurn.\n\nHowever, for some features, the read/write distinction is critical to\ncorrect operation. To distinguish these cases, separate read/write\naccessors must be used. This patch migrates (most) remaining\nACCESS_ONCE() instances to {READ,WRITE}_ONCE(), using the following\ncoccinelle script:\n\n----\n// Convert trivial ACCESS_ONCE() uses to equivalent READ_ONCE() and\n// WRITE_ONCE()\n\n// $ make coccicheck COCCI=/home/mark/once.cocci SPFLAGS=\"--include-headers\" MODE=patch\n\nvirtual patch\n\n@ \n"},"d5341942d784134f2997b3ff82cd63cf71d1f932":{"author":"Ralf Baechle","email":"ralf@linux-mips.org","date":"2011-06-10 14:30:21 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: PCI: Make the struct pci_dev * argument of pci_fixup_irqs const.\n\nAside of the usual motivation for constification,  this function has a\nhistory of being abused a hook for interrupt and other fixups so I turned\nthis function const ages ago in the MIPS code but it should be done\ntreewide.\n\nDue to function pointer passing in varous places a few other functions\nhad to be constified as well.\n\nSigned-off-by: Ralf Baechle <ralf@linux-mips.org>\nTo: Anton Vorontsov <avorontsov@mvista.com>\nTo: Chris Metcalf <cmetcalf@tilera.com>\nTo: Colin Cross <ccross@android.com>\nAcked-by: \"David S. Miller\" <davem@davemloft.net>\nTo: Eric Miao <eric.y.miao@gmail.com>\nTo: Erik Gilling <konkers@android.com>\nAcked-by: Guan Xuetao <gxt@mprc.pku.edu.cn>\nTo: \"H. Peter Anvin\" <hpa@zytor.com>\nTo: Imre Kaloz <kaloz@openwrt.org>\nTo: Ingo Molnar <mingo@redhat.com>\nTo: Ivan Kokshaysky <ink@jurassic.park.msu.ru>\nTo: Jesse Barnes <jbarnes@virtuousgeek.org>\nTo: Krzysztof Halasa <khc@pm.waw.pl>\nTo: Lennert Buytenhek <kernel@wa\n"},"08fadc32ce6239dc75fd5e869590e29bc62bbc28":{},"b9258a2cece4ec1f020715fe3554bc2e360f6264":{"author":"Richard Palethorpe","email":"rpalethorpe@suse.com","date":"2020-04-01 10:06:39 UTC","message":"slcan: Don't transmit uninitialized stack data in padding\n\nstruct can_frame contains some padding which is not explicitly zeroed in\nslc_bump. This uninitialized data will then be transmitted if the stack\ninitialization hardening feature is not enabled (CONFIG_INIT_STACK_ALL).\n\nThis commit just zeroes the whole struct including the padding.\n\nSigned-off-by: Richard Palethorpe <rpalethorpe@suse.com>\nFixes: a1044e36e457 (\"can: add slcan driver for serial/USB-serial CAN adapters\")\nReviewed-by: Kees Cook <keescook@chromium.org>\nCc: linux-can@vger.kernel.org\nCc: netdev@vger.kernel.org\nCc: security@kernel.org\nCc: wg@grandegger.com\nCc: mkl@pengutronix.de\nCc: davem@davemloft.net\nAcked-by: Marc Kleine-Budde <mkl@pengutronix.de>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":1,"deletions":3,"filepaths":{"drivers/net/can/slcan.c":{"insertions":1,"deletions":3}}},"a1044e36e457fb6dbdf90ce756d578b251d99b5e":{"author":"Oliver Hartkopp","email":"socketcan@hartkopp.net","date":"2010-12-02 10:57:59 UTC","message":"can: add slcan driver for serial/USB-serial CAN adapters\n\nThis patch adds support for serial/USB-serial CAN adapters implementing the\nLAWICEL ASCII protocol for CAN frame transport over serial lines.\n\nThe driver implements the SLCAN line discipline and is heavily based on the\nslip.c driver. Therefore the code style remains similar to slip.c to be able\nto apply changes of the SLIP driver to the SLCAN driver easily.\n\nFor more details see the slcan Kconfig entry.\n\nSigned-off-by: Oliver Hartkopp <socketcan@hartkopp.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":777,"deletions":0,"filepaths":{"drivers/net/can/Kconfig":{"insertions":21,"deletions":0},"drivers/net/can/Makefile":{"insertions":1,"deletions":0},"drivers/net/can/slcan.c":{"insertions":755,"deletions":0}}},"87397fe10db0e7ee85041eee5a40052cab66aaff":{"author":"Andre Naujoks","email":"nautsch2@gmail.com","date":"2013-09-13 17:37:13 UTC","message":"slcan: rewrite of slc_bump and slc_encaps\n\nThe old implementation was heavy on str* functions and sprintf calls.\nThis version is more manual, but faster.\n\nProfiling just the printing of a 3 char CAN-id resulted in 60 instructions\nfor the manual method and over 2000 for the sprintf method. Bear in\nmind the profiling was done against libc and not the kernel sprintf.\n\nTogether with this rewrite an issue with sending and receiving of RTR frames\nhas been fixed by Oliver for the cases that the DLC is not zero.\n\nSigned-off-by: Andre Naujoks <nautsch2@gmail.com>\nTested-by: Oliver Hartkopp <socketcan@hartkopp.net>\nAcked-by: Oliver Hartkopp <socketcan@hartkopp.net>\nAcked-by: Marc Kleine-Budde <mkl@pengutronix.de>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":87,"deletions":49,"filepaths":{"drivers/net/can/slcan.c":{"insertions":87,"deletions":49}}},"aa9f7d5172fac9bf1f09e678c35e287a40a7b7dd":{"author":"Randy Dunlap","email":"rdunlap@infradead.org","date":"2020-04-02 04:10:58 UTC","message":"mm: mempolicy: require at least one nodeid for MPOL_PREFERRED\n\nUsing an empty (malformed) nodelist that is not caught during mount option\nparsing leads to a stack-out-of-bounds access.\n\nThe option string that was used was: \"mpol=prefer:,\".  However,\nMPOL_PREFERRED requires a single node number, which is not being provided\nhere.\n\nAdd a check that 'nodes' is not empty after parsing for MPOL_PREFERRED's\nnodeid.\n\nFixes: 095f1fc4ebf3 (\"mempolicy: rework shmem mpol parsing and display\")\nReported-by: Entropy Moe <3ntr0py1337@gmail.com>\nReported-by: syzbot+b055b1a6b2b958707a21@syzkaller.appspotmail.com\nSigned-off-by: Randy Dunlap <rdunlap@infradead.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nTested-by: syzbot+b055b1a6b2b958707a21@syzkaller.appspotmail.com\nCc: Lee Schermerhorn <lee.schermerhorn@hp.com>\nLink: http://lkml.kernel.org/r/89526377-7eb6-b662-e1d8-4430928abde9@infradead.org\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":5,"deletions":1,"filepaths":{"mm/mempolicy.c":{"insertions":5,"deletions":1}}},"095f1fc4ebf36c64fddf9b6db29b1ab5517378e6":{"author":"Lee Schermerhorn","email":"lee.schermerhorn@hp.com","date":"2008-04-28 09:13:23 UTC","message":"mempolicy: rework shmem mpol parsing and display\n\nmm/shmem.c currently contains functions to parse and display memory policy\nstrings for the tmpfs 'mpol' mount option.  Move this to mm/mempolicy.c with\nthe rest of the mempolicy support.  With subsequent patches, we'll be able to\nremove knowledge of the details [mode, flags, policy, ...] completely from\nshmem.c\n\n1) replace shmem_parse_mpol() in mm/shmem.c with mpol_parse_str() in\n   mm/mempolicy.c.  Rework to use the policy_types[] array [used by\n   mpol_to_str()] to look up mode by name.\n\n2) use mpol_to_str() to format policy for shmem_show_mpol().  mpol_to_str()\n   expects a pointer to a struct mempolicy, so temporarily construct one.\n   This will be replaced with a reference to a struct mempolicy in the tmpfs\n   superblock in a subsequent patch.\n\n   NOTE 1: I changed mpol_to_str() to use a colon ':' rather than an equal\n   sign '=' as the nodemask delimiter to match mpol_parse_str() and the\n   tmpfs/shmem mpol mount option formatting ","insertions":136,"deletions":107,"filepaths":{"include/linux/mempolicy.h":{"insertions":21,"deletions":0},"mm/mempolicy.c":{"insertions":102,"deletions":2},"mm/shmem.c":{"insertions":13,"deletions":105}}},"926f2ae04f183098cf9a30521776fb2759c8afeb":{"author":"KOSAKI Motohiro","email":"kosaki.motohiro@jp.fujitsu.com","date":"2010-03-23 20:35:32 UTC","message":"tmpfs: cleanup mpol_parse_str()\n\nmpol_parse_str() made lots 'err' variable related bug.  Because it is ugly\nand reviewing unfriendly.\n\nThis patch simplifies it.\n\nSigned-off-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>\nCc: Ravikiran Thirumalai <kiran@scalex86.org>\nCc: Christoph Lameter <cl@linux-foundation.org>\nCc: Mel Gorman <mel@csn.ul.ie>\nAcked-by: Lee Schermerhorn <lee.schermerhorn@hp.com>\nCc: Hugh Dickins <hugh.dickins@tiscali.co.uk>\nCc: <stable@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":12,"deletions":12,"filepaths":{"mm/mempolicy.c":{"insertions":12,"deletions":12}}},"71fe804b6d56d6a7aed680e096901434cef6a2c3":{"author":"Lee Schermerhorn","email":"lee.schermerhorn@hp.com","date":"2008-04-28 09:13:26 UTC","message":"mempolicy: use struct mempolicy pointer in shmem_sb_info\n\nThis patch replaces the mempolicy mode, mode_flags, and nodemask in the\nshmem_sb_info struct with a struct mempolicy pointer, initialized to NULL.\nThis removes dependency on the details of mempolicy from shmem.c and hugetlbfs\ninode.c and simplifies the interfaces.\n\nmpol_parse_str() in mempolicy.c is changed to return, via a pointer to a\npointer arg, a struct mempolicy pointer on success.  For MPOL_DEFAULT, the\nreturned pointer is NULL.  Further, mpol_parse_str() now takes a 'no_context'\nargument that causes the input nodemask to be stored in the w.user_nodemask of\nthe created mempolicy for use when the mempolicy is installed in a tmpfs inode\nshared policy tree.  At that time, any cpuset contextualization is applied to\nthe original input nodemask.  This preserves the previous behavior where the\ninput nodemask was stored in the superblock.  We can think of the returned\nmempolicy as \"context free\".\n\nBecause mpol_parse_str() is now c","insertions":134,"deletions":95,"filepaths":{"fs/hugetlbfs/inode.c":{"insertions":1,"deletions":1},"include/linux/mempolicy.h":{"insertions":11,"deletions":11},"include/linux/shmem_fs.h":{"insertions":1,"deletions":3},"mm/mempolicy.c":{"insertions":89,"deletions":55},"mm/shmem.c":{"insertions":32,"deletions":25}}},"485b06aadb933190f4bc44e006076bc27a23f205":{"author":"Johan Hovold","email":"johan@kernel.org","date":"2020-01-03 16:35:10 UTC","message":"media: stv06xx: add missing descriptor sanity checks\n\nMake sure to check that we have two alternate settings and at least one\nendpoint before accessing the second altsetting structure and\ndereferencing the endpoint arrays.\n\nThis specifically avoids dereferencing NULL-pointers or corrupting\nmemory when a device does not have the expected descriptors.\n\nNote that the sanity checks in stv06xx_start() and pb0100_start() are\nnot redundant as the driver is mixing looking up altsettings by index\nand by number, which may not coincide.\n\nFixes: 8668d504d72c (\"V4L/DVB (12082): gspca_stv06xx: Add support for st6422 bridge and sensor\")\nFixes: c0b33bdc5b8d (\"[media] gspca-stv06xx: support bandwidth changing\")\nCc: stable <stable@vger.kernel.org>     # 2.6.31\nCc: Hans de Goede <hdegoede@redhat.com>\nSigned-off-by: Johan Hovold <johan@kernel.org>\nSigned-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>\nSigned-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>","insertions":22,"deletions":1,"filepaths":{"drivers/media/usb/gspca/stv06xx/stv06xx.c":{"insertions":18,"deletions":1},"drivers/media/usb/gspca/stv06xx/stv06xx_pb0100.c":{"insertions":4,"deletions":0}}},"c0b33bdc5b8d9c1120dece660480d4dd86b817ee":{"author":"Hans de Goede","email":"hdegoede@redhat.com","date":"2010-10-27 12:12:30 UTC","message":"[media] gspca-stv06xx: support bandwidth changing\n\nstv06xx devices have only one altsetting, but the actual used\nbandwidth can be programmed through a register. We were already\nsetting this register lower then the max packetsize of the altsetting\nindicates. This patch makes the gspca-stv06xx update the usb descriptor\nfor the alt setting to reflect the actual packetsize in use, so that\nthe usb subsystem uses the correct information for scheduling usb transfers.\n\nThis patch also tries to fallback to lower speeds in case a ENOSPC error\nis received when submitting urbs, but currently this is only supported\nwith stv06xx cams with the pb0100 sensor, as this is the only one for\nwhich we know how to change the framerate.\n\nThis patch is based on an initial incomplete patch by\nLee Jones <lee.jones@canonical.com>\n\nSigned-off-by: Lee Jones <lee.jones@canonical.com>\nSigned-off-by: Hans de Goede <hdegoede@redhat.com>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>","insertions":93,"deletions":27,"filepaths":{"drivers/media/video/gspca/stv06xx/stv06xx.c":{"insertions":54,"deletions":1},"drivers/media/video/gspca/stv06xx/stv06xx_hdcs.h":{"insertions":10,"deletions":1},"drivers/media/video/gspca/stv06xx/stv06xx_pb0100.c":{"insertions":14,"deletions":4},"drivers/media/video/gspca/stv06xx/stv06xx_pb0100.h":{"insertions":3,"deletions":0},"drivers/media/video/gspca/stv06xx/stv06xx_sensor.h":{"insertions":4,"deletions":0},"drivers/media/video/gspca/stv06xx/stv06xx_st6422.c":{"insertions":1,"deletions":16},"drivers/media/video/gspca/stv06xx/stv06xx_st6422.h":{"insertions":3,"deletions":0},"drivers/media/video/gspca/stv06xx/stv06xx_vv6410.h":{"insertions":4,"deletions":5}}},"5dae603d84ff5b6b24186b521f4353b3860b11e2":{"author":"Hans de Goede","email":"hdegoede@redhat.com","date":"2012-01-01 20:20:14 UTC","message":"[media] gspca: Check dev->actconfig rather than dev->config\n\nCheck dev->actconfig rather than dev->config when checking various\nconfiguration things. dev->config points to the array of configs for the\ndevice so dev->config->foo boils down to dev->config[0].foo and the first\nconfig is not necessarily always the active config.\n\nSigned-off-by: Hans de Goede <hdegoede@redhat.com>\nSigned-off-by: Jean-François Moine <moinejf@free.fr>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>","insertions":8,"deletions":8,"filepaths":{"drivers/media/video/gspca/gspca.c":{"insertions":4,"deletions":4},"drivers/media/video/gspca/stv06xx/stv06xx.c":{"insertions":2,"deletions":2},"drivers/media/video/gspca/xirlink_cit.c":{"insertions":2,"deletions":2}}},"4c98834addfee3fdd42c505c37569261bf669d94":{"author":"Erik Andren","email":"erik.andren@gmail.com","date":"2008-12-29 10:35:23 UTC","message":"V4L/DVB (10048): gspca - stv06xx: New subdriver.\n\nSigned-off-by: Erik Andren <erik.andren@gmail.com>\nSigned-off-by: Jean-Francois Moine <moinejf@free.fr>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>","insertions":2808,"deletions":1,"filepaths":{"Documentation/video4linux/gspca.txt":{"insertions":3,"deletions":0},"drivers/media/video/gspca/Kconfig":{"insertions":1,"deletions":0},"drivers/media/video/gspca/Makefile":{"insertions":1,"deletions":1},"drivers/media/video/gspca/stv06xx/Kconfig":{"insertions":9,"deletions":0},"drivers/media/video/gspca/stv06xx/Makefile":{"insertions":6,"deletions":0},"drivers/media/video/gspca/stv06xx/stv06xx.c":{"insertions":522,"deletions":0},"drivers/media/video/gspca/stv06xx/stv06xx.h":{"insertions":107,"deletions":0},"drivers/media/video/gspca/stv06xx/stv06xx_hdcs.c":{"insertions":533,"deletions":0},"drivers/media/video/gspca/stv06xx/stv06xx_hdcs.h":{"insertions":263,"deletions":0},"drivers/media/video/gspca/stv06xx/stv06xx_pb0100.c":{"insertions":430,"deletions":0},"drivers/media/video/gspca/stv06xx/stv06xx_pb0100.h":{"insertions":275,"deletions":0},"drivers/media/video/gspca/stv06xx/stv06xx_sensor.h":{"insertions":92,"deletions":0},"drivers/media/video/gspca/stv06xx/stv06xx_vv6410.c":{"insertions":251,"deletions":0},"drivers/media/video/gspca/stv06xx/stv06xx_vv6410.h":{"insertions":315,"deletions":0}}},"dadefe3b710b706b607b51e901bbe6fb05cc515c":{"author":"Jesper Juhl","email":"jj@chaosbits.net","date":"2011-01-13 22:05:47 UTC","message":"[media] gspca/stv06xx_pb0100: Don't potentially deref NULL in pb0100_start()\n\nusb_altnum_to_altsetting() may return NULL. If it does we'll dereference a\nNULL pointer in\ndrivers/media/video/gspca/stv06xx/stv06xx_pb0100.c::pb0100_start().\nAs far as I can tell there's not really anything more sensible than\n-ENODEV that we can return in that situation, but I'm not at all intimate\nwith this code so I'd like a bit of review/comments on this before it's\napplied.\nAnyway, here's a proposed patch.\n\nSigned-off-by: Jesper Juhl <jj@chaosbits.net>\nCc: Jean-Francois Moine <moinejf@free.fr>\nCc: Hans de Goede <hdegoede@redhat.com>\nCc: Erik Andren <erik.andren@gmail.com>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>","insertions":2,"deletions":0,"filepaths":{"drivers/media/video/gspca/stv06xx/stv06xx_pb0100.c":{"insertions":2,"deletions":0}}},"a246b4d547708f33ff4d4b9a7a5dbac741dc89d8":{"author":"Johan Hovold","email":"johan@kernel.org","date":"2020-01-03 16:35:11 UTC","message":"media: xirlink_cit: add missing descriptor sanity checks\n\nMake sure to check that we have two alternate settings and at least one\nendpoint before accessing the second altsetting structure and\ndereferencing the endpoint arrays.\n\nThis specifically avoids dereferencing NULL-pointers or corrupting\nmemory when a device does not have the expected descriptors.\n\nNote that the sanity check in cit_get_packet_size() is not redundant as\nthe driver is mixing looking up altsettings by index and by number,\nwhich may not coincide.\n\nFixes: 659fefa0eb17 (\"V4L/DVB: gspca_xirlink_cit: Add support for camera with a bcd version of 0.01\")\nFixes: 59f8b0bf3c12 (\"V4L/DVB: gspca_xirlink_cit: support bandwidth changing for devices with 1 alt setting\")\nCc: stable <stable@vger.kernel.org>     # 2.6.37\nCc: Hans de Goede <hdegoede@redhat.com>\nSigned-off-by: Johan Hovold <johan@kernel.org>\nSigned-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>\nSigned-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>","insertions":17,"deletions":1,"filepaths":{"drivers/media/usb/gspca/xirlink_cit.c":{"insertions":17,"deletions":1}}},"bc46bae6373c87897959c7aa8fb9f6c4218695b8":{"author":"Hans de Goede","email":"hdegoede@redhat.com","date":"2010-10-26 14:18:59 UTC","message":"[media] gspca_xirlink_cit: various usb bandwidth allocation improvements / fixes\n\nThe following usb bandwidth allocation changes were made to the ibm netcam\npro code:\n- Don't restart negotiation at max packet size on stop0, as that gets called\n  by gspca_main during negotiation. Move this to sd_isoc_init.\n- Don't ask for full bandwidth when running at 160x120, that does not need\n  full bandwidth\n- Make minimum acceptable bandwidth depend upon resolution\n\n[mchehab@redhat.com: Fix CodingStyle problems at switch statements]\nSigned-off-by: Hans de Goede <hdegoede@redhat.com>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>","insertions":43,"deletions":10,"filepaths":{"drivers/media/video/gspca/xirlink_cit.c":{"insertions":43,"deletions":10}}},"659fefa0eb177ae7377206a7a5a59161b0668c58":{"author":"Hans de Goede","email":"hdegoede@redhat.com","date":"2010-09-05 19:19:19 UTC","message":"V4L/DVB: gspca_xirlink_cit: Add support for camera with a bcd version of 0.01\n\nAdd support for camera with a bcd version of 0.01, I've dupped these\nModel0 cams.\n\nSigned-off-by: Hans de Goede <hdegoede@redhat.com>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>","insertions":342,"deletions":72,"filepaths":{"drivers/media/video/gspca/xirlink_cit.c":{"insertions":342,"deletions":72}}},"1f33de0f8b91b70ccadb44958f09aa5bee7c1a44":{"author":"Hans de Goede","email":"hdegoede@redhat.com","date":"2010-09-05 19:05:22 UTC","message":"V4L/DVB: gspca_xirlink_cit: New gspca subdriver replacing v4l1 usbvideo/ibmcam.c\n\nThe old usbvideo ibmcam driver needs to be replaced with a v4l2 driver\npreferably using the gspca webcam framework rather then the old usbvideo\nframework.\n\nThis new gspca sub driver sets a first step in that direction. The ibmcam\ndriver supports 4 different model webcams. This new driver (for now) only\nsupports Model 3 cameras, as my test cam is a Model 3 cam, or so I thought.\n\nUpon reading:\nhttp://www.linux-usb.org/ibmcam/\nI learned that the IBM Netcamera Pro I have even though having the same\nusb id and the same bcd version is different from the Model 3 cameras\nsupported by the ibmcam driver. So this new gscpa subdriver supports Model 3\ncameras (untested), and the IBM Netcamera Pro. Currently use with the\nIBM Netcamera Pro requires a module parameter. I hope to be able to\nautodetect which is which in the future.\n\nSigned-off-by: Hans de Goede <hdegoede@redhat.com>\nSigned-off-by: Mauro Carvalho Chehab <mch","insertions":1777,"deletions":0,"filepaths":{"drivers/media/video/gspca/Kconfig":{"insertions":9,"deletions":0},"drivers/media/video/gspca/Makefile":{"insertions":2,"deletions":0},"drivers/media/video/gspca/xirlink_cit.c":{"insertions":1765,"deletions":0},"include/linux/videodev2.h":{"insertions":1,"deletions":0}}},"59f8b0bf3c12598cf4a5b333b0287774dbbdbe1f":{"author":"Hans de Goede","email":"hdegoede@redhat.com","date":"2010-09-05 10:03:48 UTC","message":"V4L/DVB: gspca_xirlink_cit: support bandwidth changing for devices with 1 alt setting\n\nSome xirlink_cit models have only 1 alt setting, but the actual used\nbandwidth can be programmed through a register use this to allow streaming\nwhile other isoc streams (for example sound) are active at the same time.\n\nSigned-off-by: Hans de Goede <hdegoede@redhat.com>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>","insertions":50,"deletions":4,"filepaths":{"drivers/media/video/gspca/xirlink_cit.c":{"insertions":50,"deletions":4}}},"53a712bae5dd919521a58d7bad773b949358add0":{"author":"Michael Ellerman","email":"mpe@ellerman.id.au","date":"2019-04-18 06:51:17 UTC","message":"powerpc/powernv/idle: Restore AMR/UAMOR/AMOR after idle\n\nIn order to implement KUAP (Kernel Userspace Access Protection) on\nPower9 we will be using the AMR, and therefore indirectly the\nUAMOR/AMOR.\n\nSo save/restore these regs in the idle code.\n\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>","insertions":23,"deletions":4,"filepaths":{"arch/powerpc/kernel/idle_book3s.S":{"insertions":23,"deletions":4}}},"a3f3072db6cad40895c585dce65e36aab997f042":{"author":"Russell Currey","email":"ruscur@russell.cc","date":"2019-04-18 06:51:16 UTC","message":"powerpc/powernv/idle: Restore IAMR after idle\n\nWithout restoring the IAMR after idle, execution prevention on POWER9\nwith Radix MMU is overwritten and the kernel can freely execute\nuserspace without faulting.\n\nThis is necessary when returning from any stop state that modifies\nuser state, as well as hypervisor state.\n\nTo test how this fails without this patch, load the lkdtm driver and\ndo the following:\n\n  $ echo EXEC_USERSPACE > /sys/kernel/debug/provoke-crash/DIRECT\n\nwhich won't fault, then boot the kernel with powersave=off, where it\nwill fault. Applying this patch will fix this.\n\nFixes: 3b10d0095a1e (\"powerpc/mm/radix: Prevent kernel execution of user space\")\nCc: stable@vger.kernel.org # v4.10+\nSigned-off-by: Russell Currey <ruscur@russell.cc>\nReviewed-by: Akshay Adiga <akshay.adiga@linux.vnet.ibm.com>\nReviewed-by: Nicholas Piggin <npiggin@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>","insertions":20,"deletions":0,"filepaths":{"arch/powerpc/kernel/idle_book3s.S":{"insertions":20,"deletions":0}}},"aca79d2b6ec2c0b955b22abb71c6dab90fa1d4d5":{"author":"Vaidyanathan Srinivasan","email":"svaidy@linux.vnet.ibm.com","date":"2014-02-26 00:08:25 UTC","message":"powerpc/powernv: Add context management for Fast Sleep\n\nBefore adding Fast-Sleep into the cpuidle framework, some low level\nsupport needs to be added to enable it. This includes saving and\nrestoring of certain registers at entry and exit time of this state\nrespectively just like we do in the NAP idle state.\n\nSigned-off-by: Vaidyanathan Srinivasan <svaidy@linux.vnet.ibm.com>\n[Changelog modified by Preeti U. Murthy <preeti@linux.vnet.ibm.com>]\nSigned-off-by: Preeti U. Murthy <preeti@linux.vnet.ibm.com>\nSigned-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>","insertions":53,"deletions":21,"filepaths":{"arch/powerpc/include/asm/processor.h":{"insertions":1,"deletions":0},"arch/powerpc/kernel/exceptions-64s.S":{"insertions":8,"deletions":2},"arch/powerpc/kernel/idle_power7.S":{"insertions":44,"deletions":19}}},"948cf67c4726cca2fc57533dccadfb54d890689d":{"author":"Benjamin Herrenschmidt","email":"benh@kernel.crashing.org","date":"2011-01-24 07:42:41 UTC","message":"powerpc: Add NAP mode support on Power7 in HV mode\n\nWakeup comes from the system reset handler with a potential loss of\nthe non-hypervisor CPU state. We save the non-volatile state on the\nstack and a pointer to it in the PACA, which the system reset handler\nuses to restore things\n\nSigned-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>","insertions":139,"deletions":2,"filepaths":{"arch/powerpc/include/asm/machdep.h":{"insertions":1,"deletions":0},"arch/powerpc/include/asm/paca.h":{"insertions":1,"deletions":1},"arch/powerpc/include/asm/ppc-opcode.h":{"insertions":6,"deletions":0},"arch/powerpc/kernel/Makefile":{"insertions":1,"deletions":0},"arch/powerpc/kernel/exceptions-64s.S":{"insertions":29,"deletions":1},"arch/powerpc/kernel/idle_power7.S":{"insertions":97,"deletions":0},"arch/powerpc/platforms/Kconfig":{"insertions":4,"deletions":0}}},"2201f994a5742c03e660623c385fd6897dd1fa2f":{"author":"Nicholas Piggin","email":"npiggin@gmail.com","date":"2017-06-13 13:05:45 UTC","message":"powerpc/64s/idle: Move soft interrupt mask logic into C code\n\nThis simplifies the asm and fixes irq-off tracing over sleep\ninstructions.\n\nAlso move powersave_nap check for POWER8 into C code, and move\nPSSCR register value calculation for POWER9 into C.\n\nReviewed-by: Gautham R. Shenoy <ego@linux.vnet.ibm.com>\nSigned-off-by: Nicholas Piggin <npiggin@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>","insertions":128,"deletions":89,"filepaths":{"arch/powerpc/include/asm/hw_irq.h":{"insertions":3,"deletions":0},"arch/powerpc/include/asm/machdep.h":{"insertions":1,"deletions":0},"arch/powerpc/include/asm/processor.h":{"insertions":5,"deletions":5},"arch/powerpc/kernel/idle_book3s.S":{"insertions":15,"deletions":67},"arch/powerpc/kernel/irq.c":{"insertions":32,"deletions":1},"arch/powerpc/platforms/powernv/idle.c":{"insertions":65,"deletions":6},"arch/powerpc/platforms/powernv/smp.c":{"insertions":0,"deletions":2},"arch/powerpc/platforms/powernv/subcore.c":{"insertions":2,"deletions":1},"drivers/cpuidle/cpuidle-powernv.c":{"insertions":5,"deletions":7}}},"3b2549a3740efb8af0150415737067d87e466c5b":{"author":"Dan Carpenter","email":"dan.carpenter@oracle.com","date":"2020-01-08 05:37:06 UTC","message":"ALSA: control: potential uninitialized return value\n\nSmatch complains that \"ret\" might be uninitialized.\n\nFixes: fbd3eb7f66c5 (\"ALSA: control: Add verification for kctl accesses\")\nSigned-off-by: Dan Carpenter <dan.carpenter@oracle.com>\nLink: https://lore.kernel.org/r/20200108053706.h3hcnvmnf62wkjac@kili.mountain\nSigned-off-by: Takashi Iwai <tiwai@suse.de>","insertions":1,"deletions":1,"filepaths":{"sound/core/control.c":{"insertions":1,"deletions":1}}},"fbd3eb7f66c5b4f37a959bc2deaeb1d7b5ddf0d4":{"author":"Takashi Iwai","email":"tiwai@suse.de","date":"2020-01-04 08:35:56 UTC","message":"ALSA: control: Add verification for kctl accesses\n\nThe current implementation of ALSA control API fully relies on the\ncallbacks of each driver, and there is no verification of the values\npassed via API.  This patch is an attempt to improve the situation\nslightly by adding the validation code for the values stored via info\nand get callbacks.\n\nThe patch adds a new kconfig, CONFIG_SND_CTL_VALIDATION.  It depends\non CONFIG_SND_DEBUG and off as default since the validation would\nrequire a slight overhead including the additional call of info\ncallback at each get callback invocation.\n\nWhen this config is enabled, the values stored by each info callback\ninvocation are verified, namely:\n- Whether the info type is valid\n- Whether the number of enum items is non-zero\n- Whether the given info count is within the allowed boundary\n\nSimilarly, the values stored at each get callback are verified as\nwell:\n- Whether the values are within the given range\n- Whether the values are aligned with the given st","insertions":268,"deletions":39,"filepaths":{"include/sound/control.h":{"insertions":10,"deletions":0},"sound/core/Kconfig":{"insertions":9,"deletions":0},"sound/core/control.c":{"insertions":246,"deletions":37},"sound/core/pcm_lib.c":{"insertions":1,"deletions":1},"sound/pci/hda/patch_hdmi.c":{"insertions":2,"deletions":1}}},"215d1f3928713d6eaec67244bcda72105b898000":{},"3f777e19d171670ab558a6d5e6b1ac7f9b6c574f":{"author":"Linus Torvalds","email":"torvalds@linux-foundation.org","date":"2020-04-28 16:13:08 UTC","message":" s390x/mm/uaccess: Fix race between page table upgrade and uaccess\n \n This fixes CVE-2020-11884 which allows for a local kernel crash or\n code execution.\n -----BEGIN PGP SIGNATURE-----\n Version: GnuPG v2.0.22 (GNU/Linux)\n \n iQIcBAABAgAGBQJeny8gAAoJEBF7vIC1phx8eWYP/2R8iLZIKrpb58PVQFAECJYp\n EIiiZ3b68AdlKUa52iLXt+WYC2RDIrNdSIsUXVWtXSGPfuE/vsY2fF4seUfrAzzu\n 2usvjcJA3y7l32Xmlqz1WPK+6JBfxjGvLM80pHTD3bQpOEymJ4ODhWlbDwmBVl6U\n oYRMZfNyy/J+xOE0P6XRewllq9Vbx6xBX2CVIV8PDM1ktrAj/Q4e9CqMBx7RT3Vf\n 36/CR3numLA6l6xktFoqfs2WV85uORfC7+tuHXepmEartfLu2109WW+H8aNd33Bj\n wuKTMi5IJbvToRhL6tBY0yhTGxwVwhoD/CDFEl1Qdf8yJfaNHjlzzncEsZPBJxu2\n cOyaTNZgHbcg7EteSpB8l/VAS7aaVoeQ+oKHKstjsHzfLE5UGItcF92BWUVYuHlx\n UcOcbDC9glLgfFIujAfsaVnS+iLxz+tV7ftfzFZTNl4ZF568f2urMNQF5RbOVip2\n RZZz/7wxE22VwNRilM+8bqriW0or4zr/Wo1cZan+dZxNUDzT+uFlDrWrUGTKeNwf\n Fe7DplD82FVYGrbC66huVzq40/31TTKo8dxpAXK79ETJ53qKP3vAGJ0TOyrc4fHP\n 9VdErI7Ij+igfnQdBzdJYNuQmFT2gbeoNfqU4eam4sYSFik/1jrqiJgUfUmjW0no\n ugnUhVZ13vkE+ZjYlP2W\n =F1vM\n -----END PGP SIGNATURE","insertions":18,"deletions":2,"filepaths":{"arch/s390/lib/uaccess.c":{"insertions":4,"deletions":0},"arch/s390/mm/pgalloc.c":{"insertions":14,"deletions":2}}},"0aaba41b58bc5f3074c0c0a6136b9500b5e29e19":{"author":"Martin Schwidefsky","email":"schwidefsky@de.ibm.com","date":"2017-08-22 10:08:22 UTC","message":"s390: remove all code using the access register mode\n\nThe vdso code for the getcpu() and the clock_gettime() call use the access\nregister mode to access the per-CPU vdso data page with the current code.\n\nAn alternative to the complicated AR mode is to use the secondary space\nmode. This makes the vdso faster and quite a bit simpler. The downside is\nthat the uaccess code has to be changed quite a bit.\n\nWhich instructions are used depends on the machine and what kind of uaccess\noperation is requested. The instruction dictates which ASCE value needs\nto be loaded into %cr1 and %cr7.\n\nThe different cases:\n\n* User copy with MVCOS for z10 and newer machines\n  The MVCOS instruction can copy between the primary space (aka user) and\n  the home space (aka kernel) directly. For set_fs(KERNEL_DS) the kernel\n  ASCE is loaded into %cr1. For set_fs(USER_DS) the user space is already\n  loaded in %cr1.\n\n* User copy with MVCP/MVCS for older machines\n  To be able to execute the MVCP/MVCS instructions the ke","insertions":228,"deletions":210,"filepaths":{"arch/s390/include/asm/futex.h":{"insertions":6,"deletions":3},"arch/s390/include/asm/lowcore.h":{"insertions":14,"deletions":19},"arch/s390/include/asm/mmu_context.h":{"insertions":16,"deletions":20},"arch/s390/include/asm/processor.h":{"insertions":1,"deletions":3},"arch/s390/include/asm/uaccess.h":{"insertions":9,"deletions":20},"arch/s390/kernel/asm-offsets.c":{"insertions":1,"deletions":1},"arch/s390/kernel/entry.S":{"insertions":21,"deletions":5},"arch/s390/kernel/head64.S":{"insertions":1,"deletions":1},"arch/s390/kernel/vdso.c":{"insertions":4,"deletions":40},"arch/s390/kernel/vdso32/getcpu.S":{"insertions":2,"deletions":14},"arch/s390/kernel/vdso64/clock_gettime.S":{"insertions":4,"deletions":15},"arch/s390/kernel/vdso64/getcpu.S":{"insertions":2,"deletions":13},"arch/s390/lib/uaccess.c":{"insertions":80,"deletions":10},"arch/s390/mm/fault.c":{"insertions":65,"deletions":43},"arch/s390/mm/init.c":{"insertions":1,"deletions":0},"arch/s390/mm/pgalloc.c":{"insertions":1,"deletions":3}}},"1e133ab296f3ff8d9e58a5e758291ed39ba72ad7":{"author":"Martin Schwidefsky","email":"schwidefsky@de.ibm.com","date":"2016-03-08 10:49:57 UTC","message":"s390/mm: split arch/s390/mm/pgtable.c\n\nThe pgtable.c file is quite big, before it grows any larger split it\ninto pgtable.c, pgalloc.c and gmap.c. In addition move the gmap related\nheader definitions into the new gmap.h header and all of the pgste\nhelpers from pgtable.h to pgtable.c.\n\nSigned-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>","insertions":1464,"deletions":1405,"filepaths":{"arch/s390/include/asm/gmap.h":{"insertions":64,"deletions":0},"arch/s390/include/asm/pgalloc.h":{"insertions":0,"deletions":4},"arch/s390/include/asm/pgtable.h":{"insertions":16,"deletions":107},"arch/s390/kernel/asm-offsets.c":{"insertions":1,"deletions":0},"arch/s390/kvm/diag.c":{"insertions":1,"deletions":0},"arch/s390/kvm/interrupt.c":{"insertions":1,"deletions":0},"arch/s390/kvm/kvm-s390.c":{"insertions":2,"deletions":1},"arch/s390/kvm/priv.c":{"insertions":1,"deletions":0},"arch/s390/mm/Makefile":{"insertions":3,"deletions":1},"arch/s390/mm/fault.c":{"insertions":1,"deletions":0},"arch/s390/mm/gmap.c":{"insertions":774,"deletions":0},"arch/s390/mm/pgalloc.c":{"insertions":360,"deletions":0},"arch/s390/mm/pgtable.c":{"insertions":240,"deletions":1292}}},"056ad39ee9253873522f6469c3364964a322912b":{"author":"Alan Stern","email":"stern@rowland.harvard.edu","date":"2020-03-28 20:18:11 UTC","message":"USB: core: Fix free-while-in-use bug in the USB S-Glibrary\n\nFuzzUSB (a variant of syzkaller) found a free-while-still-in-use bug\nin the USB scatter-gather library:\n\nBUG: KASAN: use-after-free in atomic_read\ninclude/asm-generic/atomic-instrumented.h:26 [inline]\nBUG: KASAN: use-after-free in usb_hcd_unlink_urb+0x5f/0x170\ndrivers/usb/core/hcd.c:1607\nRead of size 4 at addr ffff888065379610 by task kworker/u4:1/27\n\nCPU: 1 PID: 27 Comm: kworker/u4:1 Not tainted 5.5.11 #2\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS\n1.10.2-1ubuntu1 04/01/2014\nWorkqueue: scsi_tmf_2 scmd_eh_abort_handler\nCall Trace:\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0xce/0x128 lib/dump_stack.c:118\n print_address_description.constprop.4+0x21/0x3c0 mm/kasan/report.c:374\n __kasan_report+0x153/0x1cb mm/kasan/report.c:506\n kasan_report+0x12/0x20 mm/kasan/common.c:639\n check_memory_region_inline mm/kasan/generic.c:185 [inline]\n check_memory_region+0x152/0x1b0 mm/kasan/generic.c:192\n __kasan_check_re","insertions":8,"deletions":1,"filepaths":{"drivers/usb/core/message.c":{"insertions":8,"deletions":1}}},"5f2e5fb873e269fcb806165715d237f0de4ecf1d":{"author":"David Mosberger","email":"davidm@egauge.net","date":"2016-03-08 21:42:49 UTC","message":"drivers: usb: core: Minimize irq disabling in usb_sg_cancel()\n\nRestructure usb_sg_cancel() so we don't have to disable interrupts\nwhile cancelling the URBs.\n\nSuggested-by: Alan Stern <stern@rowland.harvard.edu>\nSigned-off-by: David Mosberger <davidm@egauge.net>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":17,"deletions":20,"filepaths":{"drivers/usb/core/message.c":{"insertions":17,"deletions":20}}},"^1da177e4c3f41524e886b7f1b8a0c1fc7321cac":{},"441b62c1edb986827154768d89bbac0ba779984f":{"author":"Harvey Harrison","email":"harvey.harrison@gmail.com","date":"2008-03-04 00:08:34 UTC","message":"USB: replace remaining __FUNCTION__ occurrences\n\n__FUNCTION__ is gcc-specific, use __func__\n\nSigned-off-by: Harvey Harrison <harvey.harrison@gmail.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@suse.de>","insertions":2130,"deletions":2130,"filepaths":{"drivers/usb/atm/ueagle-atm.c":{"insertions":3,"deletions":3},"drivers/usb/class/cdc-acm.c":{"insertions":3,"deletions":3},"drivers/usb/core/devio.c":{"insertions":21,"deletions":21},"drivers/usb/core/driver.c":{"insertions":15,"deletions":15},"drivers/usb/core/hub.c":{"insertions":4,"deletions":4},"drivers/usb/core/inode.c":{"insertions":2,"deletions":2},"drivers/usb/core/message.c":{"insertions":4,"deletions":4},"drivers/usb/core/urb.c":{"insertions":1,"deletions":1},"drivers/usb/gadget/at91_udc.c":{"insertions":2,"deletions":2},"drivers/usb/gadget/dummy_hcd.c":{"insertions":6,"deletions":6},"drivers/usb/gadget/ether.c":{"insertions":6,"deletions":6},"drivers/usb/gadget/file_storage.c":{"insertions":4,"deletions":4},"drivers/usb/gadget/fsl_usb2_udc.c":{"insertions":2,"deletions":2},"drivers/usb/gadget/fsl_usb2_udc.h":{"insertions":1,"deletions":1},"drivers/usb/gadget/goku_udc.c":{"insertions":10,"deletions":10},"drivers/usb/gadget/inode.c":{"insertions":9,"deletions":9},"drivers/usb/gadget/lh7a40x_udc.c":{"insertions":66,"deletions":66},"drivers/usb/gadget/net2280.h":{"insertions":1,"deletions":1},"drivers/usb/gadget/omap_udc.c":{"insertions":8,"deletions":8},"drivers/usb/gadget/printer.c":{"insertions":3,"deletions":3},"drivers/usb/gadget/pxa2xx_udc.c":{"insertions":13,"deletions":13},"drivers/usb/gadget/rndis.c":{"insertions":73,"deletions":73},"drivers/usb/host/ehci-q.c":{"insertions":2,"deletions":2},"drivers/usb/host/ehci-sched.c":{"insertions":1,"deletions":1},"drivers/usb/host/pci-quirks.c":{"insertions":3,"deletions":3},"drivers/usb/host/sl811-hcd.c":{"insertions":2,"deletions":2},"drivers/usb/host/uhci-hcd.c":{"insertions":3,"deletions":3},"drivers/usb/host/uhci-q.c":{"insertions":1,"deletions":1},"drivers/usb/misc/adutux.c":{"insertions":60,"deletions":60},"drivers/usb/misc/appledisplay.c":{"insertions":3,"deletions":3},"drivers/usb/misc/auerswald.c":{"insertions":4,"deletions":4},"drivers/usb/misc/emi26.c":{"insertions":15,"deletions":15},"drivers/usb/misc/emi62.c":{"insertions":16,"deletions":16},"drivers/usb/misc/iowarrior.c":{"insertions":3,"deletions":3},"drivers/usb/misc/ldusb.c":{"insertions":5,"deletions":5},"drivers/usb/misc/legousbtower.c":{"insertions":44,"deletions":44},"drivers/usb/misc/phidgetkit.c":{"insertions":3,"deletions":3},"drivers/usb/misc/phidgetmotorcontrol.c":{"insertions":1,"deletions":1},"drivers/usb/misc/phidgetservo.c":{"insertions":3,"deletions":3},"drivers/usb/misc/usblcd.c":{"insertions":3,"deletions":3},"drivers/usb/misc/usbtest.c":{"insertions":2,"deletions":2},"drivers/usb/serial/aircable.c":{"insertions":26,"deletions":26},"drivers/usb/serial/airprime.c":{"insertions":17,"deletions":17},"drivers/usb/serial/ark3116.c":{"insertions":3,"deletions":3},"drivers/usb/serial/belkin_sa.c":{"insertions":9,"deletions":9},"drivers/usb/serial/console.c":{"insertions":5,"deletions":5},"drivers/usb/serial/cp2101.c":{"insertions":54,"deletions":54},"drivers/usb/serial/cyberjack.c":{"insertions":36,"deletions":36},"drivers/usb/serial/cypress_m8.c":{"insertions":64,"deletions":64},"drivers/usb/serial/digi_acceleport.c":{"insertions":18,"deletions":18},"drivers/usb/serial/empeg.c":{"insertions":27,"deletions":27},"drivers/usb/serial/ezusb.c":{"insertions":4,"deletions":4},"drivers/usb/serial/ftdi_sio.c":{"insertions":78,"deletions":78},"drivers/usb/serial/garmin_gps.c":{"insertions":53,"deletions":53},"drivers/usb/serial/generic.c":{"insertions":22,"deletions":22},"drivers/usb/serial/io_edgeport.c":{"insertions":159,"deletions":159},"drivers/usb/serial/io_ti.c":{"insertions":182,"deletions":182},"drivers/usb/serial/ipaq.c":{"insertions":22,"deletions":22},"drivers/usb/serial/ipw.c":{"insertions":24,"deletions":24},"drivers/usb/serial/ir-usb.c":{"insertions":23,"deletions":23},"drivers/usb/serial/iuu_phoenix.c":{"insertions":64,"deletions":64},"drivers/usb/serial/keyspan.c":{"insertions":117,"deletions":117},"drivers/usb/serial/keyspan_pda.c":{"insertions":10,"deletions":10},"drivers/usb/serial/kl5kusb105.c":{"insertions":39,"deletions":39},"drivers/usb/serial/kobil_sct.c":{"insertions":28,"deletions":28},"drivers/usb/serial/mct_u232.c":{"insertions":18,"deletions":18},"drivers/usb/serial/mos7720.c":{"insertions":59,"deletions":59},"drivers/usb/serial/mos7840.c":{"insertions":75,"deletions":75},"drivers/usb/serial/navman.c":{"insertions":9,"deletions":9},"drivers/usb/serial/omninet.c":{"insertions":16,"deletions":16},"drivers/usb/serial/option.c":{"insertions":32,"deletions":32},"drivers/usb/serial/oti6858.c":{"insertions":54,"deletions":54},"drivers/usb/serial/pl2303.c":{"insertions":53,"deletions":53},"drivers/usb/serial/safe_serial.c":{"insertions":14,"deletions":14},"drivers/usb/serial/sierra.c":{"insertions":31,"deletions":31},"drivers/usb/serial/ti_usb_3410_5052.c":{"insertions":95,"deletions":95},"drivers/usb/serial/usb-serial.c":{"insertions":39,"deletions":39},"drivers/usb/serial/visor.c":{"insertions":43,"deletions":43},"drivers/usb/serial/whiteheat.c":{"insertions":52,"deletions":52},"drivers/usb/storage/scsiglue.c":{"insertions":5,"deletions":5},"drivers/usb/storage/transport.c":{"insertions":9,"deletions":9},"drivers/usb/storage/usb.c":{"insertions":8,"deletions":8},"drivers/usb/usb-skeleton.c":{"insertions":3,"deletions":3}}},"782e70c6fc2290a0395850e8e02583b8b62264d8":{"author":"Greg Kroah-Hartman","email":"gregkh@suse.de","date":"2008-01-25 17:12:21 UTC","message":"USB: mark USB drivers as being GPL only\n\nOver two years ago, the Linux USB developers stated that they believed\nthere was no way to create a USB kernel driver that was not under the\nGPL.  This patch moves the USB apis to enforce that decision.\n\nThere are no known closed source USB drivers in the wild, so this patch\nshould cause no problems.\n\nSigned-off-by: Greg Kroah-Hartman <gregkh@suse.de>","insertions":61,"deletions":111,"filepaths":{"Documentation/feature-removal-schedule.txt":{"insertions":0,"deletions":16},"drivers/usb/core/driver.c":{"insertions":5,"deletions":5},"drivers/usb/core/file.c":{"insertions":2,"deletions":2},"drivers/usb/core/hcd-pci.c":{"insertions":5,"deletions":5},"drivers/usb/core/hcd.c":{"insertions":9,"deletions":9},"drivers/usb/core/hub.c":{"insertions":3,"deletions":2},"drivers/usb/core/message.c":{"insertions":11,"deletions":21},"drivers/usb/core/urb.c":{"insertions":7,"deletions":8},"drivers/usb/core/usb.c":{"insertions":19,"deletions":43}}},"b102f0c522cf668c8382c56a4f771b37d011cda2":{"author":"Felix Fietkau","email":"nbd@nbd.name","date":"2020-02-20 11:41:39 UTC","message":"mt76: fix array overflow on receiving too many fragments for a packet\n\nIf the hardware receives an oversized packet with too many rx fragments,\nskb_shinfo(skb)->frags can overflow and corrupt memory of adjacent pages.\nThis becomes especially visible if it corrupts the freelist pointer of\na slab page.\n\nCc: stable@vger.kernel.org\nSigned-off-by: Felix Fietkau <nbd@nbd.name>\nSigned-off-by: Kalle Valo <kvalo@codeaurora.org>","insertions":6,"deletions":3,"filepaths":{"drivers/net/wireless/mediatek/mt76/dma.c":{"insertions":6,"deletions":3}}},"17f1de56df051229988aab37e01971c9713c4a31":{"author":"Felix Fietkau","email":"nbd@nbd.name","date":"2017-11-21 09:50:52 UTC","message":"mt76: add common code shared between multiple chipsets\n\nThis will be used by drivers for MT76x2e, MT7603e and MT7628\n\nSigned-off-by: Felix Fietkau <nbd@nbd.name>\nSigned-off-by: Kalle Valo <kvalo@codeaurora.org>","insertions":2219,"deletions":0,"filepaths":{"drivers/net/wireless/mediatek/mt76/debugfs.c":{"insertions":77,"deletions":0},"drivers/net/wireless/mediatek/mt76/dma.c":{"insertions":451,"deletions":0},"drivers/net/wireless/mediatek/mt76/dma.h":{"insertions":38,"deletions":0},"drivers/net/wireless/mediatek/mt76/eeprom.c":{"insertions":112,"deletions":0},"drivers/net/wireless/mediatek/mt76/mac80211.c":{"insertions":393,"deletions":0},"drivers/net/wireless/mediatek/mt76/mmio.c":{"insertions":61,"deletions":0},"drivers/net/wireless/mediatek/mt76/mt76.h":{"insertions":360,"deletions":0},"drivers/net/wireless/mediatek/mt76/trace.c":{"insertions":23,"deletions":0},"drivers/net/wireless/mediatek/mt76/trace.h":{"insertions":71,"deletions":0},"drivers/net/wireless/mediatek/mt76/tx.c":{"insertions":511,"deletions":0},"drivers/net/wireless/mediatek/mt76/util.c":{"insertions":78,"deletions":0},"drivers/net/wireless/mediatek/mt76/util.h":{"insertions":44,"deletions":0}}},"28d76df18f0ad5bcf5fa48510b225f0ed262a99b":{"author":"Dan Carpenter","email":"dan.carpenter@oracle.com","date":"2020-01-14 12:34:14 UTC","message":"scsi: mptfusion: Fix double fetch bug in ioctl\n\nTom Hatskevich reported that we look up \"iocp\" then, in the called\nfunctions we do a second copy_from_user() and look it up again.\nThe problem that could cause is:\n\ndrivers/message/fusion/mptctl.c\n   674          /* All of these commands require an interrupt or\n   675           * are unknown/illegal.\n   676           */\n   677          if ((ret = mptctl_syscall_down(iocp, nonblock)) != 0)\n                                               ^^^^\nWe take this lock.\n\n   678                  return ret;\n   679\n   680          if (cmd == MPTFWDOWNLOAD)\n   681                  ret = mptctl_fw_download(arg);\n                                                 ^^^\nThen the user memory changes and we look up \"iocp\" again but a different\none so now we are holding the incorrect lock and have a race condition.\n\n   682          else if (cmd == MPTCOMMAND)\n   683                  ret = mptctl_mpt_command(arg);\n\nThe security impact of this bug is not as bad as i","insertions":50,"deletions":163,"filepaths":{"drivers/message/fusion/mptctl.c":{"insertions":50,"deletions":163}}},"29dd3609f2fc70e02ce48123485b14d9417b834f":{"author":"Eric Moore","email":"eric.moore@lsi.com","date":"2007-09-15 00:46:51 UTC","message":"[SCSI] mpt fusion: standardize printks and debug info\n\nStandardize all prints using common MYIOC_s_XXX_FMT macro defined in mptbase.h. Currently the driver uses several different methods to display info, where in some cases the \"controller name\" generating the printk is not provided.\n\nSigned-off-by: Eric Moore <Eric.Moore@lsi.com>\nSigned-off-by: James Bottomley <James.Bottomley@SteelEye.com>","insertions":505,"deletions":464,"filepaths":{"drivers/message/fusion/mptbase.c":{"insertions":138,"deletions":141},"drivers/message/fusion/mptctl.c":{"insertions":117,"deletions":116},"drivers/message/fusion/mptfc.c":{"insertions":5,"deletions":5},"drivers/message/fusion/mptsas.c":{"insertions":144,"deletions":109},"drivers/message/fusion/mptscsih.c":{"insertions":72,"deletions":68},"drivers/message/fusion/mptspi.c":{"insertions":29,"deletions":25}}},"09120a8cd38dbdb0c9a59ff8456cf88b510e6baa":{"author":"Prakash, Sathya","email":"sathya.prakash@lsi.com","date":"2007-07-24 10:19:05 UTC","message":"[SCSI] mpt fusion: Changes in mptctl.c for logging support\n\nThis patch contains changes in mptctl.c to support logging in MPT fusion drivers\n\nThe changes are majorly in debug printks, the existing debugprintk are\nmodified accroding to new debug macros defined in the file mptbdebug.h\n\nsigned-off-by: Sathya Prakash <sathya.prakash@lsi.com>\nSigned-off-by: James Bottomley <James.Bottomley@SteelEye.com>","insertions":141,"deletions":125,"filepaths":{"drivers/message/fusion/mptctl.c":{"insertions":141,"deletions":125}}},"946cbf040adb9db05bb895a4b629537fd2d03b0e":{"author":"Moore, Eric","email":"Eric.Moore@lsil.com","date":"2006-02-03 00:19:50 UTC","message":"[SCSI] fusion - mptctl -firmware download fix\n\nFix's firmware download ioctl to work with SAS.\n\nSigned-off-by: Eric Moore <Eric.Moore@lsil.com>\nSigned-off-by: James Bottomley <James.Bottomley@SteelEye.com>","insertions":20,"deletions":15,"filepaths":{"drivers/message/fusion/mptctl.c":{"insertions":20,"deletions":15}}},"ea2a788de4ce5ebab09276e25443f55592af2335":{"author":"Kashyap, Desai","email":"kashyap.desai@lsi.com","date":"2009-05-29 11:16:50 UTC","message":"[SCSI] mpt fusion: rewrite of ioctl_cmds internal generated function\n\n1) rewrite of ioctl_cmds internal generated function that issue commands to\nfirmware, porting them to be single threaded using the generic MPT_MGMT\nstruct. All wait Queues are replace by completion Queue.\n2) added seperate callback handler for ioctl task managment\n(mptctl_taskmgmt_reply), to handle command that timeout\n3) rewrite mptctl_bus_reset\n\nSigned-off-by: Kashyap Desai <kadesai@lsi.com>\nSigned-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>","insertions":394,"deletions":320,"filepaths":{"drivers/message/fusion/mptbase.h":{"insertions":6,"deletions":15},"drivers/message/fusion/mptctl.c":{"insertions":357,"deletions":293},"drivers/message/fusion/mptfc.c":{"insertions":0,"deletions":2},"drivers/message/fusion/mptsas.c":{"insertions":31,"deletions":6},"drivers/message/fusion/mptscsih.c":{"insertions":0,"deletions":2},"drivers/message/fusion/mptspi.c":{"insertions":0,"deletions":2}}},"b70261a288ea4d2f4ac7cd04be08a9f0f2de4f4d":{"author":"Qing Xu","email":"m1s5p6688@gmail.com","date":"2020-01-02 02:39:27 UTC","message":"mwifiex: Fix possible buffer overflows in mwifiex_cmd_append_vsie_tlv()\n\nmwifiex_cmd_append_vsie_tlv() calls memcpy() without checking\nthe destination size may trigger a buffer overflower,\nwhich a local user could use to cause denial of service\nor the execution of arbitrary code.\nFix it by putting the length check before calling memcpy().\n\nSigned-off-by: Qing Xu <m1s5p6688@gmail.com>\nSigned-off-by: Kalle Valo <kvalo@codeaurora.org>","insertions":7,"deletions":0,"filepaths":{"drivers/net/wireless/marvell/mwifiex/scan.c":{"insertions":7,"deletions":0}}},"5e6e3a92b9a4c9416b17f468fa5c7fa2233b8b4e":{"author":"Bing Zhao","email":"bzhao@marvell.com","date":"2011-03-22 01:00:50 UTC","message":"wireless: mwifiex: initial commit for Marvell mwifiex driver\n\nThis driver adds WiFi support for Marvell 802.11n based chipsets\nwith SDIO interface. Currently only SD8787 is supported. More\nchipsets will be supported later.\n\ndrivers/net/wireless/mwifiex/\n\nSigned-off-by: Nishant Sarmukadam <nishants@marvell.com>\nSigned-off-by: Amitkumar Karwar <akarwar@marvell.com>\nSigned-off-by: Kiran Divekar <dkiran@marvell.com>\nSigned-off-by: Bing Zhao <bzhao@marvell.com>\nSigned-off-by: Yogesh Ashok Powar <yogeshp@marvell.com>\nSigned-off-by: Marc Yang <yangyang@marvell.com>\nSigned-off-by: Ramesh Radhakrishnan <rramesh@marvell.com>\nSigned-off-by: Frank Huang <frankh@marvell.com>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>","insertions":25465,"deletions":0,"filepaths":{"drivers/net/wireless/Kconfig":{"insertions":1,"deletions":0},"drivers/net/wireless/Makefile":{"insertions":2,"deletions":0},"drivers/net/wireless/mwifiex/11n.c":{"insertions":922,"deletions":0},"drivers/net/wireless/mwifiex/11n.h":{"insertions":178,"deletions":0},"drivers/net/wireless/mwifiex/11n_aggr.c":{"insertions":423,"deletions":0},"drivers/net/wireless/mwifiex/11n_aggr.h":{"insertions":32,"deletions":0},"drivers/net/wireless/mwifiex/11n_rxreorder.c":{"insertions":637,"deletions":0},"drivers/net/wireless/mwifiex/11n_rxreorder.h":{"insertions":67,"deletions":0},"drivers/net/wireless/mwifiex/Kconfig":{"insertions":21,"deletions":0},"drivers/net/wireless/mwifiex/Makefile":{"insertions":41,"deletions":0},"drivers/net/wireless/mwifiex/README":{"insertions":204,"deletions":0},"drivers/net/wireless/mwifiex/cfg80211.c":{"insertions":1517,"deletions":0},"drivers/net/wireless/mwifiex/cfg80211.h":{"insertions":31,"deletions":0},"drivers/net/wireless/mwifiex/cfp.c":{"insertions":368,"deletions":0},"drivers/net/wireless/mwifiex/cmdevt.c":{"insertions":1463,"deletions":0},"drivers/net/wireless/mwifiex/debugfs.c":{"insertions":773,"deletions":0},"drivers/net/wireless/mwifiex/decl.h":{"insertions":177,"deletions":0},"drivers/net/wireless/mwifiex/fw.h":{"insertions":1376,"deletions":0},"drivers/net/wireless/mwifiex/init.c":{"insertions":665,"deletions":0},"drivers/net/wireless/mwifiex/ioctl.h":{"insertions":433,"deletions":0},"drivers/net/wireless/mwifiex/join.c":{"insertions":1464,"deletions":0},"drivers/net/wireless/mwifiex/main.c":{"insertions":1102,"deletions":0},"drivers/net/wireless/mwifiex/main.h":{"insertions":1081,"deletions":0},"drivers/net/wireless/mwifiex/scan.c":{"insertions":3098,"deletions":0},"drivers/net/wireless/mwifiex/sdio.c":{"insertions":1770,"deletions":0},"drivers/net/wireless/mwifiex/sdio.h":{"insertions":305,"deletions":0},"drivers/net/wireless/mwifiex/sta_cmd.c":{"insertions":1226,"deletions":0},"drivers/net/wireless/mwifiex/sta_cmdresp.c":{"insertions":986,"deletions":0},"drivers/net/wireless/mwifiex/sta_event.c":{"insertions":405,"deletions":0},"drivers/net/wireless/mwifiex/sta_ioctl.c":{"insertions":2478,"deletions":0},"drivers/net/wireless/mwifiex/sta_rx.c":{"insertions":182,"deletions":0},"drivers/net/wireless/mwifiex/sta_tx.c":{"insertions":202,"deletions":0},"drivers/net/wireless/mwifiex/txrx.c":{"insertions":202,"deletions":0},"drivers/net/wireless/mwifiex/util.c":{"insertions":252,"deletions":0},"drivers/net/wireless/mwifiex/util.h":{"insertions":32,"deletions":0},"drivers/net/wireless/mwifiex/wmm.c":{"insertions":1237,"deletions":0},"drivers/net/wireless/mwifiex/wmm.h":{"insertions":112,"deletions":0}}},"3a9b153c5591548612c3955c9600a98150c81875":{"author":"Qing Xu","email":"m1s5p6688@gmail.com","date":"2020-01-02 02:39:26 UTC","message":"mwifiex: Fix possible buffer overflows in mwifiex_ret_wmm_get_status()\n\nmwifiex_ret_wmm_get_status() calls memcpy() without checking the\ndestination size.Since the source is given from remote AP which\ncontains illegal wmm elements , this may trigger a heap buffer\noverflow.\nFix it by putting the length check before calling memcpy().\n\nSigned-off-by: Qing Xu <m1s5p6688@gmail.com>\nSigned-off-by: Kalle Valo <kvalo@codeaurora.org>","insertions":4,"deletions":0,"filepaths":{"drivers/net/wireless/marvell/mwifiex/wmm.c":{"insertions":4,"deletions":0}}},"acebe8c10a6eabdb9c34370a774b5b3fcbae3ff4":{"author":"Zhaoyang Liu","email":"liuzy@marvell.com","date":"2015-05-11 19:18:20 UTC","message":"mwifiex: change dbg print func to mwifiex_dbg\n\nThis patch changes all debug print functions from dev_dbg/dev_err/dev_info\nto mwifiex specific debug functions.\n\nSigned-off-by: Zhaoyang Liu <liuzy@marvell.com>\nSigned-off-by: Cathy Luo <cluo@marvell.com>\nSigned-off-by: Avinash Patil <patila@marvell.com>\nSigned-off-by: Kalle Valo <kvalo@codeaurora.org>","insertions":2122,"deletions":1698,"filepaths":{"drivers/net/wireless/mwifiex/11h.c":{"insertions":25,"deletions":23},"drivers/net/wireless/mwifiex/11n.c":{"insertions":13,"deletions":11},"drivers/net/wireless/mwifiex/11n_aggr.c":{"insertions":3,"deletions":4},"drivers/net/wireless/mwifiex/11n_rxreorder.c":{"insertions":26,"deletions":25},"drivers/net/wireless/mwifiex/cfg80211.c":{"insertions":259,"deletions":203},"drivers/net/wireless/mwifiex/cfp.c":{"insertions":29,"deletions":21},"drivers/net/wireless/mwifiex/cmdevt.c":{"insertions":204,"deletions":150},"drivers/net/wireless/mwifiex/debugfs.c":{"insertions":2,"deletions":1},"drivers/net/wireless/mwifiex/ethtool.c":{"insertions":4,"deletions":2},"drivers/net/wireless/mwifiex/init.c":{"insertions":31,"deletions":22},"drivers/net/wireless/mwifiex/join.c":{"insertions":113,"deletions":95},"drivers/net/wireless/mwifiex/main.c":{"insertions":64,"deletions":45},"drivers/net/wireless/mwifiex/pcie.c":{"insertions":302,"deletions":248},"drivers/net/wireless/mwifiex/scan.c":{"insertions":206,"deletions":168},"drivers/net/wireless/mwifiex/sdio.c":{"insertions":244,"deletions":180},"drivers/net/wireless/mwifiex/sta_cmd.c":{"insertions":74,"deletions":62},"drivers/net/wireless/mwifiex/sta_cmdresp.c":{"insertions":96,"deletions":85},"drivers/net/wireless/mwifiex/sta_event.c":{"insertions":68,"deletions":62},"drivers/net/wireless/mwifiex/sta_ioctl.c":{"insertions":82,"deletions":63},"drivers/net/wireless/mwifiex/sta_rx.c":{"insertions":7,"deletions":6},"drivers/net/wireless/mwifiex/sta_tx.c":{"insertions":11,"deletions":7},"drivers/net/wireless/mwifiex/tdls.c":{"insertions":44,"deletions":42},"drivers/net/wireless/mwifiex/txrx.c":{"insertions":14,"deletions":11},"drivers/net/wireless/mwifiex/uap_cmd.c":{"insertions":12,"deletions":8},"drivers/net/wireless/mwifiex/uap_event.c":{"insertions":24,"deletions":20},"drivers/net/wireless/mwifiex/uap_txrx.c":{"insertions":20,"deletions":16},"drivers/net/wireless/mwifiex/usb.c":{"insertions":80,"deletions":61},"drivers/net/wireless/mwifiex/util.c":{"insertions":13,"deletions":11},"drivers/net/wireless/mwifiex/wmm.c":{"insertions":52,"deletions":46}}},"2f95fa5c955d0a9987ffdc3a095e2f4e62c5f2a9":{"author":"Zhiqiang Liu","email":"liuzhiqiang26@huawei.com","date":"2020-03-19 11:18:13 UTC","message":"block, bfq: fix use-after-free in bfq_idle_slice_timer_body\n\nIn bfq_idle_slice_timer func, bfqq = bfqd->in_service_queue is\nnot in bfqd-lock critical section. The bfqq, which is not\nequal to NULL in bfq_idle_slice_timer, may be freed after passing\nto bfq_idle_slice_timer_body. So we will access the freed memory.\n\nIn addition, considering the bfqq may be in race, we should\nfirstly check whether bfqq is in service before doing something\non it in bfq_idle_slice_timer_body func. If the bfqq in race is\nnot in service, it means the bfqq has been expired through\n__bfq_bfqq_expire func, and wait_request flags has been cleared in\n__bfq_bfqd_reset_in_service func. So we do not need to re-clear the\nwait_request of bfqq which is not in service.\n\nKASAN log is given as follows:\n[13058.354613] ==================================================================\n[13058.354640] BUG: KASAN: use-after-free in bfq_idle_slice_timer+0xac/0x290\n[13058.354644] Read of size 8 at addr ffffa02cf3e63f78 by task fork","insertions":12,"deletions":4,"filepaths":{"block/bfq-iosched.c":{"insertions":12,"deletions":4}}},"aee69d78dec0ffdf82e35d57c626e80dddc314d5":{"author":"Paolo Valente","email":"paolo.valente@linaro.org","date":"2017-04-19 14:29:02 UTC","message":"block, bfq: introduce the BFQ-v0 I/O scheduler as an extra scheduler\n\nWe tag as v0 the version of BFQ containing only BFQ's engine plus\nhierarchical support. BFQ's engine is introduced by this commit, while\nhierarchical support is added by next commit. We use the v0 tag to\ndistinguish this minimal version of BFQ from the versions containing\nalso the features and the improvements added by next commits. BFQ-v0\ncoincides with the version of BFQ submitted a few years ago [1], apart\nfrom the introduction of preemption, described below.\n\nBFQ is a proportional-share I/O scheduler, whose general structure,\nplus a lot of code, are borrowed from CFQ.\n\n- Each process doing I/O on a device is associated with a weight and a\n  (bfq_)queue.\n\n- BFQ grants exclusive access to the device, for a while, to one queue\n  (process) at a time, and implements this service model by\n  associating every queue with a budget, measured in number of\n  sectors.\n\n  - After a queue is granted access to the device, the bud","insertions":4697,"deletions":0,"filepaths":{"Documentation/block/00-INDEX":{"insertions":2,"deletions":0},"Documentation/block/bfq-iosched.txt":{"insertions":517,"deletions":0},"block/Kconfig.iosched":{"insertions":11,"deletions":0},"block/Makefile":{"insertions":1,"deletions":0},"block/bfq-iosched.c":{"insertions":4166,"deletions":0}}},"d80b64ff297e40c2b6f7d7abc1b3eba70d22a068":{"author":"Miaohe Lin","email":"linmiaohe@huawei.com","date":"2020-01-04 08:56:49 UTC","message":"KVM: SVM: Fix potential memory leak in svm_cpu_init()\n\nWhen kmalloc memory for sd->sev_vmcbs failed, we forget to free the page\nheld by sd->save_area. Also get rid of the var r as '-ENOMEM' is actually\nthe only possible outcome here.\n\nReviewed-by: Liran Alon <liran.alon@oracle.com>\nReviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>\nSigned-off-by: Miaohe Lin <linmiaohe@huawei.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":6,"deletions":7,"filepaths":{"arch/x86/kvm/svm.c":{"insertions":6,"deletions":7}}},"6aa8b732ca01c3d7a54e93f4d701b8aabbe60fb7":{"author":"Avi Kivity","email":"avi@qumranet.com","date":"2006-12-10 10:21:36 UTC","message":"[PATCH] kvm: userspace interface\n\nweb site: http://kvm.sourceforge.net\n\nmailing list: kvm-devel@lists.sourceforge.net\n  (http://lists.sourceforge.net/lists/listinfo/kvm-devel)\n\nThe following patchset adds a driver for Intel's hardware virtualization\nextensions to the x86 architecture.  The driver adds a character device\n(/dev/kvm) that exposes the virtualization capabilities to userspace.  Using\nthis driver, a process can run a virtual machine (a \"guest\") in a fully\nvirtualized PC containing its own virtual hard disks, network adapters, and\ndisplay.\n\nUsing this driver, one can start multiple virtual machines on a host.\n\nEach virtual machine is a process on the host; a virtual cpu is a thread in\nthat process.  kill(1), nice(1), top(1) work as expected.  In effect, the\ndriver adds a third execution mode to the existing two: we now have kernel\nmode, user mode, and guest mode.  Guest mode has its own address space mapping\nguest physical memory (which is accessible to user mode by mmap()ing\n","insertions":9814,"deletions":0,"filepaths":{"drivers/Kconfig":{"insertions":2,"deletions":0},"drivers/Makefile":{"insertions":1,"deletions":0},"drivers/kvm/Kconfig":{"insertions":33,"deletions":0},"drivers/kvm/Makefile":{"insertions":10,"deletions":0},"drivers/kvm/kvm.h":{"insertions":551,"deletions":0},"drivers/kvm/kvm_main.c":{"insertions":1935,"deletions":0},"drivers/kvm/kvm_svm.h":{"insertions":44,"deletions":0},"drivers/kvm/kvm_vmx.h":{"insertions":14,"deletions":0},"drivers/kvm/mmu.c":{"insertions":699,"deletions":0},"drivers/kvm/paging_tmpl.h":{"insertions":397,"deletions":0},"drivers/kvm/segment_descriptor.h":{"insertions":17,"deletions":0},"drivers/kvm/svm.c":{"insertions":1677,"deletions":0},"drivers/kvm/svm.h":{"insertions":315,"deletions":0},"drivers/kvm/vmx.c":{"insertions":2002,"deletions":0},"drivers/kvm/vmx.h":{"insertions":296,"deletions":0},"drivers/kvm/x86_emulate.c":{"insertions":1409,"deletions":0},"drivers/kvm/x86_emulate.h":{"insertions":185,"deletions":0},"include/linux/kvm.h":{"insertions":227,"deletions":0}}},"70cd94e60c733e3afc18b0e6aab789c13b5571da":{"author":"Brijesh Singh","email":"brijesh.singh@amd.com","date":"2017-12-04 16:57:34 UTC","message":"KVM: SVM: VMRUN should use associated ASID when SEV is enabled\n\nSEV hardware uses ASIDs to associate a memory encryption key with a\nguest VM. During guest creation, a SEV VM uses the SEV_CMD_ACTIVATE\ncommand to bind a particular ASID to the guest. Lets make sure that the\nVMCB is programmed with the bound ASID before a VMRUN.\n\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Ingo Molnar <mingo@redhat.com>\nCc: \"H. Peter Anvin\" <hpa@zytor.com>\nCc: Paolo Bonzini <pbonzini@redhat.com>\nCc: \"Radim Krčmář\" <rkrcmar@redhat.com>\nCc: Joerg Roedel <joro@8bytes.org>\nCc: Borislav Petkov <bp@suse.de>\nCc: Tom Lendacky <thomas.lendacky@amd.com>\nCc: x86@kernel.org\nCc: kvm@vger.kernel.org\nCc: linux-kernel@vger.kernel.org\nSigned-off-by: Brijesh Singh <brijesh.singh@amd.com>\nReviewed-by: Borislav Petkov <bp@suse.de>","insertions":56,"deletions":2,"filepaths":{"arch/x86/kvm/svm.c":{"insertions":56,"deletions":2}}},"19b61392c5a852b4e8a0bf35aecb969983c5932d":{"author":"wuxu.wu","email":"wuxu.wu@huawei.com","date":"2020-01-01 03:39:41 UTC","message":" iQFHBAABCgAxFiEEreZoqmdXGLWf4p/qJNaLcl1Uh9AFAl4OkfwTHGJyb29uaWVA\n a2VybmVsLm9yZwAKCRAk1otyXVSH0Js0B/4q/qnM6hnfF8VLglRbigJfYNyx1GEx\n nOLBW2Jx0lh3EltVug8jUDTtSwrZS7EDfGYgI011r2AaE5/kIiPi8qees+U+Pkp0\n Alp89aVB/kyG+36cmUfRA28Sp4T/uzQrJ6TN3Avw/4zKSwT54XU1uj3NzNxBuxKv\n E8ETqyoMGRbtE4vSDMPiR/aOekir0qP2lLBD0mjec5Onxb3un2+597yet8DWI3Nc\n leRJRm7pI8l+eWdMY8y/pGyONcT1wryEPMANvduxeIYQ4Z/No61evwmUXIGbm4K3\n 0VcJ2U2UoTNqyJFzCXgFCA+c7NcduIZ9m6iQFTiXTQZir/DPMfdC9J39\n =85/x\n -----END PGP SIGNATURE-----\n\nspi: spi-dw: Add lock protect dw_spi rx/tx to prevent concurrent calls\n\ndw_spi_irq() and dw_spi_transfer_one concurrent calls.\n\nI find a panic in dw_writer(): txw = *(u8 *)(dws->tx), when dw->tx==null,\ndw->len==4, and dw->tx_end==1.\n\nWhen tpm driver's message overtime dw_spi_irq() and dw_spi_transfer_one\nmay concurrent visit dw_spi, so I think dw_spi structure lack of protection.\n\nOtherwise dw_spi_transfer_one set dw rx/tx buffer and then open irq,\nstore dw rx/tx instructions and other cores handle irq lo","insertions":13,"deletions":3,"filepaths":{"drivers/spi/spi-dw.c":{"insertions":12,"deletions":3},"drivers/spi/spi-dw.h":{"insertions":1,"deletions":0}}},"e24c745272072fd2abe55209f1949b7b7ee602a7":{"author":"Feng Tang","email":"feng.tang@intel.com","date":"2009-12-14 22:20:22 UTC","message":"spi: controller driver for Designware SPI core\n\nDriver for the Designware SPI core, it supports multipul interfaces like\nPCI/APB etc.  User can use \"dw_apb_ssi_db.pdf\" from Synopsys as HW\ndatasheet.\n\n[randy.dunlap@oracle.com: fix build]\n[akpm@linux-foundation.org: build fix]\nSigned-off-by: Feng Tang <feng.tang@intel.com>\nCc: David Brownell <david-b@pacbell.net>\nSigned-off-by: Randy Dunlap <randy.dunlap@oracle.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Grant Likely <grant.likely@secretlab.ca>","insertions":1337,"deletions":0,"filepaths":{"drivers/spi/Kconfig":{"insertions":10,"deletions":0},"drivers/spi/Makefile":{"insertions":2,"deletions":0},"drivers/spi/dw_spi.c":{"insertions":944,"deletions":0},"drivers/spi/dw_spi_pci.c":{"insertions":169,"deletions":0},"include/linux/spi/dw_spi.h":{"insertions":212,"deletions":0}}},"de6efe0a966cf86b3c4039a610b2d4157db707f2":{"author":"Feng Tang","email":"feng.tang@intel.com","date":"2011-03-30 15:09:52 UTC","message":"spi/dw_spi: unify the low level read/write routines\n\nThe original version has many duplicated codes for null/u8/u16 case,\nso unify them to make it cleaner\n\nSigned-off-by: Feng Tang <feng.tang@intel.com>\nSigned-off-by: Grant Likely <grant.likely@secretlab.ca>","insertions":26,"deletions":79,"filepaths":{"drivers/spi/dw_spi.c":{"insertions":26,"deletions":77},"drivers/spi/dw_spi.h":{"insertions":0,"deletions":2}}},"2ff271bf6505038d8c937e73438ea3c80c387439":{"author":"Alek Du","email":"alek.du@intel.com","date":"2011-03-30 15:09:54 UTC","message":"spi/dw_spi: change poll mode transfer from byte ops to batch ops\n\nCurrent poll transfer will read/write one word, then wait till the\nhw is non-busy, it's not efficient. This patch will try to read/write\nas many words as permitted by hardware FIFO depth.\n\nSigned-off-by: Alek Du <alek.du@intel.com>\nSigned-off-by: Feng Tang <feng.tang@intel.com>\nSigned-off-by: Grant Likely <grant.likely@secretlab.ca>","insertions":48,"deletions":23,"filepaths":{"drivers/spi/dw_spi.c":{"insertions":48,"deletions":23}}},"c4fe57f76269dbb2af135071513f260ca40229a3":{"author":"Michael van der Westhuizen","email":"michael@smart-africa.com","date":"2015-08-18 20:21:53 UTC","message":"spi: dw: Allow interface drivers to limit data I/O to word sizes\n\nThe commit dd11444327ce (\"spi: dw-spi: Convert 16bit accesses to 32bit\naccesses\") changed all 16bit accesses in the DW_apb_ssi driver to 32bit.\nThis, unfortunately, breaks data register access on picoXcell, where the\nDW IP needs data register accesses to be word accesses (all other\naccesses appear to be OK).\n\nThis change introduces a new master variable to allow interface drivers\nto specify that 16bit data transfer I/O is required.  This change also\nintroduces the ability to set this variable via device tree bindings in\nthe MMIO interface driver.  Both the core and the MMIO interface driver\ndefault to the current 32bit behaviour.\n\nBefore this change, on a picoXcell pc3x3:\n spi_master spi32766: interrupt_transfer: fifo overrun/underrun\n m25p80 spi32766.0: error -5 reading 9f\n m25p80: probe of spi32766.0 failed with error -5\n\nAfter this change:\n m25p80 spi32766.0: m25p40 (512 Kbytes)\n\nFixes: dd11444327ce (\"spi: dw-spi: Conv","insertions":40,"deletions":2,"filepaths":{"drivers/spi/spi-dw-mmio.c":{"insertions":3,"deletions":0},"drivers/spi/spi-dw.c":{"insertions":2,"deletions":2},"drivers/spi/spi-dw.h":{"insertions":35,"deletions":0}}},"c22c62db3f7388422257918c9d2582ef20d2e12d":{"author":"Andy Shevchenko","email":"andriy.shevchenko@linux.intel.com","date":"2015-03-02 12:58:57 UTC","message":"spi: dw: move to SPI core message handling\n\nThis patch removes a lot of duplicate code since SPI core provides a nice\nmessage handling.\n\nSigned-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>","insertions":49,"deletions":164,"filepaths":{"drivers/spi/spi-dw-mid.c":{"insertions":2,"deletions":2},"drivers/spi/spi-dw.c":{"insertions":47,"deletions":136},"drivers/spi/spi-dw.h":{"insertions":0,"deletions":26}}},"0b2e8915ead06b21d8f2360bfc28e747c4c0df8c":{"author":"Andy Shevchenko","email":"andriy.shevchenko@linux.intel.com","date":"2015-03-02 12:58:56 UTC","message":"spi: dw: program registers as soon as possible\n\nThis patch refactors the code in pump_transfers() to reprogram the registers\nimmediately when we have a new configuration data. The behaviour is slightly\nmodified:\n - chip is always disabled and reenabled\n - CTRL0 is always reprogrammed\n\nThis change allows to do a further refactoring and simplier conversion to use\nSPI core DMA routines in the future.\n\nSigned-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>","insertions":15,"deletions":23,"filepaths":{"drivers/spi/spi-dw.c":{"insertions":15,"deletions":23}}},"66b19d762378785d1568b5650935205edfeb0503":{"author":"Alexandre Belloni","email":"alexandre.belloni@bootlin.com","date":"2018-07-17 14:23:10 UTC","message":" iQFHBAABCgAxFiEEreZoqmdXGLWf4p/qJNaLcl1Uh9AFAltPMNgTHGJyb29uaWVA\n a2VybmVsLm9yZwAKCRAk1otyXVSH0EbIB/9/GqX1uauuSqrAkgRBc6lwdcQShbz1\n Y7d1XiFvph9XDJgVbrkwYvOCpyjqJp9ZiqzYE8JjMvdXSKoFDNJz+xPtvZvhjnsa\n r+UgnxJwXNNrZ+7PUBo3qvV71tTY3BdijdBdP4zIoNk+G0bEFvG9Cmz8BSmrgzFu\n yNAVVjWi2ZCEFMwE2pt3nh6O/TTZKZNQlHBo44iY5icX83hnEReSae+srZHaDNxe\n YZcWUjWjF1KZo0Z8NIp2hNskayk0fyuD359v5FDz/tT/Ffo4FrD1B2bZNBFXwe0w\n UBJauNRzy0j1xukFvSbdsNl4Y+E4D+UsO8xKpoyYdW/7VZoNy90vG6Jg\n =N3WI\n -----END PGP SIGNATURE-----\n\nspi: dw: fix possible race condition\n\nIt is possible to get an interrupt as soon as it is requested.  dw_spi_irq\ndoes spi_controller_get_devdata(master) and expects it to be different than\nNULL. However, spi_controller_set_devdata() is called after request_irq(),\nresulting in the following crash:\n\nCPU 0 Unable to handle kernel paging request at virtual address 00000030, epc == 8058e09c, ra == 8018ff90\n[...]\nCall Trace:\n[<8058e09c>] dw_spi_irq+0x8/0x64\n[<8018ff90>] __handle_irq_event_percpu+0x70/0x1d4\n[<80","insertions":2,"deletions":1,"filepaths":{"drivers/spi/spi-dw.c":{"insertions":2,"deletions":1}}},"3b8a4dd3ebfcc647260ad5c39ef4f73eb3a6b155":{"author":"Alek Du","email":"alek.du@intel.com","date":"2011-03-30 15:09:55 UTC","message":"spi/dw_spi: improve the interrupt mode with the batch ops\n\nleverage the performance gain by change in low level\nread/write batch operations\n\nSigned-off-by: Alek Du <alek.du@intel.com>\nSigned-off-by: Feng Tang <feng.tang@intel.com>\nSigned-off-by: Grant Likely <grant.likely@secretlab.ca>","insertions":16,"deletions":47,"filepaths":{"drivers/spi/dw_spi.c":{"insertions":16,"deletions":47}}},"721483e28889431426a15fe906f48aacd17f0999":{"author":"Jarkko Nikula","email":"jarkko.nikula@linux.intel.com","date":"2018-02-01 15:17:29 UTC","message":" iQFHBAABCgAxFiEEreZoqmdXGLWf4p/qJNaLcl1Uh9AFAlqBgsATHGJyb29uaWVA\n a2VybmVsLm9yZwAKCRAk1otyXVSH0EsmB/4z9Nh7n13XRAo0baF55WP5KSk6eR/y\n o5+4QouVH2409W3CB1jOQknemHav8nDNOe6d9ROJE3XeH5KsMDhOO7DKEJ2KmNam\n hnpY/4O+KF/8uRMOEF/n+8SEfF2VuT7C3YKhfeFrU7HfG2otF8aMaMjFWzhEMOD8\n cms5mlZ2VoGOujRMmkQc7dmH3goOBai0YLqn49qOA7hGkndF92cyAGSMHfpEtkR6\n yKTa0Eawp6MWNzzHzPNupaHL6uxwzj8ZNNhp1TDgEuL++3EmUNzcikt6jnFJs2un\n pl4ljgr50AR/8E8rs6jTGvwxB0rVey2zD2mQbE5YrkJsdUvaRn9zlHE8\n =hYd5\n -----END PGP SIGNATURE-----\n\nspi: dw: Convert to generalized SPI controller API\n\nConvert to generalized SPI controller API introduced by the\ncommit 8caab75fd2c2 (\"spi: Generalize SPI \"master\" to \"controller\"\").\nInside driver variable name \"master\" is still used to indicate the driver\nis master only.\n\nSigned-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>","insertions":18,"deletions":18,"filepaths":{"drivers/spi/spi-dw-mid.c":{"insertions":3,"deletions":3},"drivers/spi/spi-dw.c":{"insertions":13,"deletions":13},"drivers/spi/spi-dw.h":{"insertions":2,"deletions":2}}},"ea11370fffdfedbd0cca0fce17907d2c993246bc":{"author":"Andy Shevchenko","email":"andriy.shevchenko@linux.intel.com","date":"2015-02-24 11:32:11 UTC","message":"spi: dw: get TX level without an additional variable\n\nThere is no need to have an additional variable to get a TX level. The patch\nrefactors this piece of code.\n\nSigned-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>","insertions":4,"deletions":7,"filepaths":{"drivers/spi/spi-dw.c":{"insertions":4,"deletions":7}}},"4adb1f8f880081ee9921ebd399786387e0cd6f52":{"author":"Andy Shevchenko","email":"andriy.shevchenko@linux.intel.com","date":"2015-10-14 20:12:18 UTC","message":"spi: dw: remove unneeded cr0 member of struct chip_data\n\nSince we recalculate cr0 each time we start a transfer the chip_data->cr0\nbecomes redundant. Remove it and related pieces.\n\nThis is a follow up to commit 0ed36990a93b (spi: dw: Remove needless if\nstatements).\n\nSigned-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>","insertions":2,"deletions":12,"filepaths":{"drivers/spi/spi-dw.c":{"insertions":2,"deletions":12}}},"9f14538ecd1a210eff244a0a2281f6744fe4a59d":{"author":"Andy Shevchenko","email":"andriy.shevchenko@linux.intel.com","date":"2015-03-09 14:48:46 UTC","message":"spi: dw-mid: split dma_setup() from dma_transfer()\n\nThe patch splits DMA preparatory code to dma_setup() callback. The change also\nconverts transfer_one() to program DMA whenever the transfer is DMA mapped. The\nchange is a follow up of the converion to use SPI core transfer_one_message().\nSince the DMA mapped transfers can be interleaved with PIO ones the DMA related\nconfiguration should respect that.\n\nSigned-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>","insertions":21,"deletions":23,"filepaths":{"drivers/spi/spi-dw-mid.c":{"insertions":6,"deletions":11},"drivers/spi/spi-dw.c":{"insertions":13,"deletions":10},"drivers/spi/spi-dw.h":{"insertions":2,"deletions":2}}},"f89a6d8f43ebe9508bb5492c846ad997ad50eafe":{"author":"Andy Shevchenko","email":"andriy.shevchenko@linux.intel.com","date":"2015-03-09 14:48:49 UTC","message":"spi: dw-mid: move to use core SPI DMA mappings\n\nSPI core has a comprehensive function set to map and unmap a message when it's\nneeded. This patch converts driver to use that advantage.\n\nSigned-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>","insertions":43,"deletions":66,"filepaths":{"drivers/spi/spi-dw-mid.c":{"insertions":30,"deletions":22},"drivers/spi/spi-dw.c":{"insertions":7,"deletions":33},"drivers/spi/spi-dw.h":{"insertions":6,"deletions":11}}},"d7ef54ca1219ddf99d56a0f7cf40912ab4c4bb0b":{"author":"Andy Shevchenko","email":"andriy.shevchenko@linux.intel.com","date":"2015-10-27 15:48:16 UTC","message":"spi: dw: replace magic constant by DW_SPI_DR\n\nThe offset 0x60 is the offset of the data register defined as DW_SPI_DR in the\nheader file. Use it.\n\nSigned-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>","insertions":1,"deletions":1,"filepaths":{"drivers/spi/spi-dw.c":{"insertions":1,"deletions":1}}},"83c6f2390040f188cc25b270b4befeb5628c1aee":{"author":"Wu Bo","email":"wubo40@huawei.com","date":"2020-04-14 02:13:28 UTC","message":"scsi: sg: add sg_remove_request in sg_write\n\nIf the __copy_from_user function failed we need to call sg_remove_request\nin sg_write.\n\nLink: https://lore.kernel.org/r/610618d9-e983-fd56-ed0f-639428343af7@huawei.com\nAcked-by: Douglas Gilbert <dgilbert@interlog.com>\nSigned-off-by: Wu Bo <wubo40@huawei.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>","insertions":3,"deletions":1,"filepaths":{"drivers/scsi/sg.c":{"insertions":3,"deletions":1}}},"a64e5a868573d6fe3b76e8d17538b10499239631":{"author":"Al Viro","email":"viro@zeniv.linux.org.uk","date":"2019-10-17 19:39:24 UTC","message":"scsi: sg: sg_write(): get rid of access_ok()/__copy_from_user()/__get_user()\n\nJust use plain copy_from_user() and get_user().  Note that while a\nbuf-derived pointer gets stored into ->dxferp, all places that actually use\nthe resulting value feed it either to import_iovec() or to\nimport_single_range(), and both will do validation.\n\nLink: https://lore.kernel.org/r/20191017193925.25539-7-viro@ZenIV.linux.org.uk\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>\nAcked-by: Douglas Gilbert <dgilbert@interlog.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>","insertions":3,"deletions":5,"filepaths":{"drivers/scsi/sg.c":{"insertions":3,"deletions":5}}},"7395ea4e65c2a00d23185a3f63ad315756ba9cef":{},"dad0bf9ce93fa40b667eccd3306783f4db4b932b":{},"b86dab054059b970111b5516ae548efaae5b3aae":{"author":"Dmitry Torokhov","email":"dmitry.torokhov@gmail.com","date":"2020-05-25 23:27:40 UTC","message":"vt: keyboard: avoid signed integer overflow in k_ascii\n\nWhen k_ascii is invoked several times in a row there is a potential for\nsigned integer overflow:\n\nUBSAN: Undefined behaviour in drivers/tty/vt/keyboard.c:888:19 signed integer overflow:\n10 * 1111111111 cannot be represented in type 'int'\nCPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.6.11 #1\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011\nCall Trace:\n <IRQ>\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0xce/0x128 lib/dump_stack.c:118\n ubsan_epilogue+0xe/0x30 lib/ubsan.c:154\n handle_overflow+0xdc/0xf0 lib/ubsan.c:184\n __ubsan_handle_mul_overflow+0x2a/0x40 lib/ubsan.c:205\n k_ascii+0xbf/0xd0 drivers/tty/vt/keyboard.c:888\n kbd_keycode drivers/tty/vt/keyboard.c:1477 [inline]\n kbd_event+0x888/0x3be0 drivers/tty/vt/keyboard.c:1495\n\nWhile it can be worked around by using check_mul_overflow()/\ncheck_add_overflow(), it is better to introduce a separate flag to\nsignal that number pad is being used to compose","insertions":16,"deletions":10,"filepaths":{"drivers/tty/vt/keyboard.c":{"insertions":16,"deletions":10}}},"759448f459234bfcf34b82471f0dba77a9aca498":{"author":"Jan Engelhardt","email":"jengelh@linux01.gwdg.de","date":"2007-07-16 06:40:40 UTC","message":"Kernel utf-8 handling\n\nThis patch fixes dead keys and copy/paste of non-ASCII characters in UTF-8\nmode on Linux console.  See more details about the original patch at:\nhttp://chris.heathens.co.nz/linux/utf8.html\n\nAlready posted on\n\t(Oldest) http://lkml.org/lkml/2003/5/31/148\n\t         http://lkml.org/lkml/2005/12/24/69\n\t(Recent) http://lkml.org/lkml/2006/8/7/75\n\n[bunk@stusta.de: make drivers/char/selection.c:store_utf8() static]\nSigned-off-by: Jan Engelhardt <jengelh@gmx.de>\nCc: Alexander E. Patrakov <patrakov@ums.usu.ru>\nCc: Dmitry Torokhov <dtor@mail.ru>\nCc: \"Antonino A. Daplas\" <adaplas@pol.net>\nSigned-off-by: Adrian Bunk <bunk@stusta.de>\nCc: David Woodhouse <dwmw2@infradead.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":134,"deletions":23,"filepaths":{"drivers/char/consolemap.c":{"insertions":72,"deletions":6},"drivers/char/keyboard.c":{"insertions":18,"deletions":8},"drivers/char/selection.c":{"insertions":40,"deletions":8},"include/linux/consolemap.h":{"insertions":4,"deletions":1}}},"8019ad13ef7f64be44d4f892af9c840179009254":{"author":"Peter Zijlstra","email":"peterz@infradead.org","date":"2020-03-04 10:28:31 UTC","message":"futex: Fix inode life-time issue\n\nAs reported by Jann, ihold() does not in fact guarantee inode\npersistence. And instead of making it so, replace the usage of inode\npointers with a per boot, machine wide, unique inode identifier.\n\nThis sequence number is global, but shared (file backed) futexes are\nrare enough that this should not become a performance issue.\n\nReported-by: Jann Horn <jannh@google.com>\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>","insertions":65,"deletions":43,"filepaths":{"fs/inode.c":{"insertions":1,"deletions":0},"include/linux/fs.h":{"insertions":1,"deletions":0},"include/linux/futex.h":{"insertions":10,"deletions":7},"kernel/futex.c":{"insertions":53,"deletions":36}}},"bd9b51e79cb0b8bc00a7e0076a4a8963ca4a797c":{"author":"Al Viro","email":"viro@zeniv.linux.org.uk","date":"2014-11-19 04:38:21 UTC","message":"make default ->i_fop have ->open() fail with ENXIO\n\nAs it is, default ->i_fop has NULL ->open() (along with all other methods).\nThe only case where it matters is reopening (via procfs symlink) a file that\ndidn't get its ->f_op from ->i_fop - anything else will have ->i_fop assigned\nto something sane (default would fail on read/write/ioctl/etc.).\n\n\tUnfortunately, such case exists - alloc_file() users, especially\nanon_get_file() ones.  There we have tons of opened files of very different\nkinds sharing the same inode.  As the result, attempt to reopen those via\nprocfs succeeds and you get a descriptor you can't do anything with.\n\n\tMoreover, in case of sockets we set ->i_fop that will only be used\non such reopen attempts - and put a failing ->open() into it to make sure\nthose do not succeed.\n\n\tIt would be simpler to put such ->open() into default ->i_fop and leave\nit unchanged both for anon inode (as we do anyway) and for socket ones.  Result:\n\t* everything going through do_dentry_open() wo","insertions":8,"deletions":61,"filepaths":{"arch/ia64/kernel/perfmon.c":{"insertions":0,"deletions":10},"fs/inode.c":{"insertions":8,"deletions":3},"include/linux/fs.h":{"insertions":0,"deletions":1},"net/Makefile":{"insertions":0,"deletions":2},"net/nonet.c":{"insertions":0,"deletions":26},"net/socket.c":{"insertions":0,"deletions":19}}},"fa0d7e3de6d6fc5004ad9dea0dd6b286af8f03e9":{"author":"Nick Piggin","email":"npiggin@kernel.dk","date":"2011-01-07 06:49:49 UTC","message":"fs: icache RCU free inodes\n\nRCU free the struct inode. This will allow:\n\n- Subsequent store-free path walking patch. The inode must be consulted for\n  permissions when walking, so an RCU inode reference is a must.\n- sb_inode_list_lock to be moved inside i_lock because sb list walkers who want\n  to take i_lock no longer need to take sb_inode_list_lock to walk the list in\n  the first place. This will simplify and optimize locking.\n- Could remove some nested trylock loops in dcache code\n- Could potentially simplify things a bit in VM land. Do not need to take the\n  page lock to follow page->mapping.\n\nThe downsides of this is the performance cost of using RCU. In a simple\ncreat/unlink microbenchmark, performance drops by about 10% due to inability to\nreuse cache-hot slab objects. As iterations increase and RCU freeing starts\nkicking over, this increases to about 20%.\n\nIn cases where inode lifetimes are longer (ie. many inodes may be allocated\nduring the average life span of a single inode),","insertions":490,"deletions":68,"filepaths":{"Documentation/filesystems/porting":{"insertions":14,"deletions":0},"arch/powerpc/platforms/cell/spufs/inode.c":{"insertions":8,"deletions":2},"drivers/staging/pohmelfs/inode.c":{"insertions":8,"deletions":1},"drivers/staging/smbfs/inode.c":{"insertions":8,"deletions":1},"fs/9p/vfs_inode.c":{"insertions":8,"deletions":1},"fs/adfs/super.c":{"insertions":8,"deletions":1},"fs/affs/super.c":{"insertions":8,"deletions":1},"fs/afs/super.c":{"insertions":9,"deletions":1},"fs/befs/linuxvfs.c":{"insertions":8,"deletions":2},"fs/bfs/inode.c":{"insertions":8,"deletions":1},"fs/block_dev.c":{"insertions":8,"deletions":1},"fs/btrfs/inode.c":{"insertions":8,"deletions":1},"fs/ceph/inode.c":{"insertions":10,"deletions":1},"fs/cifs/cifsfs.c":{"insertions":8,"deletions":1},"fs/coda/inode.c":{"insertions":8,"deletions":1},"fs/ecryptfs/super.c":{"insertions":11,"deletions":1},"fs/efs/super.c":{"insertions":8,"deletions":1},"fs/exofs/super.c":{"insertions":8,"deletions":1},"fs/ext2/super.c":{"insertions":8,"deletions":1},"fs/ext3/super.c":{"insertions":8,"deletions":1},"fs/ext4/super.c":{"insertions":8,"deletions":1},"fs/fat/inode.c":{"insertions":8,"deletions":1},"fs/freevxfs/vxfs_inode.c":{"insertions":8,"deletions":1},"fs/fuse/inode.c":{"insertions":8,"deletions":1},"fs/gfs2/super.c":{"insertions":8,"deletions":1},"fs/hfs/super.c":{"insertions":8,"deletions":1},"fs/hfsplus/super.c":{"insertions":9,"deletions":1},"fs/hostfs/hostfs_kern.c":{"insertions":8,"deletions":1},"fs/hpfs/super.c":{"insertions":8,"deletions":1},"fs/hppfs/hppfs.c":{"insertions":8,"deletions":1},"fs/hugetlbfs/inode.c":{"insertions":8,"deletions":1},"fs/inode.c":{"insertions":9,"deletions":1},"fs/isofs/inode.c":{"insertions":8,"deletions":1},"fs/jffs2/super.c":{"insertions":8,"deletions":1},"fs/jfs/super.c":{"insertions":9,"deletions":1},"fs/logfs/inode.c":{"insertions":8,"deletions":1},"fs/minix/inode.c":{"insertions":8,"deletions":1},"fs/ncpfs/inode.c":{"insertions":8,"deletions":1},"fs/nfs/inode.c":{"insertions":8,"deletions":1},"fs/nilfs2/super.c":{"insertions":9,"deletions":1},"fs/ntfs/inode.c":{"insertions":8,"deletions":1},"fs/ocfs2/dlmfs/dlmfs.c":{"insertions":8,"deletions":1},"fs/ocfs2/super.c":{"insertions":8,"deletions":1},"fs/openpromfs/inode.c":{"insertions":8,"deletions":1},"fs/proc/inode.c":{"insertions":8,"deletions":1},"fs/qnx4/inode.c":{"insertions":8,"deletions":1},"fs/reiserfs/super.c":{"insertions":8,"deletions":1},"fs/romfs/super.c":{"insertions":8,"deletions":1},"fs/squashfs/super.c":{"insertions":8,"deletions":1},"fs/sysv/inode.c":{"insertions":8,"deletions":1},"fs/ubifs/super.c":{"insertions":9,"deletions":1},"fs/udf/super.c":{"insertions":8,"deletions":1},"fs/ufs/super.c":{"insertions":8,"deletions":1},"fs/xfs/xfs_iget.c":{"insertions":12,"deletions":1},"include/linux/fs.h":{"insertions":4,"deletions":1},"include/linux/net.h":{"insertions":0,"deletions":1},"ipc/mqueue.c":{"insertions":8,"deletions":1},"mm/shmem.c":{"insertions":8,"deletions":1},"net/socket.c":{"insertions":8,"deletions":8},"net/sunrpc/rpc_pipe.c":{"insertions":9,"deletions":1}}},"f02a9ad1f15daf4378afeda025a53455f72645dd":{"author":"Jeff Layton","email":"jlayton@redhat.com","date":"2017-12-21 12:45:44 UTC","message":"fs: handle inode->i_version more efficiently\n\nSince i_version is mostly treated as an opaque value, we can exploit that\nfact to avoid incrementing it when no one is watching. With that change,\nwe can avoid incrementing the counter on writes, unless someone has\nqueried for it since it was last incremented. If the a/c/mtime don't\nchange, and the i_version hasn't changed, then there's no need to dirty\nthe inode metadata on a write.\n\nConvert the i_version counter to an atomic64_t, and use the lowest order\nbit to hold a flag that will tell whether anyone has queried the value\nsince it was last incremented.\n\nWhen we go to maybe increment it, we fetch the value and check the flag\nbit.  If it's clear then we don't need to do anything if the update\nisn't being forced.\n\nIf we do need to update, then we increment the counter by 2, and clear\nthe flag bit, and then use a CAS op to swap it into place. If that\nworks, we return true. If it doesn't then do it again with the value\nthat we fetch from the ","insertions":154,"deletions":56,"filepaths":{"include/linux/fs.h":{"insertions":1,"deletions":1},"include/linux/iversion.h":{"insertions":153,"deletions":55}}},"2f9d3df8aa1cc3c6db5cfa0bad3f0745e04cc27d":{"author":"Linus Torvalds","email":"torvalds@linux-foundation.org","date":"2012-06-03 21:50:19 UTC","message":"vfs: move inode stat information closer together\n\nThe comment above it says \"Stat data, not accessed from path walking\",\nbut in fact some of inode fields we use for the common stat data was way\ndown at the end of the inode, causing unnecessary cache misses for the\ncommon stat operations.\n\nThe inode structure is pretty big, and this can change padding depending\non field width, but at least on the common 64-bit configurations this\ndoesn't change the size.  Some of our inode layout has historically been\nto tro to avoid unnecessary padding fields, but cache locality is at\nleast as important for layout, if not more.\n\nNoticed by looking at kernel profiles, and noticing that the \"i_blkbits\"\naccess stood out like a sore thumb.\n\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":3,"deletions":3,"filepaths":{"include/linux/fs.h":{"insertions":3,"deletions":3}}},"bd5fe6c5eb9c548d7f07fe8f89a150bb6705e8e3":{"author":"Christoph Hellwig","email":"hch@infradead.org","date":"2011-06-24 18:29:43 UTC","message":"fs: kill i_alloc_sem\n\ni_alloc_sem is a rather special rw_semaphore.  It's the last one that may\nbe released by a non-owner, and it's write side is always mirrored by\nreal exclusion.  It's intended use it to wait for all pending direct I/O\nrequests to finish before starting a truncate.\n\nReplace it with a hand-grown construct:\n\n - exclusion for truncates is already guaranteed by i_mutex, so it can\n   simply fall way\n - the reader side is replaced by an i_dio_count member in struct inode\n   that counts the number of pending direct I/O requests.  Truncate can't\n   proceed as long as it's non-zero\n - when i_dio_count reaches non-zero we wake up a pending truncate using\n   wake_up_bit on a new bit in i_flags\n - new references to i_dio_count can't appear while we are waiting for\n   it to read zero because the direct I/O count always needs i_mutex\n   (or an equivalent like XFS's i_iolock) for starting a new operation.\n\nThis scheme is much simpler, and saves the space of a spinlock_t and a\nstruc","insertions":78,"deletions":53,"filepaths":{"fs/attr.c":{"insertions":1,"deletions":4},"fs/direct-io.c":{"insertions":51,"deletions":14},"fs/inode.c":{"insertions":1,"deletions":2},"fs/ntfs/file.c":{"insertions":1,"deletions":2},"fs/ntfs/inode.c":{"insertions":2,"deletions":8},"fs/ocfs2/aops.c":{"insertions":3,"deletions":4},"fs/ocfs2/file.c":{"insertions":7,"deletions":8},"fs/reiserfs/xattr.c":{"insertions":1,"deletions":2},"include/linux/fs.h":{"insertions":9,"deletions":2},"mm/filemap.c":{"insertions":0,"deletions":3},"mm/madvise.c":{"insertions":1,"deletions":1},"mm/rmap.c":{"insertions":0,"deletions":1},"mm/truncate.c":{"insertions":1,"deletions":2}}},"6cdbb0effc2f511ced23e46f2117e4b31d3d4a50":{"author":"Theodore Ts'o","email":"tytso@mit.edu","date":"2011-10-29 12:24:18 UTC","message":"fs: optimize out 16 bytes worth of padding in struct inode\n\nRearrange the fields in struct inode so that on an x86_64 system,\nfields that require 8-byte alignment don't end up causing 4-byte holes\nin the structure.  It reduces the size of struct inode from 568 bytes\nto 552 bytes.\n\nAlso move the fields protected by i_lock (i_blocks, i_bytes, and\ni_size) into the same cache line as i_lock.\n\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>","insertions":5,"deletions":5,"filepaths":{"include/linux/fs.h":{"insertions":5,"deletions":5}}},"9adef58b1d4fbb58d7daed931b6790c5a3b7543a":{"author":"Rusty Russell","email":"rusty@rustcorp.com.au","date":"2007-05-08 07:26:42 UTC","message":"futex: get_futex_key, get_key_refs and drop_key_refs\n\nlguest uses the convenient futex infrastructure for inter-domain I/O, so\nexpose get_futex_key, get_key_refs (renamed get_futex_key_refs) and\ndrop_key_refs (renamed drop_futex_key_refs).  Also means we need to expose the\nunion that these use.\n\nNo code changes.\n\nSigned-off-by: Rusty Russell <rusty@rustcorp.com.au>\nCc: Andi Kleen <ak@suse.de>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":43,"deletions":36,"filepaths":{"include/linux/futex.h":{"insertions":29,"deletions":0},"kernel/futex.c":{"insertions":14,"deletions":36}}},"34f01cc1f512fa783302982776895c73714ebbc2":{"author":"Eric Dumazet","email":"dada1@cosmosbay.com","date":"2007-05-09 09:35:04 UTC","message":"FUTEX: new PRIVATE futexes\n\n  Analysis of current linux futex code :\n  --------------------------------------\n\nA central hash table futex_queues[] holds all contexts (futex_q) of waiting\nthreads.\n\nEach futex_wait()/futex_wait() has to obtain a spinlock on a hash slot to\nperform lookups or insert/deletion of a futex_q.\n\nWhen a futex_wait() is done, calling thread has to :\n\n1) - Obtain a read lock on mmap_sem to be able to validate the user pointer\n     (calling find_vma()). This validation tells us if the futex uses\n     an inode based store (mapped file), or mm based store (anonymous mem)\n\n2) - compute a hash key\n\n3) - Atomic increment of reference counter on an inode or a mm_struct\n\n4) - lock part of futex_queues[] hash table\n\n5) - perform the test on value of futex.\n\t(rollback is value != expected_value, returns EWOULDBLOCK)\n\t(various loops if test triggers mm faults)\n\n6) queue the context into hash table, release the lock got in 4)\n\n7) - release the read_lock on mmap_sem\n\n   <block>\n","insertions":236,"deletions":117,"filepaths":{"include/linux/futex.h":{"insertions":26,"deletions":3},"kernel/futex.c":{"insertions":210,"deletions":114}}},"38d47c1b7075bd7ec3881141bb3629da58f88dab":{"author":"Peter Zijlstra","email":"a.p.zijlstra@chello.nl","date":"2008-09-26 17:32:20 UTC","message":"futex: rely on get_user_pages() for shared futexes\n\nOn the way of getting rid of the mmap_sem requirement for shared futexes,\nstart by relying on get_user_pages().\n\nSigned-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>\nAcked-by: Nick Piggin <nickpiggin@yahoo.com.au>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>","insertions":82,"deletions":82,"filepaths":{"include/linux/futex.h":{"insertions":2,"deletions":0},"kernel/futex.c":{"insertions":80,"deletions":82}}},"65d8fc777f6dcfee12785c057a6b57f679641c90":{"author":"Mel Gorman","email":"mgorman@suse.de","date":"2016-02-09 19:15:14 UTC","message":"futex: Remove requirement for lock_page() in get_futex_key()\n\nWhen dealing with key handling for shared futexes, we can drastically reduce\nthe usage/need of the page lock. 1) For anonymous pages, the associated futex\nobject is the mm_struct which does not require the page lock. 2) For inode\nbased, keys, we can check under RCU read lock if the page mapping is still\nvalid and take reference to the inode. This just leaves one rare race that\nrequires the page lock in the slow path when examining the swapcache.\n\nAdditionally realtime users currently have a problem with the page lock being\ncontended for unbounded periods of time during futex operations.\n\nTask A\n     get_futex_key()\n     lock_page()\n    ---> preempted\n\nNow any other task trying to lock that page will have to wait until\ntask A gets scheduled back in, which is an unbound time.\n\nWith this patch, we pretty much have a lockless futex_get_key().\n\nExperiments show that this patch can boost/speedup the hashing of shared\nfutexes with t","insertions":91,"deletions":8,"filepaths":{"kernel/futex.c":{"insertions":91,"deletions":8}}},"5ca584d935c32906d114924dc0e1dbfcbb13fdb2":{"author":"Waiman Long","email":"longman@redhat.com","date":"2019-05-28 16:03:45 UTC","message":"futex: Consolidate duplicated timer setup code\n\nAdd a new futex_setup_timer() helper function to consolidate all the\nhrtimer_sleeper setup code.\n\nSigned-off-by: Waiman Long <longman@redhat.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Darren Hart <dvhart@infradead.org>\nCc: Davidlohr Bueso <dave@stgolabs.net>\nLink: https://lkml.kernel.org/r/20190528160345.24017-1-longman@redhat.com","insertions":39,"deletions":30,"filepaths":{"kernel/futex.c":{"insertions":39,"deletions":30}}},"48fb6f4db940e92cfb16cd878cddd59ea6120d06":{"author":"Mel Gorman","email":"mgorman@suse.de","date":"2017-08-09 07:27:11 UTC","message":"futex: Remove unnecessary warning from get_futex_key\n\nCommit 65d8fc777f6d (\"futex: Remove requirement for lock_page() in\nget_futex_key()\") removed an unnecessary lock_page() with the\nside-effect that page->mapping needed to be treated very carefully.\n\nTwo defensive warnings were added in case any assumption was missed and\nthe first warning assumed a correct application would not alter a\nmapping backing a futex key.  Since merging, it has not triggered for\nany unexpected case but Mark Rutland reported the following bug\ntriggering due to the first warning.\n\n  kernel BUG at kernel/futex.c:679!\n  Internal error: Oops - BUG: 0 [#1] PREEMPT SMP\n  Modules linked in:\n  CPU: 0 PID: 3695 Comm: syz-executor1 Not tainted 4.13.0-rc3-00020-g307fec773ba3 #3\n  Hardware name: linux,dummy-virt (DT)\n  task: ffff80001e271780 task.stack: ffff000010908000\n  PC is at get_futex_key+0x6a4/0xcf0 kernel/futex.c:679\n  LR is at get_futex_key+0x6a4/0xcf0 kernel/futex.c:679\n  pc : [<ffff00000821ac14>] lr : [<ffff0000","insertions":3,"deletions":2,"filepaths":{"kernel/futex.c":{"insertions":3,"deletions":2}}},"9ea71503a8ed9184d2d0b8ccc4d269d05f7940ae":{"author":"Shawn Bohrer","email":"sbohrer@rgmadvisors.com","date":"2011-06-30 16:21:32 UTC","message":"futex: Fix regression with read only mappings\n\ncommit 7485d0d3758e8e6491a5c9468114e74dc050785d (futexes: Remove rw\nparameter from get_futex_key()) in 2.6.33 fixed two problems:  First, It\nprevented a loop when encountering a ZERO_PAGE. Second, it fixed RW\nMAP_PRIVATE futex operations by forcing the COW to occur by\nunconditionally performing a write access get_user_pages_fast() to get\nthe page.  The commit also introduced a user-mode regression in that it\nbroke futex operations on read-only memory maps.  For example, this\nbreaks workloads that have one or more reader processes doing a\nFUTEX_WAIT on a futex within a read only shared file mapping, and a\nwriter processes that has a writable mapping issuing the FUTEX_WAKE.\n\nThis fixes the regression for valid futex operations on RO mappings by\ntrying a RO get_user_pages_fast() when the RW get_user_pages_fast()\nfails. This change makes it necessary to also check for invalid use\ncases, such as anonymous RO mappings (which can never change) and","insertions":42,"deletions":12,"filepaths":{"kernel/futex.c":{"insertions":42,"deletions":12}}},"8ad7b378d0d016309014cae0f640434bca7b5e11":{"author":"Davidlohr Bueso","email":"dave@stgolabs.net","date":"2016-02-09 19:15:13 UTC","message":"futex: Rename barrier references in ordering guarantees\n\nIngo suggested we rename how we reference barriers A and B\nregarding futex ordering guarantees. This patch replaces,\nfor both barriers, MB (A) with smp_mb(); (A), such that:\n\n - We explicitly state that the barriers are SMP, and\n\n - We standardize how we reference these across futex.c\n   helping readers follow what barrier does what and where.\n\nSuggested-by: Ingo Molnar <mingo@kernel.org>\nSigned-off-by: Davidlohr Bueso <dbueso@suse.de>\nReviewed-by: Thomas Gleixner <tglx@linutronix.de>\nCc: Chris Mason <clm@fb.com>\nCc: Darren Hart <dvhart@linux.intel.com>\nCc: Hugh Dickins <hughd@google.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Mel Gorman <mgorman@techsingularity.net>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>\nCc: dave@stgolabs.net\nLink: http://lkml.kernel.org/r/1455045314-8305-2-git-send-email-dave@stgolabs.net\nSigned-off-by: Ingo Molnar <mingo@kernel.org>","insertions":17,"deletions":17,"filepaths":{"kernel/futex.c":{"insertions":17,"deletions":17}}},"d96ee56ce0582967fba9f3f0ac4503957147bea6":{"author":"Darren Hart","email":"dvhltc@us.ibm.com","date":"2009-09-22 05:30:22 UTC","message":"futex: Make function kernel-doc commentary consistent\n\nMake the existing function kernel-doc consistent throughout\nfutex.c, following Documentation/kernel-doc-nano-howto.txt as\nclosely as possible.\n\nWhen unsure, at least be consistent within futex.c.\n\nSigned-off-by: Darren Hart <dvhltc@us.ibm.com>\nAcked-by: Peter Zijlstra <peterz@infradead.org>\nCc: Steven Rostedt <rostedt@goodmis.org>\nCc: Eric Dumazet <eric.dumazet@gmail.com>\nCc: Dinakar Guniguntala <dino@in.ibm.com>\nCc: John Stultz <johnstul@us.ibm.com>\nLKML-Reference: <20090922053022.8717.13339.stgit@Aeon>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>","insertions":21,"deletions":20,"filepaths":{"kernel/futex.c":{"insertions":21,"deletions":20}}},"6131ffaa1f091415b7a24abb01f033d9c0a727f4":{"author":"Al Viro","email":"viro@zeniv.linux.org.uk","date":"2013-02-27 21:59:05 UTC","message":"more file_inode() open-coded instances\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>","insertions":38,"deletions":45,"filepaths":{"arch/s390/hypfs/inode.c":{"insertions":2,"deletions":4},"arch/x86/kernel/msr.c":{"insertions":4,"deletions":5},"drivers/staging/comedi/comedi_fops.c":{"insertions":7,"deletions":7},"drivers/tty/tty_io.c":{"insertions":6,"deletions":10},"fs/ext4/indirect.c":{"insertions":1,"deletions":1},"fs/f2fs/file.c":{"insertions":3,"deletions":3},"fs/fuse/dev.c":{"insertions":1,"deletions":1},"fs/fuse/file.c":{"insertions":12,"deletions":12},"fs/seq_file.c":{"insertions":1,"deletions":1},"kernel/futex.c":{"insertions":1,"deletions":1}}},"077fa7aed17de5022e44bf07dbaf732078b7b5b2":{"author":"Mel Gorman","email":"mgorman@suse.de","date":"2016-06-08 13:25:22 UTC","message":"futex: Calculate the futex key based on a tail page for file-based futexes\n\nMike Galbraith reported that the LTP test case futex_wake04 was broken\nby commit 65d8fc777f6d (\"futex: Remove requirement for lock_page()\nin get_futex_key()\").\n\nThis test case uses futexes backed by hugetlbfs pages and so there is an\nassociated inode with a futex stored on such pages. The problem is that\nthe key is being calculated based on the head page index of the hugetlbfs\npage and not the tail page.\n\nPrior to the optimisation, the page lock was used to stabilise mappings and\npin the inode is file-backed which is overkill. If the page was a compound\npage, the head page was automatically looked up as part of the page lock\noperation but the tail page index was used to calculate the futex key.\n\nAfter the optimisation, the compound head is looked up early and the page\nlock is only relied upon to identify truncated pages, special pages or a\nshmem page moving to swapcache. The head page is looked up because withou","insertions":11,"deletions":3,"filepaths":{"kernel/futex.c":{"insertions":11,"deletions":3}}},"14d27abd1d12a64c89df1ce8c00ef1403226db5a":{"author":"Kirill A. Shutemov","email":"kirill.shutemov@linux.intel.com","date":"2016-01-16 00:53:00 UTC","message":"futex, thp: remove special case for THP in get_futex_key\n\nWith new THP refcounting, we don't need tricks to stabilize huge page.\nIf we've got reference to tail page, it can't split under us.\n\nThis patch effectively reverts a5b338f2b0b1 (\"thp: update futex compound\nknowledge\").\n\nSigned-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nTested-by: Sasha Levin <sasha.levin@oracle.com>\nTested-by: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>\nAcked-by: Jerome Marchand <jmarchan@redhat.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: Andrea Arcangeli <aarcange@redhat.com>\nCc: Hugh Dickins <hughd@google.com>\nCc: Dave Hansen <dave.hansen@intel.com>\nCc: Mel Gorman <mgorman@suse.de>\nCc: Rik van Riel <riel@redhat.com>\nCc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>\nCc: Steve Capper <steve.capper@linaro.org>\nCc: Johannes Weiner <hannes@cmpxchg.org>\nCc: Michal Hocko <mhocko@suse.cz>\nCc: Christoph Lameter <cl@linux.com>\nCc: David Rientjes <rientjes@google.com>\nTested-by: Artem Savkov <art","insertions":14,"deletions":49,"filepaths":{"kernel/futex.c":{"insertions":14,"deletions":49}}},"f4020438fab05364018c91f7e02ebdd192085933":{"author":"Eric Sandeen","email":"sandeen@redhat.com","date":"2020-08-26 21:11:58 UTC","message":"xfs: fix boundary test in xfs_attr_shortform_verify\n\nThe boundary test for the fixed-offset parts of xfs_attr_sf_entry in\nxfs_attr_shortform_verify is off by one, because the variable array\nat the end is defined as nameval[1] not nameval[].\nHence we need to subtract 1 from the calculation.\n\nThis can be shown by:\n\n# touch file\n# setfattr -n root.a file\n\nand verifications will fail when it's written to disk.\n\nThis only matters for a last attribute which has a single-byte name\nand no value, otherwise the combination of namelen & valuelen will\npush endp further out and this test won't fail.\n\nFixes: 1e1bbd8e7ee06 (\"xfs: create structure verifier function for shortform xattrs\")\nSigned-off-by: Eric Sandeen <sandeen@redhat.com>\nReviewed-by: Darrick J. Wong <darrick.wong@oracle.com>\nSigned-off-by: Darrick J. Wong <darrick.wong@oracle.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>","insertions":3,"deletions":1,"filepaths":{"fs/xfs/libxfs/xfs_attr_leaf.c":{"insertions":3,"deletions":1}}},"1e1bbd8e7ee0624034e9bf1e91ac11a7aaa2f8a6":{"author":"Darrick J. Wong","email":"darrick.wong@oracle.com","date":"2018-01-08 18:51:05 UTC","message":"xfs: create structure verifier function for shortform xattrs\n\nCreate a function to perform structure verification for short form\nextended attributes.\n\nSigned-off-by: Darrick J. Wong <darrick.wong@oracle.com>\nReviewed-by: Dave Chinner <dchinner@redhat.com>","insertions":75,"deletions":0,"filepaths":{"fs/xfs/libxfs/xfs_attr_leaf.c":{"insertions":74,"deletions":0},"fs/xfs/libxfs/xfs_attr_leaf.h":{"insertions":1,"deletions":0}}},"acf69c946233259ab4d64f8869d4037a198c7f06":{"author":"Or Cohen","email":"orcohen@paloaltonetworks.com","date":"2020-09-04 04:05:28 UTC","message":"net/packet: fix overflow in tpacket_rcv\n\nUsing tp_reserve to calculate netoff can overflow as\ntp_reserve is unsigned int and netoff is unsigned short.\n\nThis may lead to macoff receving a smaller value then\nsizeof(struct virtio_net_hdr), and if po->has_vnet_hdr\nis set, an out-of-bounds write will occur when\ncalling virtio_net_hdr_from_skb.\n\nThe bug is fixed by converting netoff to unsigned int\nand checking if it exceeds USHRT_MAX.\n\nThis addresses CVE-2020-14386\n\nFixes: 8913336a7e8d (\"packet: add PACKET_RESERVE sockopt\")\nSigned-off-by: Or Cohen <orcohen@paloaltonetworks.com>\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":6,"deletions":1,"filepaths":{"net/packet/af_packet.c":{"insertions":6,"deletions":1}}},"bbd6ef87c544d88c30e4b762b1b61ef267a7d279":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2008-07-15 05:50:15 UTC","message":"packet: support extensible, 64 bit clean mmaped ring structure\n\nThe tpacket_hdr is not 64 bit clean due to use of an unsigned long\nand can't be extended because the following struct sockaddr_ll needs\nto be at a fixed offset.\n\nAdd support for a version 2 tpacket protocol that removes these\nlimitations.\n\nUserspace can query the header size through a new getsockopt option\nand change the protocol version through a setsockopt option. The\nchanges needed to switch to the new protocol version are:\n\n1. replace struct tpacket_hdr by struct tpacket2_hdr\n2. query header len and save\n3. set protocol version to 2\n - set up ring as usual\n4. for getting the sockaddr_ll, use (void *)hdr + TPACKET_ALIGN(hdrlen)\n   instead of (void *)hdr + TPACKET_ALIGN(sizeof(struct tpacket_hdr))\n\nSteps 2 and 4 can be omitted if the struct sockaddr_ll isn't needed.\n\nSigned-off-by: Patrick McHardy <kaber@trash.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":167,"deletions":33,"filepaths":{"include/linux/if_packet.h":{"insertions":21,"deletions":0},"net/packet/af_packet.c":{"insertions":146,"deletions":33}}},"edbd58be15a957f6a760c4a514cd475217eb97fd":{"author":"Benjamin Poirier","email":"bpoirier@suse.com","date":"2017-08-28 18:29:41 UTC","message":"packet: Don't write vnet header beyond end of buffer\n\n... which may happen with certain values of tp_reserve and maclen.\n\nFixes: 58d19b19cd99 (\"packet: vnet_hdr support for tpacket_rcv\")\nSigned-off-by: Benjamin Poirier <bpoirier@suse.com>\nCc: Willem de Bruijn <willemb@google.com>\nAcked-by: Willem de Bruijn <willemb@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":9,"deletions":3,"filepaths":{"net/packet/af_packet.c":{"insertions":9,"deletions":3}}},"f6fb8f100b807378fda19e83e5ac6828b638603a":{"author":"chetan loke","email":"loke.chetan@gmail.com","date":"2011-08-19 10:18:16 UTC","message":"af-packet: TPACKET_V3 flexible buffer implementation.\n\n1) Blocks can be configured with non-static frame-size.\n2) Read/poll is at a block-level(as opposed to packet-level).\n3) Added poll timeout to avoid indefinite user-space wait on idle links.\n4) Added user-configurable knobs:\n   4.1) block::timeout.\n   4.2) tpkt_hdr::sk_rxhash.\n\nChanges:\nC1) tpacket_rcv()\n    C1.1) packet_current_frame() is replaced by packet_current_rx_frame()\n          The bulk of the processing is then moved in the following chain:\n          packet_current_rx_frame()\n            __packet_lookup_frame_in_block\n              fill_curr_block()\n              or\n                retire_current_block\n                dispatch_next_block\n              or\n              return NULL(queue is plugged/paused)\n\nSigned-off-by: Chetan Loke <loke.chetan@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":891,"deletions":46,"filepaths":{"net/packet/af_packet.c":{"insertions":891,"deletions":46}}},"69e3c75f4d541a6eb151b3ef91f34033cb3ad6e1":{"author":"Johann Baudy","email":"johann.baudy@gnu-log.net","date":"2009-05-19 05:11:22 UTC","message":"net: TX_RING and packet mmap\n\nNew packet socket feature that makes packet socket more efficient for\ntransmission.\n\n- It reduces number of system call through a PACKET_TX_RING mechanism,\n  based on PACKET_RX_RING (Circular buffer allocated in kernel space\n  which is mmapped from user space).\n\n- It minimizes CPU copy using fragmented SKB (almost zero copy).\n\nSigned-off-by: Johann Baudy <johann.baudy@gnu-log.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":616,"deletions":135,"filepaths":{"Documentation/networking/packet_mmap.txt":{"insertions":121,"deletions":19},"include/linux/if_packet.h":{"insertions":15,"deletions":5},"include/linux/skbuff.h":{"insertions":3,"deletions":0},"net/packet/af_packet.c":{"insertions":477,"deletions":111}}},"0ace17d56824165c7f4c68785d6b58971db954dd":{"author":"Richard Palethorpe","email":"rpalethorpe@suse.com","date":"2020-01-21 13:42:58 UTC","message":"can, slip: Protect tty->disc_data in write_wakeup and close with RCU\n\nwrite_wakeup can happen in parallel with close/hangup where tty->disc_data\nis set to NULL and the netdevice is freed thus also freeing\ndisc_data. write_wakeup accesses disc_data so we must prevent close from\nfreeing the netdev while write_wakeup has a non-NULL view of\ntty->disc_data.\n\nWe also need to make sure that accesses to disc_data are atomic. Which can\nall be done with RCU.\n\nThis problem was found by Syzkaller on SLCAN, but the same issue is\nreproducible with the SLIP line discipline using an LTP test based on the\nSyzkaller reproducer.\n\nA fix which didn't use RCU was posted by Hillf Danton.\n\nFixes: 661f7fda21b1 (\"slip: Fix deadlock in write_wakeup\")\nFixes: a8e83b17536a (\"slcan: Port write_wakeup deadlock fix from slip\")\nReported-by: syzbot+017e491ae13c0068598a@syzkaller.appspotmail.com\nSigned-off-by: Richard Palethorpe <rpalethorpe@suse.com>\nCc: Wolfgang Grandegger <wg@grandegger.com>\nCc: Marc Kleine-Budde <mkl@","insertions":20,"deletions":4,"filepaths":{"drivers/net/can/slcan.c":{"insertions":10,"deletions":2},"drivers/net/slip/slip.c":{"insertions":10,"deletions":2}}},"a8e83b17536aad603fbeae4c460f2da0ee9fe6ed":{"author":"Tyler Hall","email":"tylerwhall@gmail.com","date":"2014-06-16 02:23:17 UTC","message":"slcan: Port write_wakeup deadlock fix from slip\n\nThe commit \"slip: Fix deadlock in write_wakeup\" fixes a deadlock caused\nby a change made in both slcan and slip. This is a direct port of that\nfix.\n\nSigned-off-by: Tyler Hall <tylerwhall@gmail.com>\nCc: Oliver Hartkopp <socketcan@hartkopp.net>\nCc: Andre Naujoks <nautsch2@gmail.com>\nCc: David S. Miller <davem@davemloft.net>\nCc: linux-kernel@vger.kernel.org\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":27,"deletions":10,"filepaths":{"drivers/net/can/slcan.c":{"insertions":27,"deletions":10}}},"661f7fda21b15ec52f57fcd397c03370acc28688":{"author":"Tyler Hall","email":"tylerwhall@gmail.com","date":"2014-06-16 02:23:16 UTC","message":"slip: Fix deadlock in write_wakeup\n\nUse schedule_work() to avoid potentially taking the spinlock in\ninterrupt context.\n\nCommit cc9fa74e2a (\"slip/slcan: added locking in wakeup function\") added\nnecessary locking to the wakeup function and 367525c8c2/ddcde142be (\"can:\nslcan: Fix spinlock variant\") converted it to spin_lock_bh() because the lock\nis also taken in timers.\n\nDisabling softirqs is not sufficient, however, as tty drivers may call\nwrite_wakeup from interrupt context. This driver calls tty->ops->write() with\nits spinlock held, which may immediately cause an interrupt on the same CPU and\nsubsequent spin_bug().\n\nSimply converting to spin_lock_irq/irqsave() prevents this deadlock, but\ncauses lockdep to point out a possible circular locking dependency\nbetween these locks:\n\n(&(&sl->lock)->rlock){-.....}, at: slip_write_wakeup\n(&port_lock_key){-.....}, at: serial8250_handle_irq.part.13\n\nThe slip transmit is holding the slip spinlock when calling the tty write.\nThis grabs the port lock. ","insertions":27,"deletions":10,"filepaths":{"drivers/net/slip/slip.c":{"insertions":26,"deletions":10},"drivers/net/slip/slip.h":{"insertions":1,"deletions":0}}},"831eebad70a25f55b5745453ac252d4afe997187":{},"28ebeb8db77035e058a510ce9bd17c2b9a009dba":{"author":"Zqiang","email":"qiang.zhang@windriver.com","date":"2020-06-12 03:52:10 UTC","message":"usb: usbtest: fix missing kfree(dev->buf) in usbtest_disconnect\n\nBUG: memory leak\nunreferenced object 0xffff888055046e00 (size 256):\n  comm \"kworker/2:9\", pid 2570, jiffies 4294942129 (age 1095.500s)\n  hex dump (first 32 bytes):\n    00 70 04 55 80 88 ff ff 18 bb 5a 81 ff ff ff ff  .p.U......Z.....\n    f5 96 78 81 ff ff ff ff 37 de 8e 81 ff ff ff ff  ..x.....7.......\n  backtrace:\n    [<00000000d121dccf>] kmemleak_alloc_recursive\ninclude/linux/kmemleak.h:43 [inline]\n    [<00000000d121dccf>] slab_post_alloc_hook mm/slab.h:586 [inline]\n    [<00000000d121dccf>] slab_alloc_node mm/slub.c:2786 [inline]\n    [<00000000d121dccf>] slab_alloc mm/slub.c:2794 [inline]\n    [<00000000d121dccf>] kmem_cache_alloc_trace+0x15e/0x2d0 mm/slub.c:2811\n    [<000000005c3c3381>] kmalloc include/linux/slab.h:555 [inline]\n    [<000000005c3c3381>] usbtest_probe+0x286/0x19d0\ndrivers/usb/misc/usbtest.c:2790\n    [<000000001cec6910>] usb_probe_interface+0x2bd/0x870\ndrivers/usb/core/driver.c:361\n    [<000000007806c118>] ","insertions":1,"deletions":0,"filepaths":{"drivers/usb/misc/usbtest.c":{"insertions":1,"deletions":0}}},"75b0cea7bf307f362057cc778efe89af4c615354":{"author":"Jason A. Donenfeld","email":"Jason@zx2c4.com","date":"2020-06-15 10:43:32 UTC","message":"ACPI: configfs: Disallow loading ACPI tables when locked down\n\nLike other vectors already patched, this one here allows the root\nuser to load ACPI tables, which enables arbitrary physical address\nwrites, which in turn makes it possible to disable lockdown.\n\nPrevents this by checking the lockdown status before allowing a new\nACPI table to be installed. The link in the trailer shows a PoC of\nhow this might be used.\n\nLink: https://git.zx2c4.com/american-unsigned-language/tree/american-unsigned-language-2.sh\nCc: 5.4+ <stable@vger.kernel.org> # 5.4+\nSigned-off-by: Jason A. Donenfeld <Jason@zx2c4.com>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>","insertions":5,"deletions":1,"filepaths":{"drivers/acpi/acpi_configfs.c":{"insertions":5,"deletions":1}}},"0bf54fcd95042bd178cb25368422cf4474fc8492":{"author":"Octavian Purdila","email":"octavian.purdila@intel.com","date":"2016-07-08 16:13:13 UTC","message":"ACPI: add support for configfs\n\nRegister the ACPI subsystem with configfs.\n\nSigned-off-by: Octavian Purdila <octavian.purdila@intel.com>\nReviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>","insertions":70,"deletions":0,"filepaths":{"Documentation/ABI/testing/configfs-acpi":{"insertions":7,"deletions":0},"MAINTAINERS":{"insertions":1,"deletions":0},"drivers/acpi/Kconfig":{"insertions":8,"deletions":0},"drivers/acpi/Makefile":{"insertions":1,"deletions":0},"drivers/acpi/configfs.c":{"insertions":53,"deletions":0}}},"772bf1e2878ecfca0d1f332071c83e021dd9cf01":{"author":"Jan Kiszka","email":"jan.kiszka@siemens.com","date":"2017-06-09 18:36:31 UTC","message":"ACPI: configfs: Unload SSDT on configfs entry removal\n\nCall directly into acpica to load a table to obtain its index on return.\nWe choose the direct call of acpica internal functions to avoid having\nto modify its API which is used outside of Linux as well.\n\nUse that index to unload the table again when the corresponding\ndirectory in configfs gets removed. This allows to change SSDTs without\nrebooting the system. It also allows to destroy devices again that a\ndynamically loaded SSDT created.\n\nThis is widely similar to the DT overlay behavior.\n\nSigned-off-by: Jan Kiszka <jan.kiszka@siemens.com>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>","insertions":23,"deletions":1,"filepaths":{"drivers/acpi/acpi_configfs.c":{"insertions":19,"deletions":1},"drivers/acpi/acpica/tbdata.c":{"insertions":4,"deletions":0}}},"612bd01fc6e04c3ce9eb59587b4a7e4ebd6aff35":{"author":"Octavian Purdila","email":"octavian.purdila@intel.com","date":"2016-07-08 16:13:14 UTC","message":"ACPI: add support for loading SSDTs via configfs\n\nNew tables can be loaded by creating directories under /config/table/\nand writing the AML code into the aml table attribute. Various table\nattributes will be readable once the table is successfully loaded.\n\nUnloading tables is not supported at the moment, but it can be easily\nimplemented once ACPI loading functions provide a table handle to be\nused for unloading.\n\nSigned-off-by: Octavian Purdila <octavian.purdila@intel.com>\nReviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>","insertions":258,"deletions":1,"filepaths":{"Documentation/ABI/testing/configfs-acpi":{"insertions":29,"deletions":0},"Documentation/acpi/ssdt-overlays.txt":{"insertions":14,"deletions":0},"drivers/acpi/configfs.c":{"insertions":215,"deletions":1}}},"cadfad870154e14f745ec845708bc17d166065f2":{"author":"Andy Lutomirski","email":"luto@kernel.org","date":"2020-07-17 23:53:55 UTC","message":"x86/ioperm: Fix io bitmap invalidation on Xen PV\n\ntss_invalidate_io_bitmap() wasn't wired up properly through the pvop\nmachinery, so the TSS and Xen's io bitmap would get out of sync\nwhenever disabling a valid io bitmap.\n\nAdd a new pvop for tss_invalidate_io_bitmap() to fix it.\n\nThis is XSA-329.\n\nFixes: 22fe5b0439dd (\"x86/ioperm: Move TSS bitmap update to exit to user work\")\nSigned-off-by: Andy Lutomirski <luto@kernel.org>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Juergen Gross <jgross@suse.com>\nReviewed-by: Thomas Gleixner <tglx@linutronix.de>\nCc: stable@vger.kernel.org\nLink: https://lkml.kernel.org/r/d53075590e1f91c19f8af705059d3ff99424c020.1595030016.git.luto@kernel.org","insertions":38,"deletions":17,"filepaths":{"arch/x86/include/asm/io_bitmap.h":{"insertions":16,"deletions":0},"arch/x86/include/asm/paravirt.h":{"insertions":5,"deletions":0},"arch/x86/include/asm/paravirt_types.h":{"insertions":1,"deletions":0},"arch/x86/kernel/paravirt.c":{"insertions":2,"deletions":1},"arch/x86/kernel/process.c":{"insertions":2,"deletions":16},"arch/x86/xen/enlighten_pv.c":{"insertions":12,"deletions":0}}},"99bcd4a6e5b8ba201fdd252f1054689884899fee":{"author":"Juergen Gross","email":"jgross@suse.com","date":"2020-02-18 15:47:12 UTC","message":"x86/ioperm: Add new paravirt function update_io_bitmap()\n\nCommit 111e7b15cf10f6 (\"x86/ioperm: Extend IOPL config to control ioperm()\nas well\") reworked the iopl syscall to use I/O bitmaps.\n\nUnfortunately this broke Xen PV domains using that syscall as there is\ncurrently no I/O bitmap support in PV domains.\n\nAdd I/O bitmap support via a new paravirt function update_io_bitmap which\nXen PV domains can use to update their I/O bitmaps via a hypercall.\n\nFixes: 111e7b15cf10f6 (\"x86/ioperm: Extend IOPL config to control ioperm() as well\")\nReported-by: Jan Beulich <jbeulich@suse.com>\nSigned-off-by: Juergen Gross <jgross@suse.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nTested-by: Jan Beulich <jbeulich@suse.com>\nReviewed-by: Jan Beulich <jbeulich@suse.com>\nCc: <stable@vger.kernel.org> # 5.5\nLink: https://lkml.kernel.org/r/20200218154712.25490-1-jgross@suse.com","insertions":50,"deletions":2,"filepaths":{"arch/x86/include/asm/io_bitmap.h":{"insertions":8,"deletions":1},"arch/x86/include/asm/paravirt.h":{"insertions":7,"deletions":0},"arch/x86/include/asm/paravirt_types.h":{"insertions":4,"deletions":0},"arch/x86/kernel/paravirt.c":{"insertions":5,"deletions":0},"arch/x86/kernel/process.c":{"insertions":1,"deletions":1},"arch/x86/xen/enlighten_pv.c":{"insertions":25,"deletions":0}}},"4804e382c117ce213cd5c43512cf4b1d71bb2650":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2019-11-11 22:03:25 UTC","message":"x86/ioperm: Share I/O bitmap if identical\n\nThe I/O bitmap is duplicated on fork. That's wasting memory and slows down\nfork. There is no point to do so. As long as the bitmap is not modified it\ncan be shared between threads and processes.\n\nAdd a refcount and just share it on fork. If a task modifies the bitmap\nthen it has to do the duplication if and only if it is shared.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Andy Lutomirski <luto@kernel.org>","insertions":50,"deletions":42,"filepaths":{"arch/x86/include/asm/io_bitmap.h":{"insertions":5,"deletions":0},"arch/x86/kernel/ioport.c":{"insertions":39,"deletions":9},"arch/x86/kernel/process.c":{"insertions":6,"deletions":33}}},"4bfe6cce133cad82cea04490c308795275857782":{"author":"Jay Lang","email":"jaytlang@mit.edu","date":"2020-05-24 16:27:39 UTC","message":"x86/ioperm: Prevent a memory leak when fork fails\n\nIn the copy_process() routine called by _do_fork(), failure to allocate\na PID (or further along in the function) will trigger an invocation to\nexit_thread(). This is done to clean up from an earlier call to\ncopy_thread_tls(). Naturally, the child task is passed into exit_thread(),\nhowever during the process, io_bitmap_exit() nullifies the parent's\nio_bitmap rather than the child's.\n\nAs copy_thread_tls() has been called ahead of the failure, the reference\ncount on the calling thread's io_bitmap is incremented as we would expect.\nHowever, io_bitmap_exit() doesn't accept any arguments, and thus assumes\nit should trash the current thread's io_bitmap reference rather than the\nchild's. This is pretty sneaky in practice, because in all instances but\nthis one, exit_thread() is called with respect to the current task and\neverything works out.\n\nA determined attacker can issue an appropriate ioctl (i.e. KDENABIO) to\nget a bitmap allocated, and for","insertions":15,"deletions":15,"filepaths":{"arch/x86/include/asm/io_bitmap.h":{"insertions":2,"deletions":2},"arch/x86/kernel/ioport.c":{"insertions":11,"deletions":11},"arch/x86/kernel/process.c":{"insertions":2,"deletions":2}}},"ea5f1cd7ab494f65f50f338299eabb40ad6a1767":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2019-11-11 22:03:24 UTC","message":"x86/ioperm: Remove bitmap if all permissions dropped\n\nIf ioperm() results in a bitmap with all bits set (no permissions to any\nI/O port), then handling that bitmap on context switch and exit to user\nmode is pointless. Drop it.\n\nMove the bitmap exit handling to the ioport code and reuse it for both the\nthread exit path and dropping it. This allows to reuse this code for the\nupcoming iopl() emulation.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Andy Lutomirski <luto@kernel.org>","insertions":23,"deletions":15,"filepaths":{"arch/x86/include/asm/io_bitmap.h":{"insertions":2,"deletions":0},"arch/x86/kernel/ioport.c":{"insertions":18,"deletions":1},"arch/x86/kernel/process.c":{"insertions":3,"deletions":14}}},"111e7b15cf10f6e973ccf537c70c66a5de539060":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2019-11-12 20:40:33 UTC","message":"x86/ioperm: Extend IOPL config to control ioperm() as well\n\nIf iopl() is disabled, then providing ioperm() does not make much sense.\n\nRename the config option and disable/enable both syscalls with it. Guard\nthe code with #ifdefs where appropriate.\n\nSuggested-by: Andy Lutomirski <luto@kernel.org>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>","insertions":65,"deletions":20,"filepaths":{"arch/x86/Kconfig":{"insertions":5,"deletions":2},"arch/x86/include/asm/io_bitmap.h":{"insertions":6,"deletions":0},"arch/x86/include/asm/processor.h":{"insertions":8,"deletions":1},"arch/x86/include/asm/thread_info.h":{"insertions":6,"deletions":1},"arch/x86/kernel/cpu/common.c":{"insertions":17,"deletions":9},"arch/x86/kernel/ioport.c":{"insertions":19,"deletions":7},"arch/x86/kernel/process.c":{"insertions":4,"deletions":0}}},"f8822f42019eceed19cc6c0f985a489e17796ed8":{"author":"Jeremy Fitzhardinge","email":"jeremy@goop.org","date":"2007-05-02 17:27:14 UTC","message":"[PATCH] i386: PARAVIRT: Consistently wrap paravirt ops callsites to make them patchable\n\nWrap a set of interesting paravirt_ops calls in a wrapper which makes\nthe callsites available for patching.  Unfortunately this is pretty\nugly because there's no way to get gcc to generate a function call,\nbut also wrap just the callsite itself with the necessary labels.\n\nThis patch supports functions with 0-4 arguments, and either void or\nreturning a value.  64-bit arguments must be split into a pair of\n32-bit arguments (lower word first).  Small structures are returned in\nregisters.\n\nSigned-off-by: Jeremy Fitzhardinge <jeremy@xensource.com>\nSigned-off-by: Andi Kleen <ak@suse.de>\nCc: Rusty Russell <rusty@rustcorp.com.au>\nCc: Zachary Amsden <zach@vmware.com>\nCc: Anthony Liguori <anthony@codemonkey.ws>","insertions":560,"deletions":126,"filepaths":{"include/asm-i386/paravirt.h":{"insertions":560,"deletions":126}}},"d3561b7fa0fb0fc583bab0eeda32bec9e4c4056d":{"author":"Rusty Russell","email":"rusty@rustcorp.com.au","date":"2006-12-07 01:14:07 UTC","message":"[PATCH] paravirt: header and stubs for paravirtualisation\n\nCreate a paravirt.h header for all the critical operations which need to be\nreplaced with hypervisor calls, and include that instead of defining native\noperations, when CONFIG_PARAVIRT.\n\nThis patch does the dumbest possible replacement of paravirtualized\ninstructions: calls through a \"paravirt_ops\" structure.  Currently these are\nfunction implementations of native hardware: hypervisors will override the ops\nstructure with their own variants.\n\nAll the pv-ops functions are declared \"fastcall\" so that a specific\nregister-based ABI is used, to make inlining assember easier.\n\nAnd:\n\n+From: Andy Whitcroft <apw@shadowen.org>\n\nThe paravirt ops introduce a 'weak' attribute onto memory_setup().\nCode ordering leads to the following warnings on x86:\n\n    arch/i386/kernel/setup.c:651: warning: weak declaration of\n                `memory_setup' after first use results in unspecified behavior\n\nMove memory_setup() to avoid this.\n\nSigned-off-by: ","insertions":890,"deletions":58,"filepaths":{"arch/i386/Kconfig":{"insertions":11,"deletions":0},"arch/i386/boot/compressed/misc.c":{"insertions":1,"deletions":0},"arch/i386/kernel/Makefile":{"insertions":1,"deletions":0},"arch/i386/kernel/asm-offsets.c":{"insertions":10,"deletions":0},"arch/i386/kernel/entry.S":{"insertions":27,"deletions":7},"arch/i386/kernel/i8259.c":{"insertions":4,"deletions":1},"arch/i386/kernel/paravirt.c":{"insertions":404,"deletions":0},"arch/i386/kernel/setup.c":{"insertions":7,"deletions":1},"arch/i386/kernel/smpboot.c":{"insertions":5,"deletions":0},"arch/i386/kernel/time.c":{"insertions":5,"deletions":10},"arch/i386/power/cpu.c":{"insertions":4,"deletions":4},"drivers/net/de600.c":{"insertions":0,"deletions":1},"include/asm-i386/delay.h":{"insertions":8,"deletions":0},"include/asm-i386/desc.h":{"insertions":8,"deletions":1},"include/asm-i386/io.h":{"insertions":5,"deletions":3},"include/asm-i386/irq.h":{"insertions":3,"deletions":0},"include/asm-i386/irqflags.h":{"insertions":27,"deletions":15},"include/asm-i386/mach-default/setup_arch.h":{"insertions":2,"deletions":0},"include/asm-i386/msr.h":{"insertions":5,"deletions":0},"include/asm-i386/paravirt.h":{"insertions":281,"deletions":0},"include/asm-i386/processor.h":{"insertions":12,"deletions":3},"include/asm-i386/segment.h":{"insertions":2,"deletions":0},"include/asm-i386/setup.h":{"insertions":1,"deletions":0},"include/asm-i386/spinlock.h":{"insertions":4,"deletions":0},"include/asm-i386/suspend.h":{"insertions":2,"deletions":6},"include/asm-i386/system.h":{"insertions":10,"deletions":6},"include/asm-i386/time.h":{"insertions":41,"deletions":0}}},"da51da189a24bb9b7e2d5a123be096e51a4695a5":{"author":"Andy Lutomirski","email":"luto@kernel.org","date":"2017-11-02 07:59:10 UTC","message":"x86/entry/64: Pass SP0 directly to load_sp0()\n\nload_sp0() had an odd signature:\n\n  void load_sp0(struct tss_struct *tss, struct thread_struct *thread);\n\nSimplify it to:\n\n  void load_sp0(unsigned long sp0);\n\nAlso simplify a few get_cpu()/put_cpu() sequences to\npreempt_disable()/preempt_enable().\n\nSigned-off-by: Andy Lutomirski <luto@kernel.org>\nReviewed-by: Borislav Petkov <bp@suse.de>\nCc: Borislav Petkov <bpetkov@suse.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Dave Hansen <dave.hansen@intel.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nLink: http://lkml.kernel.org/r/2655d8b42ed940aa384fe18ee1129bbbcf730a08.1509609304.git.luto@kernel.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>","insertions":20,"deletions":25,"filepaths":{"arch/x86/include/asm/paravirt.h":{"insertions":2,"deletions":3},"arch/x86/include/asm/paravirt_types.h":{"insertions":1,"deletions":1},"arch/x86/include/asm/processor.h":{"insertions":4,"deletions":5},"arch/x86/kernel/cpu/common.c":{"insertions":2,"deletions":2},"arch/x86/kernel/process_32.c":{"insertions":1,"deletions":1},"arch/x86/kernel/process_64.c":{"insertions":1,"deletions":1},"arch/x86/kernel/vm86_32.c":{"insertions":6,"deletions":8},"arch/x86/xen/enlighten_pv.c":{"insertions":3,"deletions":4}}},"ac5672f82c39ff2f8dce81bf3e68b1dfc41f366f":{"author":"Jeremy Fitzhardinge","email":"jeremy.fitzhardinge@citrix.com","date":"2009-04-14 21:29:44 UTC","message":"x86/paravirt: split paravirt definitions into paravirt_types.h\n\nSplit the monolithic asm/paravirt.h into separate paravirt.h (inlines and other\n\"active\" definitions), and paravirt_types.h (types, constants and other \"passive\"\ndefinitions).  This makes it easier to use the type/constant definitions without\npulling in everything else and causing circular dependency problems.\n\n[ Impact: cleanup ]\n\nSigned-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>","insertions":721,"deletions":710,"filepaths":{"arch/x86/include/asm/paravirt.h":{"insertions":1,"deletions":710},"arch/x86/include/asm/paravirt_types.h":{"insertions":720,"deletions":0}}},"22fe5b0439dd53643fd6f4c582c46c6dba0fde53":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2019-11-11 22:03:23 UTC","message":"x86/ioperm: Move TSS bitmap update to exit to user work\n\nThere is no point to update the TSS bitmap for tasks which use I/O bitmaps\non every context switch. It's enough to update it right before exiting to\nuser space.\n\nThat reduces the context switch bitmap handling to invalidating the io\nbitmap base offset in the TSS when the outgoing task has TIF_IO_BITMAP\nset. The invaldiation is done on purpose when a task with an IO bitmap\nswitches out to prevent any possible leakage of an activated IO bitmap.\n\nIt also removes the requirement to update the tasks bitmap atomically in\nioperm().\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>","insertions":54,"deletions":45,"filepaths":{"arch/x86/entry/common.c":{"insertions":4,"deletions":0},"arch/x86/include/asm/io_bitmap.h":{"insertions":2,"deletions":0},"arch/x86/include/asm/thread_info.h":{"insertions":5,"deletions":4},"arch/x86/kernel/ioport.c":{"insertions":4,"deletions":21},"arch/x86/kernel/process.c":{"insertions":39,"deletions":20}}},"7b0b8cfd261c569177d64d6e9b1800fbe412fd65":{"author":"Borislav Petkov","email":"bp@suse.de","date":"2019-11-30 15:00:53 UTC","message":"x86/ioperm: Save an indentation level in tss_update_io_bitmap()\n\n... for better readability.\n\nNo functional changes.\n\n[ Minor edit. ]\n\nSigned-off-by: Borislav Petkov <bp@suse.de>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nSigned-off-by: Ingo Molnar <mingo@kernel.org>","insertions":26,"deletions":26,"filepaths":{"arch/x86/kernel/process.c":{"insertions":26,"deletions":26}}},"e1dab14cf68d1e03950135969af3faf322f0db04":{"author":"Vitaly Kuznetsov","email":"vkuznets@redhat.com","date":"2017-03-14 17:35:41 UTC","message":"x86/xen: split off enlighten_pv.c\n\nBasically, enlighten.c is renamed to enlighten_pv.c and some code moved\nout to common enlighten.c.\n\nSigned-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>\nReviewed-by: Juergen Gross <jgross@suse.com>\nSigned-off-by: Juergen Gross <jgross@suse.com>","insertions":1586,"deletions":1576,"filepaths":{"arch/x86/xen/Makefile":{"insertions":2,"deletions":2},"arch/x86/xen/enlighten.c":{"insertions":72,"deletions":1574},"arch/x86/xen/enlighten_pv.c":{"insertions":1512,"deletions":0}}},"01872cb896c76cedeabe93a08456976ab55ad695":{},"f227e3ec3b5cad859ad15666874405e8c1bbc1d4":{"author":"Willy Tarreau","email":"w@1wt.eu","date":"2020-07-10 13:23:19 UTC","message":"random32: update the net random state on interrupt and activity\n\nThis modifies the first 32 bits out of the 128 bits of a random CPU's\nnet_rand_state on interrupt or CPU activity to complicate remote\nobservations that could lead to guessing the network RNG's internal\nstate.\n\nNote that depending on some network devices' interrupt rate moderation\nor binding, this re-seeding might happen on every packet or even almost\nnever.\n\nIn addition, with NOHZ some CPUs might not even get timer interrupts,\nleaving their local state rarely updated, while they are running\nnetworked processes making use of the random state.  For this reason, we\nalso perform this update in update_process_times() in order to at least\nupdate the state when there is user or system activity, since it's the\nonly case we care about.\n\nReported-by: Amit Klein <aksecurity@gmail.com>\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Eric Dumazet <edumazet@google.com>\nCc: \"Jason A. Donenfeld\" <Jason@zx2c4.com>\nCc: And","insertions":13,"deletions":1,"filepaths":{"drivers/char/random.c":{"insertions":1,"deletions":0},"include/linux/random.h":{"insertions":3,"deletions":0},"kernel/time/timer.c":{"insertions":8,"deletions":0},"lib/random32.c":{"insertions":1,"deletions":1}}},"c51f8f88d705e06bd696d7510aff22b33eb8e638":{"author":"George Spelvin","email":"lkml@sdf.org","date":"2020-08-09 06:57:44 UTC","message":"random32: make prandom_u32() output unpredictable\n\nNon-cryptographic PRNGs may have great statistical properties, but\nare usually trivially predictable to someone who knows the algorithm,\ngiven a small sample of their output.  An LFSR like prandom_u32() is\nparticularly simple, even if the sample is widely scattered bits.\n\nIt turns out the network stack uses prandom_u32() for some things like\nrandom port numbers which it would prefer are *not* trivially predictable.\nPredictability led to a practical DNS spoofing attack.  Oops.\n\nThis patch replaces the LFSR with a homebrew cryptographic PRNG based\non the SipHash round function, which is in turn seeded with 128 bits\nof strong random key.  (The authors of SipHash have *not* been consulted\nabout this abuse of their algorithm.)  Speed is prioritized over security;\nattacks are rare, while performance is always wanted.\n\nReplacing all callers of prandom_u32() is the quick fix.\nWhether to reinstate a weaker PRNG for uses which can tolerate it\nis ","insertions":318,"deletions":190,"filepaths":{"drivers/char/random.c":{"insertions":0,"deletions":1},"include/linux/prandom.h":{"insertions":34,"deletions":2},"kernel/time/timer.c":{"insertions":0,"deletions":7},"lib/random32.c":{"insertions":284,"deletions":180}}},"3060d6fe28570640c2d7d66d38b9eaa848c3b9e3":{"author":"Yinghai Lu","email":"yhlu.kernel@gmail.com","date":"2008-08-20 03:50:08 UTC","message":"x86: put timer_rand_state pointer into irq_desc\n\nirq_timer_state[] is a NR_IRQS sized array that is a side-by array to\nthe real irq_desc[] array.\n\nIntegrate that field into the (now dynamic) irq_desc dynamic array and\nsave some RAM.\n\nv2: keep the old way to support arch not support irq_desc\n\nSigned-off-by: Yinghai Lu <yhlu.kernel@gmail.com>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>","insertions":63,"deletions":5,"filepaths":{"drivers/char/random.c":{"insertions":61,"deletions":5},"include/linux/irq.h":{"insertions":2,"deletions":0}}},"43759d4f429c8d55fd56f863542e20f4e6e8f589":{"author":"Theodore Ts'o","email":"tytso@mit.edu","date":"2014-06-15 01:43:13 UTC","message":"random: use an improved fast_mix() function\n\nUse more efficient fast_mix() function.  Thanks to George Spelvin for\ndoing the leg work to find a more efficient mixing function.\n\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nCc: George Spelvin <linux@horizon.com>","insertions":68,"deletions":24,"filepaths":{"drivers/char/random.c":{"insertions":68,"deletions":24}}},"43838a23a05fbd13e47d750d3dfd77001536dd33":{"author":"Theodore Ts'o","email":"tytso@mit.edu","date":"2018-04-11 17:27:52 UTC","message":"random: fix crng_ready() test\n\nThe crng_init variable has three states:\n\n0: The CRNG is not initialized at all\n1: The CRNG has a small amount of entropy, hopefully good enough for\n   early-boot, non-cryptographical use cases\n2: The CRNG is fully initialized and we are sure it is safe for\n   cryptographic use cases.\n\nThe crng_ready() function should only return true once we are in the\nlast state.  This addresses CVE-2018-1108.\n\nReported-by: Jann Horn <jannh@google.com>\nFixes: e192be9d9a30 (\"random: replace non-blocking pool...\")\nCc: stable@kernel.org # 4.8+\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nReviewed-by: Jann Horn <jannh@google.com>","insertions":5,"deletions":5,"filepaths":{"drivers/char/random.c":{"insertions":5,"deletions":5}}},"e192be9d9a30555aae2ca1dc3aad37cba484cd4a":{"author":"Theodore Ts'o","email":"tytso@mit.edu","date":"2016-06-12 22:13:36 UTC","message":"random: replace non-blocking pool with a Chacha20-based CRNG\n\nThe CRNG is faster, and we don't pretend to track entropy usage in the\nCRNG any more.\n\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>","insertions":357,"deletions":164,"filepaths":{"crypto/chacha20_generic.c":{"insertions":0,"deletions":61},"drivers/char/random.c":{"insertions":276,"deletions":102},"include/crypto/chacha20.h":{"insertions":1,"deletions":0},"lib/Makefile":{"insertions":1,"deletions":1},"lib/chacha20.c":{"insertions":79,"deletions":0}}},"897ece56e714a2cc64e6914cb89a362d7021b36e":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2015-10-07 23:20:38 UTC","message":"random32: add prandom_init_once helper for own rngs\n\nAdd a prandom_init_once() facility that works on the rnd_state, so that\nusers that are keeping their own state independent from prandom_u32() can\ninitialize their taus113 per cpu states.\n\nThe motivation here is similar to net_get_random_once(): initialize the\nstate as late as possible in the hope that enough entropy has been\ncollected for the seeding. prandom_init_once() makes use of the recently\nintroduced prandom_seed_full_state() helper and is generic enough so that\nit could also be used on fast-paths due to the DO_ONCE().\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":7,"deletions":1,"filepaths":{"include/linux/random.h":{"insertions":6,"deletions":0},"lib/random32.c":{"insertions":1,"deletions":1}}},"a98814cef87946d2708812ad9f8b1e03b8366b6f":{"author":"Daniel Borkmann","email":"dborkman@redhat.com","date":"2013-11-11 11:20:36 UTC","message":"random32: upgrade taus88 generator to taus113 from errata paper\n\nSince we use prandom*() functions quite often in networking code\ni.e. in UDP port selection, netfilter code, etc, upgrade the PRNG\nfrom Pierre L'Ecuyer's original paper \"Maximally Equidistributed\nCombined Tausworthe Generators\", Mathematics of Computation, 65,\n213 (1996), 203--213 to the version published in his errata paper [1].\n\nThe Tausworthe generator is a maximally-equidistributed generator,\nthat is fast and has good statistical properties [1].\n\nThe version presented there upgrades the 3 state LFSR to a 4 state\nLFSR with increased periodicity from about 2^88 to 2^113. The\nalgorithm is presented in [1] by the very same author who also\ndesigned the original algorithm in [2].\n\nAlso, by increasing the state, we make it a bit harder for attackers\nto \"guess\" the PRNGs internal state. See also discussion in [3].\n\nNow, as we use this sort of weak initialization discussed in [3]\nonly between core_initcall() until late_initcall","insertions":52,"deletions":39,"filepaths":{"include/linux/random.h":{"insertions":6,"deletions":5},"lib/random32.c":{"insertions":46,"deletions":34}}},"38e9efcdb33270b4da72143d8e7ca4dcf7f0989b":{"author":"Daniel Borkmann","email":"dborkman@redhat.com","date":"2013-11-11 11:20:35 UTC","message":"random32: move rnd_state to linux/random.h\n\nstruct rnd_state got mistakenly pulled into uapi header. It is not\nused anywhere and does also not belong there!\n\nCommit 5960164fde (\"lib/random32: export pseudo-random number\ngenerator for modules\"), the last commit on rnd_state before it\ngot moved to uapi, says:\n\n  This patch moves the definition of struct rnd_state and the inline\n  __seed() function to linux/random.h.  It renames the static __random32()\n  function to prandom32() and exports it for use in modules.\n\nHence, the structure was moved from lib/random32.c to linux/random.h\nso that it can be used within modules (FCoE-related code in this\ncase), but not from user space. However, it seems to have been\nmistakenly moved to uapi header through the uapi script. Since no-one\nshould make use of it from the linux headers, move the structure back\nto the kernel for internal use, so that it can be modified on demand.\n\nJoint work with Hannes Frederic Sowa.\n\nCc: Joe Eykholt <jeykholt@cisco.com>\nS","insertions":4,"deletions":7,"filepaths":{"include/linux/random.h":{"insertions":4,"deletions":0},"include/uapi/linux/random.h":{"insertions":0,"deletions":7}}},"253d3194c2b58152fe830fd27c2fd83ebc6fe5ee":{"author":"Mark Rutland","email":"mark.rutland@arm.com","date":"2020-02-10 13:00:13 UTC","message":"random: add arch_get_random_*long_early()\n\nSome architectures (e.g. arm64) can have heterogeneous CPUs, and the\nboot CPU may be able to provide entropy while secondary CPUs cannot. On\nsuch systems, arch_get_random_long() and arch_get_random_seed_long()\nwill fail unless support for RNG instructions has been detected on all\nCPUs. This prevents the boot CPU from being able to provide\n(potentially) trusted entropy when seeding the primary CRNG.\n\nTo make it possible to seed the primary CRNG from the boot CPU without\nadversely affecting the runtime versions of arch_get_random_long() and\narch_get_random_seed_long(), this patch adds new early versions of the\nfunctions used when initializing the primary CRNG.\n\nDefault implementations are provided atop of the existing\narch_get_random_long() and arch_get_random_seed_long() so that only\narchitectures with such constraints need to provide the new helpers.\n\nThere should be no functional change as a result of this patch.\n\nSigned-off-by: Mark Rutland <","insertions":41,"deletions":1,"filepaths":{"drivers/char/random.c":{"insertions":19,"deletions":1},"include/linux/random.h":{"insertions":22,"deletions":0}}},"205a525c334295e3cd4cc7755fd2c0398e3a787f":{"author":"Herbert Xu","email":"herbert@gondor.apana.org.au","date":"2015-06-09 10:19:39 UTC","message":"random: Add callback API for random pool readiness\n\nThe get_blocking_random_bytes API is broken because the wait can\nbe arbitrarily long (potentially forever) so there is no safe way\nof calling it from within the kernel.\n\nThis patch replaces it with a callback API instead.  The callback\nis invoked potentially from interrupt context so the user needs\nto schedule their own work thread if necessary.\n\nIn addition to adding callbacks, they can also be removed as\notherwise this opens up a way for user-space to allocate kernel\nmemory with no bound (by opening algif_rng descriptors and then\nclosing them).\n\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>","insertions":87,"deletions":0,"filepaths":{"drivers/char/random.c":{"insertions":78,"deletions":0},"include/linux/random.h":{"insertions":9,"deletions":0}}},"a98406e22c12e514bac28fec0a49dc793edaf3a8":{"author":"Daniel Borkmann","email":"dborkman@redhat.com","date":"2014-08-23 15:03:28 UTC","message":"random32: improvements to prandom_bytes\n\nThis patch addresses a couple of minor items, mostly addesssing\nprandom_bytes(): 1) prandom_bytes{,_state}() should use size_t\nfor length arguments, 2) We can use put_unaligned() when filling\nthe array instead of open coding it [ perhaps some archs will\nfurther benefit from their own arch specific implementation when\nGCC cannot make up for it ], 3) Fix a typo, 4) Better use unsigned\nint as type for getting the arch seed, 5) Make use of\nprandom_u32_max() for timer slack.\n\nRegarding the change to put_unaligned(), callers of prandom_bytes()\nwhich internally invoke prandom_bytes_state(), don't bother as\nthey expect the array to be filled randomly and don't have any\ncontrol of the internal state what-so-ever (that's also why we\nhave periodic reseeding there, etc), so they really don't care.\n\nNow for the direct callers of prandom_bytes_state(), which\nare solely located in test cases for MTD devices, that is,\ndrivers/mtd/tests/{oobtest.c,pagetest.c,subp","insertions":20,"deletions":23,"filepaths":{"include/linux/random.h":{"insertions":2,"deletions":2},"lib/random32.c":{"insertions":18,"deletions":21}}},"1a0df59444972105f0d4c2b0c16ce414d70c420a":{"author":"Stephen Rothwell","email":"sfr@canb.auug.org.au","date":"2013-04-30 22:27:34 UTC","message":"kernel/compat.c: make do_sysinfo() static\n\nThe only use outside of kernel/timer.c was in kernel/compat.c, so move\ncompat_sys_sysinfo() next to sys_sysinfo() in kernel/timer.c.\n\nSigned-off-by: Stephen Rothwell <sfr@canb.auug.org.au>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Guenter Roeck <linux@roeck-us.net>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nAcked-by: Arnd Bergmann <arnd@arndb.de>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":69,"deletions":68,"filepaths":{"include/linux/kernel.h":{"insertions":0,"deletions":2},"kernel/compat.c":{"insertions":0,"deletions":65},"kernel/timer.c":{"insertions":69,"deletions":1}}},"baa73d9e478ff32d62f3f9422822b59dd9a95a21":{"author":"Nicolas Pitre","email":"nicolas.pitre@linaro.org","date":"2016-11-11 05:10:10 UTC","message":"posix-timers: Make them configurable\n\nSome embedded systems have no use for them.  This removes about\n25KB from the kernel binary size when configured out.\n\nCorresponding syscalls are routed to a stub logging the attempt to\nuse those syscalls which should be enough of a clue if they were\ndisabled without proper consideration. They are: timer_create,\ntimer_gettime: timer_getoverrun, timer_settime, timer_delete,\nclock_adjtime, setitimer, getitimer, alarm.\n\nThe clock_settime, clock_gettime, clock_getres and clock_nanosleep\nsyscalls are replaced by simple wrappers compatible with CLOCK_REALTIME,\nCLOCK_MONOTONIC and CLOCK_BOOTTIME only which should cover the vast\nmajority of use cases with very little code.\n\nSigned-off-by: Nicolas Pitre <nico@linaro.org>\nAcked-by: Richard Cochran <richardcochran@gmail.com>\nAcked-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: John Stultz <john.stultz@linaro.org>\nReviewed-by: Josh Triplett <josh@joshtriplett.org>\nCc: Paul Bolle <pebolle@tiscali.nl>\nCc: lin","insertions":200,"deletions":13,"filepaths":{"arch/alpha/kernel/osf_sys.c":{"insertions":8,"deletions":0},"drivers/char/Kconfig":{"insertions":1,"deletions":0},"drivers/ptp/Kconfig":{"insertions":1,"deletions":1},"fs/exec.c":{"insertions":2,"deletions":0},"init/Kconfig":{"insertions":17,"deletions":0},"kernel/compat.c":{"insertions":8,"deletions":0},"kernel/exit.c":{"insertions":9,"deletions":2},"kernel/fork.c":{"insertions":2,"deletions":0},"kernel/signal.c":{"insertions":6,"deletions":0},"kernel/sys.c":{"insertions":2,"deletions":1},"kernel/time/Makefile":{"insertions":8,"deletions":2},"kernel/time/alarmtimer.c":{"insertions":4,"deletions":2},"kernel/time/posix-stubs.c":{"insertions":123,"deletions":0},"kernel/time/timer.c":{"insertions":2,"deletions":1},"security/selinux/hooks.c":{"insertions":7,"deletions":4}}},"dce3e8fd039cc1b62760b3ad6822cf04c262cd0e":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2019-08-19 14:31:47 UTC","message":"posix-cpu-timers: Remove tsk argument from run_posix_cpu_timers()\n\nIt's always current. Don't give people wrong ideas.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Frederic Weisbecker <frederic@kernel.org>\nLink: https://lkml.kernel.org/r/20190819143801.945469967@linutronix.de","insertions":5,"deletions":4,"filepaths":{"include/linux/posix-timers.h":{"insertions":1,"deletions":1},"kernel/time/posix-cpu-timers.c":{"insertions":3,"deletions":2},"kernel/time/timer.c":{"insertions":1,"deletions":1}}},"73420fea80c6c376d91a69defe64013baa0d7e95":{"author":"Anna-Maria Gleixner","email":"anna-maria@linutronix.de","date":"2016-07-04 09:50:33 UTC","message":"timers: Move __run_timers() function\n\nMove __run_timers() below __next_timer_interrupt() and next_pending_bucket()\nin preparation for __run_timers() NOHZ optimization.\n\nNo functional change.\n\nSigned-off-by: Anna-Maria Gleixner <anna-maria@linutronix.de>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: Arjan van de Ven <arjan@infradead.org>\nCc: Chris Mason <clm@fb.com>\nCc: Eric Dumazet <edumazet@google.com>\nCc: Frederic Weisbecker <fweisbec@gmail.com>\nCc: George Spelvin <linux@sciencehorizons.net>\nCc: Josh Triplett <josh@joshtriplett.org>\nCc: Len Brown <lenb@kernel.org>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Rik van Riel <riel@redhat.com>\nCc: rt@linutronix.de\nLink: http://lkml.kernel.org/r/20160704094342.271872665@linutronix.de\nSigned-off-by: Ingo Molnar <mingo@kernel.org>","insertions":26,"deletions":26,"filepaths":{"kernel/time/timer.c":{"insertions":26,"deletions":26}}},"0766f788eb727e2e330d55d30545db65bcf2623f":{"author":"Emese Revfy","email":"re.emese@gmail.com","date":"2016-06-20 18:42:34 UTC","message":"latent_entropy: Mark functions with __latent_entropy\n\nThe __latent_entropy gcc attribute can be used only on functions and\nvariables.  If it is on a function then the plugin will instrument it for\ngathering control-flow entropy. If the attribute is on a variable then\nthe plugin will initialize it with random contents.  The variable must\nbe an integer, an integer array type or a structure with integer fields.\n\nThese specific functions have been selected because they are init\nfunctions (to help gather boot-time entropy), are called at unpredictable\ntimes, or they have variable loops, each of which provide some level of\nlatent entropy.\n\nSigned-off-by: Emese Revfy <re.emese@gmail.com>\n[kees: expanded commit message]\nSigned-off-by: Kees Cook <keescook@chromium.org>","insertions":37,"deletions":22,"filepaths":{"block/blk-softirq.c":{"insertions":1,"deletions":1},"drivers/char/random.c":{"insertions":2,"deletions":2},"fs/namespace.c":{"insertions":1,"deletions":0},"include/linux/compiler-gcc.h":{"insertions":7,"deletions":0},"include/linux/compiler.h":{"insertions":4,"deletions":0},"include/linux/fdtable.h":{"insertions":1,"deletions":1},"include/linux/genhd.h":{"insertions":1,"deletions":1},"include/linux/init.h":{"insertions":3,"deletions":2},"include/linux/random.h":{"insertions":2,"deletions":2},"kernel/fork.c":{"insertions":4,"deletions":2},"kernel/rcu/tiny.c":{"insertions":1,"deletions":1},"kernel/rcu/tree.c":{"insertions":1,"deletions":1},"kernel/sched/fair.c":{"insertions":1,"deletions":1},"kernel/softirq.c":{"insertions":2,"deletions":2},"kernel/time/timer.c":{"insertions":1,"deletions":1},"lib/irq_poll.c":{"insertions":1,"deletions":1},"lib/random32.c":{"insertions":1,"deletions":1},"mm/page_alloc.c":{"insertions":1,"deletions":1},"net/core/dev.c":{"insertions":2,"deletions":2}}},"c0842fbc1b18c7a044e6ff3e8fa78bfa822c7d1a":{"author":"Linus Torvalds","email":"torvalds@linux-foundation.org","date":"2020-07-31 05:51:14 UTC","message":"random32: move the pseudo-random 32-bit definitions to prandom.h\n\nThe addition of percpu.h to the list of includes in random.h revealed\nsome circular dependencies on arm64 and possibly other platforms.  This\ninclude was added solely for the pseudo-random definitions, which have\nnothing to do with the rest of the definitions in this file but are\nstill there for legacy reasons.\n\nThis patch moves the pseudo-random parts to linux/prandom.h and the\npercpu.h include with it, which is now guarded by _LINUX_PRANDOM_H and\nprotected against recursive inclusion.\n\nA further cleanup step would be to remove this from <linux/random.h>\nentirely, and make people who use the prandom infrastructure include\njust the new header file.  That's a bit of a churn patch, but grepping\nfor \"prandom_\" and \"next_pseudo_random32\" \"struct rnd_state\" should\ncatch most users.\n\nBut it turns out that that nice cleanup step is fairly painful, because\na _lot_ of code currently seems to depend on the implicit include of\n<linu","insertions":82,"deletions":62,"filepaths":{"include/linux/prandom.h":{"insertions":78,"deletions":0},"include/linux/random.h":{"insertions":4,"deletions":62}}},"aaa248f6c9c81b2683db7dbb0689cd5ed1c86d88":{"author":"Stephen Hemminger","email":"shemminger@osdl.org","date":"2006-10-17 07:09:42 UTC","message":"[PATCH] rename net_random to random32\n\nMake net_random() more widely available by calling it random32\n\nakpm: hopefully this will permit the removal of carta_random32.  That needs\nconfirmation from Stephane - this code looks somewhat more computationally\nexpensive, and has a different (ie: callee-stateful) interface.\n\n[akpm@osdl.org: lots of build fixes, cleanups]\nSigned-off-by: Stephen Hemminger <shemminger@osdl.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>\nCc: Stephane Eranian <eranian@hpl.hp.com>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>","insertions":150,"deletions":122,"filepaths":{"include/linux/net.h":{"insertions":4,"deletions":3},"include/linux/random.h":{"insertions":3,"deletions":0},"lib/Makefile":{"insertions":1,"deletions":1},"lib/random32.c":{"insertions":142,"deletions":0},"net/core/dev.c":{"insertions":0,"deletions":2},"net/core/utils.c":{"insertions":0,"deletions":116}}},"4ada97abe937cdb3fc029a871d5b0f21aa661a60":{"author":"Hannes Frederic Sowa","email":"hannes@stressinduktion.org","date":"2014-07-28 12:01:38 UTC","message":"random32: mix in entropy from core to late initcall\n\nCurrently, we have a 3-stage seeding process in prandom():\n\nPhase 1 is from the early actual initialization of prandom()\nsubsystem which happens during core_initcall() and remains\nmost likely until the beginning of late_initcall() phase.\nHere, the system might not have enough entropy available\nfor seeding with strong randomness from the random driver.\nThat means, we currently have a 32bit weak LCG() seeding\nthe PRNG status register 1 and mixing that successively\ninto the other 3 registers just to get it up and running.\n\nPhase 2 starts with late_initcall() phase resp. when the\nrandom driver has initialized its non-blocking pool with\nenough entropy. At that time, we throw away *all* inner\nstate from its 4 registers and do a full reseed with strong\nrandomness.\n\nPhase 3 starts right after that and does a periodic reseed\nwith random slack of status register 1 by a strong random\nsource again.\n\nA problem in phase 1 is that during bootup data","insertions":28,"deletions":21,"filepaths":{"lib/random32.c":{"insertions":28,"deletions":21}}},"4af712e8df998475736f3e2727701bd31e3751a9":{"author":"Hannes Frederic Sowa","email":"hannes@stressinduktion.org","date":"2013-11-11 11:20:34 UTC","message":"random32: add prandom_reseed_late() and call when nonblocking pool becomes initialized\n\nThe Tausworthe PRNG is initialized at late_initcall time. At that time the\nentropy pool serving get_random_bytes is not filled sufficiently. This\npatch adds an additional reseeding step as soon as the nonblocking pool\ngets marked as initialized.\n\nOn some machines it might be possible that late_initcall gets called after\nthe pool has been initialized. In this situation we won't reseed again.\n\n(A call to prandom_seed_late blocks later invocations of early reseed\nattempts.)\n\nJoint work with Daniel Borkmann.\n\nCc: Eric Dumazet <eric.dumazet@gmail.com>\nCc: Theodore Ts'o <tytso@mit.edu>\nSigned-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nAcked-by: \"Theodore Ts'o\" <tytso@mit.edu>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":27,"deletions":2,"filepaths":{"drivers/char/random.c":{"insertions":4,"deletions":1},"include/linux/random.h":{"insertions":1,"deletions":0},"lib/random32.c":{"insertions":22,"deletions":1}}},"a6a9c0f1bf5a9a5faa605773ea75e0b93c3ab108":{"author":"Daniel Borkmann","email":"dborkman@redhat.com","date":"2013-11-11 11:20:37 UTC","message":"random32: add test cases for taus113 implementation\n\nWe generated a battery of 100 test cases from GSL taus113 implemention\nand compare the results from a particular seed and a particular\niteration with our implementation in the kernel. We have verified on\n32 and 64 bit machines that our taus113 kernel implementation gives\nsame results as GSL taus113 implementation:\n\n  [    0.147370] prandom: seed boundary self test passed\n  [    0.148078] prandom: 100 self tests passed\n\nThis is a Kconfig option that is disabled on default, just like the\ncrc32 init selftests in order to not unnecessary slow down boot process.\nWe also refactored out prandom_seed_very_weak() as it's now used in\nmultiple places in order to reduce redundant code.\n\nGSL code we used for generating test cases:\n\n  int i, j;\n  srand(time(NULL));\n  for (i = 0; i < 100; ++i) {\n    int iteration = 500 + (rand() % 500);\n    gsl_rng_default_seed = rand() + 1;\n    gsl_rng *r = gsl_rng_alloc(gsl_rng_taus113);\n    printf(\"\\t{ %lu, \", gs","insertions":196,"deletions":6,"filepaths":{"lib/Kconfig":{"insertions":7,"deletions":0},"lib/random32.c":{"insertions":189,"deletions":6}}},"6d31920246a9fc80be4f16acd27c0bbe8d7b8494":{"author":"Hannes Frederic Sowa","email":"hannes@stressinduktion.org","date":"2013-11-11 11:20:33 UTC","message":"random32: add periodic reseeding\n\nThe current Tausworthe PRNG is never reseeded with truly random data after\nthe first attempt in late_initcall. As this PRNG is used for some critical\nrandom data as e.g. UDP port randomization we should try better and reseed\nthe PRNG once in a while with truly random data from get_random_bytes().\n\nWhen we reseed with prandom_seed we now make also sure to throw the first\noutput away. This suffices the reseeding procedure.\n\nThe delay calculation is based on a proposal from Eric Dumazet.\n\nJoint work with Daniel Borkmann.\n\nCc: Eric Dumazet <eric.dumazet@gmail.com>\nCc: Theodore Ts'o <tytso@mit.edu>\nSigned-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":23,"deletions":0,"filepaths":{"lib/random32.c":{"insertions":23,"deletions":0}}},"6582c665d6b882dad8329e05749fbcf119f1ab88":{"author":"Akinobu Mita","email":"akinobu.mita@gmail.com","date":"2012-12-18 00:04:25 UTC","message":"prandom: introduce prandom_bytes() and prandom_bytes_state()\n\nAdd functions to get the requested number of pseudo-random bytes.\n\nThe difference from get_random_bytes() is that it generates pseudo-random\nnumbers by prandom_u32().  It doesn't consume the entropy pool, and the\nsequence is reproducible if the same rnd_state is used.  So it is suitable\nfor generating random bytes for testing.\n\nSigned-off-by: Akinobu Mita <akinobu.mita@gmail.com>\nCc: \"Theodore Ts'o\" <tytso@mit.edu>\nCc: Artem Bityutskiy <dedekind1@gmail.com>\nCc: Adrian Hunter <adrian.hunter@intel.com>\nCc: David Woodhouse <dwmw2@infradead.org>\nCc: Eilon Greenstein <eilong@broadcom.com>\nCc: David Laight <david.laight@aculab.com>\nCc: Michel Lespinasse <walken@google.com>\nCc: Robert Love <robert.w.love@intel.com>\nCc: Valdis Kletnieks <valdis.kletnieks@vt.edu>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":51,"deletions":0,"filepaths":{"include/linux/random.h":{"insertions":2,"deletions":0},"lib/random32.c":{"insertions":49,"deletions":0}}},"05efa8c943b1d5d90fa8c8147571837573338bb6":{"author":"Sasha Levin","email":"sasha.levin@oracle.com","date":"2014-03-28 16:38:42 UTC","message":"random32: avoid attempt to late reseed if in the middle of seeding\n\nCommit 4af712e8df (\"random32: add prandom_reseed_late() and call when\nnonblocking pool becomes initialized\") has added a late reseed stage\nthat happens as soon as the nonblocking pool is marked as initialized.\n\nThis fails in the case that the nonblocking pool gets initialized\nduring __prandom_reseed()'s call to get_random_bytes(). In that case\nwe'd double back into __prandom_reseed() in an attempt to do a late\nreseed - deadlocking on 'lock' early on in the boot process.\n\nInstead, just avoid even waiting to do a reseed if a reseed is already\noccuring.\n\nFixes: 4af712e8df99 (\"random32: add prandom_reseed_late() and call when nonblocking pool becomes initialized\")\nSigned-off-by: Sasha Levin <sasha.levin@oracle.com>\nAcked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":12,"deletions":1,"filepaths":{"lib/random32.c":{"insertions":12,"deletions":1}}},"496f2f93b1cc286f5a4f4f9acdc1e5314978683f":{"author":"Akinobu Mita","email":"akinobu.mita@gmail.com","date":"2012-12-18 00:04:23 UTC","message":"random32: rename random32 to prandom\n\nThis renames all random32 functions to have 'prandom_' prefix as follows:\n\n  void prandom_seed(u32 seed);\t/* rename from srandom32() */\n  u32 prandom_u32(void);\t\t/* rename from random32() */\n  void prandom_seed_state(struct rnd_state *state, u64 seed);\n  \t\t\t\t/* rename from prandom32_seed() */\n  u32 prandom_u32_state(struct rnd_state *state);\n  \t\t\t\t/* rename from prandom32() */\n\nThe purpose of this renaming is to prevent some kernel developers from\nassuming that prandom32() and random32() might imply that only\nprandom32() was the one using a pseudo-random number generator by\nprandom32's \"p\", and the result may be a very embarassing security\nexposure.  This concern was expressed by Theodore Ts'o.\n\nAnd furthermore, I'm going to introduce new functions for getting the\nrequested number of pseudo-random bytes.  If I continue to use both\nprandom32 and random32 prefixes for these functions, the confusion\nis getting worse.\n\nAs a result of this renaming, \"pra","insertions":45,"deletions":37,"filepaths":{"drivers/scsi/fcoe/fcoe_ctlr.c":{"insertions":2,"deletions":2},"include/linux/random.h":{"insertions":12,"deletions":5},"lib/interval_tree_test_main.c":{"insertions":4,"deletions":3},"lib/random32.c":{"insertions":24,"deletions":24},"lib/rbtree_test.c":{"insertions":3,"deletions":3}}},"d3d47eb265c2bc6f4a6f1bc6971b84d27035b964":{"author":"Daniel Borkmann","email":"dborkman@redhat.com","date":"2014-04-03 21:49:08 UTC","message":"lib/random32.c: minor cleanups and kdoc fix\n\nThese are just some very minor and misc cleanups in the PRNG.  In\nprandom_u32() we store the result in an unsigned long which is\nunnecessary as it should be u32 instead that we get from\nprandom_u32_state().  prandom_bytes_state()'s comment is in kdoc format,\nso change it into such as it's done everywhere else.  Also, use the\nnormal comment style for the header comment.  Last but not least for\nreadability, add some newlines.\n\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nCc: Joe Perches <joe@perches.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":39,"deletions":37,"filepaths":{"lib/random32.c":{"insertions":39,"deletions":37}}},"61407f80f72970d52d4339f81c6c3cd03f4ca0f0":{"author":"Andi Kleen","email":"ak@suse.de","date":"2008-04-03 21:07:02 UTC","message":"[NET]: srandom32 fixes for networking v2\n\n- Let it update the state of all CPUs. The network stack goes\ninto pains to feed the current IP addresses in, but it is not very\neffective if that is only done for some random CPU instead of all.\nSo change it to feed bits into all CPUs.  I decided to do that lockless \nbecause well somewhat random results are ok.\n\nv2: Drop rename so that this patch doesn't depend on x86 maintainers\n\nSigned-off-by: Andi Kleen <ak@suse.de>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":9,"deletions":4,"filepaths":{"lib/random32.c":{"insertions":9,"deletions":4}}},"0125737accc5aac532719aecd80615364caa9e0f":{"author":"Daniel Borkmann","email":"dborkman@redhat.com","date":"2013-11-12 22:45:42 UTC","message":"random32: use msecs_to_jiffies for reseed timer\n\nUse msecs_to_jiffies, for these calculations as different HZ\nconsiderations are taken into account for conversion of the timer\nshot, and also it makes the code more readable.\n\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nSigned-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":6,"deletions":2,"filepaths":{"lib/random32.c":{"insertions":6,"deletions":2}}},"3796c3cbfb91ad1e3269aa0d15060f888063924b":{"author":"Shaohua Li","email":"shli@fb.com","date":"2016-09-27 15:42:42 UTC","message":"lib: clean up put_cpu_var usage\n\nput_cpu_var takes the percpu data, not the data returned from\nget_cpu_var.\n\nThis doesn't change the behavior.\n\nCc: Tejun Heo <tj@kernel.org>\nSigned-off-by: Shaohua Li <shli@fb.com>\nAcked-by: Tejun Heo <tj@kernel.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":2,"deletions":2,"filepaths":{"lib/random32.c":{"insertions":2,"deletions":2}}},"38a04b83ab3033905114d608737504e66350088b":{"author":"Philippe Mazenauer","email":"philippe.mazenauer@outlook.de","date":"2019-05-17 10:44:44 UTC","message":"lib: Correct comment of prandom_seed\n\nVariable 'entropy' was wrongly documented as 'seed', changed comment to\nreflect actual variable name.\n\n../lib/random32.c:179: warning: Function parameter or member 'entropy' not described in 'prandom_seed'\n../lib/random32.c:179: warning: Excess function parameter 'seed' description in 'prandom_seed'\n\nSigned-off-by: Philippe Mazenauer <philippe.mazenauer@outlook.de>\nAcked-by: Lee Jones <lee.jones@linaro.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":2,"deletions":2,"filepaths":{"lib/random32.c":{"insertions":2,"deletions":2}}},"24ed960abf1d50cb7834e99a0cfc081bc0656712":{"author":"Kees Cook","email":"keescook@chromium.org","date":"2017-08-28 18:28:21 UTC","message":"treewide: Switch DEFINE_TIMER callbacks to struct timer_list *\n\nThis changes all DEFINE_TIMER() callbacks to use a struct timer_list\npointer instead of unsigned long. Since the data argument has already been\nremoved, none of these callbacks are using their argument currently, so\nthis renames the argument to \"unused\".\n\nDone using the following semantic patch:\n\n@match_define_timer@\ndeclarer name DEFINE_TIMER;\nidentifier _timer, _callback;\n@@\n\n DEFINE_TIMER(_timer, _callback);\n\n@change_callback depends on match_define_timer@\nidentifier match_define_timer._callback;\ntype _origtype;\nidentifier _origarg;\n@@\n\n void\n-_callback(_origtype _origarg)\n+_callback(struct timer_list *unused)\n { ... }\n\nSigned-off-by: Kees Cook <keescook@chromium.org>","insertions":82,"deletions":82,"filepaths":{"arch/arm/mach-ixp4xx/dsmg600-setup.c":{"insertions":2,"deletions":2},"arch/arm/mach-ixp4xx/nas100d-setup.c":{"insertions":2,"deletions":2},"arch/m68k/amiga/amisound.c":{"insertions":2,"deletions":2},"arch/m68k/mac/macboing.c":{"insertions":2,"deletions":2},"arch/mips/mti-malta/malta-display.c":{"insertions":2,"deletions":2},"arch/parisc/kernel/pdc_cons.c":{"insertions":2,"deletions":2},"drivers/atm/idt77105.c":{"insertions":4,"deletions":4},"drivers/atm/iphase.c":{"insertions":2,"deletions":2},"drivers/block/ataflop.c":{"insertions":8,"deletions":8},"drivers/char/dtlk.c":{"insertions":2,"deletions":2},"drivers/char/hangcheck-timer.c":{"insertions":2,"deletions":2},"drivers/char/nwbutton.c":{"insertions":2,"deletions":2},"drivers/char/nwbutton.h":{"insertions":1,"deletions":1},"drivers/char/rtc.c":{"insertions":2,"deletions":2},"drivers/input/touchscreen/s3c2410_ts.c":{"insertions":1,"deletions":1},"drivers/net/wireless/atmel/at76c50x-usb.c":{"insertions":2,"deletions":2},"drivers/staging/speakup/main.c":{"insertions":2,"deletions":2},"drivers/staging/speakup/synth.c":{"insertions":1,"deletions":1},"drivers/tty/cyclades.c":{"insertions":2,"deletions":2},"drivers/tty/isicom.c":{"insertions":2,"deletions":2},"drivers/tty/moxa.c":{"insertions":2,"deletions":2},"drivers/tty/rocket.c":{"insertions":2,"deletions":2},"drivers/tty/vt/keyboard.c":{"insertions":1,"deletions":1},"drivers/tty/vt/vt.c":{"insertions":2,"deletions":2},"drivers/watchdog/alim7101_wdt.c":{"insertions":2,"deletions":2},"drivers/watchdog/machzwd.c":{"insertions":2,"deletions":2},"drivers/watchdog/mixcomwd.c":{"insertions":2,"deletions":2},"drivers/watchdog/sbc60xxwdt.c":{"insertions":2,"deletions":2},"drivers/watchdog/sc520_wdt.c":{"insertions":2,"deletions":2},"drivers/watchdog/via_wdt.c":{"insertions":2,"deletions":2},"drivers/watchdog/w83877f_wdt.c":{"insertions":2,"deletions":2},"drivers/xen/grant-table.c":{"insertions":2,"deletions":2},"fs/pstore/platform.c":{"insertions":2,"deletions":2},"kernel/irq/spurious.c":{"insertions":2,"deletions":2},"lib/random32.c":{"insertions":2,"deletions":2},"net/decnet/dn_route.c":{"insertions":2,"deletions":2},"net/ipv6/ip6_flowlabel.c":{"insertions":2,"deletions":2},"net/netrom/nr_loopback.c":{"insertions":2,"deletions":2},"security/keys/gc.c":{"insertions":2,"deletions":2}}},"66b251422be7cb39e7619fee647724720f74d1f7":{"author":"Daniel Borkmann","email":"dborkman@redhat.com","date":"2013-11-12 22:45:41 UTC","message":"random32: add __init prefix to prandom_start_seed_timer\n\nWe only call that in functions annotated with __init, so add __init\nprefix in prandom_start_seed_timer() as well, so that the kernel can\nmake use of this hint and we can possibly free up resources after it's\nusage. And since it's an internal function rename it to\n__prandom_start_seed_timer().\n\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nSigned-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":2,"deletions":2,"filepaths":{"lib/random32.c":{"insertions":2,"deletions":2}}},"09a6b0bc3be793ca8cba580b7992d73e9f68f15d":{"author":"Thibaut Sautereau","email":"thibaut.sautereau@ssi.gouv.fr","date":"2020-10-02 15:16:11 UTC","message":"random32: Restore __latent_entropy attribute on net_rand_state\n\nCommit f227e3ec3b5c (\"random32: update the net random state on interrupt\nand activity\") broke compilation and was temporarily fixed by Linus in\n83bdc7275e62 (\"random32: remove net_rand_state from the latent entropy\ngcc plugin\") by entirely moving net_rand_state out of the things handled\nby the latent_entropy GCC plugin.\n\nFrom what I understand when reading the plugin code, using the\n__latent_entropy attribute on a declaration was the wrong part and\nsimply keeping the __latent_entropy attribute on the variable definition\nwas the correct fix.\n\nFixes: 83bdc7275e62 (\"random32: remove net_rand_state from the latent entropy gcc plugin\")\nAcked-by: Willy Tarreau <w@1wt.eu>\nCc: Emese Revfy <re.emese@gmail.com>\nSigned-off-by: Thibaut Sautereau <thibaut.sautereau@ssi.gouv.fr>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":1,"deletions":1,"filepaths":{"lib/random32.c":{"insertions":1,"deletions":1}}},"94c7eb54c4b8e81618ec79f414fe1ca5767f9720":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2020-08-13 17:06:43 UTC","message":"random32: add a tracepoint for prandom_u32()\n\nThere has been some heat around prandom_u32() lately, and some people\nwere wondering if there was a simple way to determine how often\nit was used, before considering making it maybe 10 times more expensive.\n\nThis tracepoint exports the generated pseudo random value.\n\nTested:\n\nperf list | grep prandom_u32\n  random:prandom_u32                                 [Tracepoint event]\n\nperf record -a [-g] [-C1] -e random:prandom_u32 sleep 1\n[ perf record: Woken up 0 times to write data ]\n[ perf record: Captured and wrote 259.748 MB perf.data (924087 samples) ]\n\nperf report --nochildren\n    ...\n    97.67%  ksoftirqd/1     [kernel.vmlinux]  [k] prandom_u32\n            |\n            ---prandom_u32\n               prandom_u32\n               |\n               |--48.86%--tcp_v4_syn_recv_sock\n               |          tcp_check_req\n               |          tcp_v4_rcv\n               |          ...\n                --48.81%--tcp_conn_request\n                    ","insertions":19,"deletions":0,"filepaths":{"include/trace/events/random.h":{"insertions":17,"deletions":0},"lib/random32.c":{"insertions":2,"deletions":0}}},"697f8d0348a652593d195a13dd1067d9df911a82":{"author":"Stephen Hemminger","email":"shemminger@vyatta.com","date":"2008-07-30 23:29:19 UTC","message":"random32: seeding improvement\n\nThe rationale is:\n   * use u32 consistently\n   * no need to do LCG on values from (better) get_random_bytes\n   * use more data from get_random_bytes for secondary seeding\n   * don't reduce state space on srandom32()\n   * enforce state variable initialization restrictions\n\nNote: the second paper has a version of random32() with even longer period\nand a version of random64() if needed.\n\nSigned-off-by: Stephen Hemminger <shemminger@vyatta.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>","insertions":27,"deletions":21,"filepaths":{"lib/random32.c":{"insertions":27,"deletions":21}}},"1d27e3e2252ba9d949ca82fbdb73cde102cb2067":{"author":"Kees Cook","email":"keescook@chromium.org","date":"2017-10-04 23:27:04 UTC","message":"timer: Remove expires and data arguments from DEFINE_TIMER\n\nDrop the arguments from the macro and adjust all callers with the\nfollowing script:\n\n  perl -pi -e 's/DEFINE_TIMER\\((.*), 0, 0\\);/DEFINE_TIMER($1);/g;' \\\n    $(git grep DEFINE_TIMER | cut -d: -f1 | sort -u | grep -v timer.h)\n\nSigned-off-by: Kees Cook <keescook@chromium.org>\nAcked-by: Geert Uytterhoeven <geert@linux-m68k.org> # for m68k parts\nAcked-by: Guenter Roeck <linux@roeck-us.net> # for watchdog parts\nAcked-by: David S. Miller <davem@davemloft.net> # for networking parts\nAcked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nAcked-by: Kalle Valo <kvalo@codeaurora.org> # for wireless parts\nAcked-by: Arnd Bergmann <arnd@arndb.de>\nCc: linux-mips@linux-mips.org\nCc: Petr Mladek <pmladek@suse.com>\nCc: Benjamin Herrenschmidt <benh@kernel.crashing.org>\nCc: Lai Jiangshan <jiangshanlai@gmail.com>\nCc: Sebastian Reichel <sre@kernel.org>\nCc: Kalle Valo <kvalo@qca.qualcomm.com>\nCc: Paul Mackerras <paulus@samba.org>\nCc: Pavel Machek <","insertions":54,"deletions":54,"filepaths":{"arch/arm/mach-ixp4xx/dsmg600-setup.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/nas100d-setup.c":{"insertions":1,"deletions":1},"arch/m68k/amiga/amisound.c":{"insertions":1,"deletions":1},"arch/m68k/mac/macboing.c":{"insertions":1,"deletions":1},"arch/mips/mti-malta/malta-display.c":{"insertions":1,"deletions":1},"arch/parisc/kernel/pdc_cons.c":{"insertions":1,"deletions":1},"arch/s390/mm/cmm.c":{"insertions":1,"deletions":1},"drivers/atm/idt77105.c":{"insertions":2,"deletions":2},"drivers/atm/iphase.c":{"insertions":1,"deletions":1},"drivers/block/ataflop.c":{"insertions":4,"deletions":4},"drivers/char/dtlk.c":{"insertions":1,"deletions":1},"drivers/char/hangcheck-timer.c":{"insertions":1,"deletions":1},"drivers/char/nwbutton.c":{"insertions":1,"deletions":1},"drivers/char/rtc.c":{"insertions":1,"deletions":1},"drivers/input/touchscreen/s3c2410_ts.c":{"insertions":1,"deletions":1},"drivers/net/cris/eth_v10.c":{"insertions":3,"deletions":3},"drivers/net/hamradio/yam.c":{"insertions":1,"deletions":1},"drivers/net/wireless/atmel/at76c50x-usb.c":{"insertions":1,"deletions":1},"drivers/staging/speakup/main.c":{"insertions":1,"deletions":1},"drivers/staging/speakup/synth.c":{"insertions":1,"deletions":1},"drivers/tty/cyclades.c":{"insertions":1,"deletions":1},"drivers/tty/isicom.c":{"insertions":1,"deletions":1},"drivers/tty/moxa.c":{"insertions":1,"deletions":1},"drivers/tty/rocket.c":{"insertions":1,"deletions":1},"drivers/tty/vt/keyboard.c":{"insertions":1,"deletions":1},"drivers/tty/vt/vt.c":{"insertions":1,"deletions":1},"drivers/watchdog/alim7101_wdt.c":{"insertions":1,"deletions":1},"drivers/watchdog/machzwd.c":{"insertions":1,"deletions":1},"drivers/watchdog/mixcomwd.c":{"insertions":1,"deletions":1},"drivers/watchdog/sbc60xxwdt.c":{"insertions":1,"deletions":1},"drivers/watchdog/sc520_wdt.c":{"insertions":1,"deletions":1},"drivers/watchdog/via_wdt.c":{"insertions":1,"deletions":1},"drivers/watchdog/w83877f_wdt.c":{"insertions":1,"deletions":1},"drivers/xen/grant-table.c":{"insertions":1,"deletions":1},"fs/pstore/platform.c":{"insertions":1,"deletions":1},"include/linux/timer.h":{"insertions":2,"deletions":2},"kernel/irq/spurious.c":{"insertions":1,"deletions":1},"lib/random32.c":{"insertions":1,"deletions":1},"net/atm/mpc.c":{"insertions":1,"deletions":1},"net/decnet/dn_route.c":{"insertions":1,"deletions":1},"net/ipv6/ip6_flowlabel.c":{"insertions":1,"deletions":1},"net/netrom/nr_loopback.c":{"insertions":1,"deletions":1},"security/keys/gc.c":{"insertions":1,"deletions":1},"sound/oss/midibuf.c":{"insertions":1,"deletions":1},"sound/oss/soundcard.c":{"insertions":1,"deletions":1},"sound/oss/sys_timer.c":{"insertions":1,"deletions":1},"sound/oss/uart6850.c":{"insertions":1,"deletions":1}}},"421f91d21ad6f799dc7b489bb33cc560ccc56f98":{"author":"Uwe Kleine-König","email":"u.kleine-koenig@pengutronix.de","date":"2010-06-11 10:17:00 UTC","message":"fix typos concerning \"initiali[zs]e\"\n\nSigned-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>\nSigned-off-by: Jiri Kosina <jkosina@suse.cz>","insertions":90,"deletions":90,"filepaths":{"arch/arm/mach-msm/acpuclock-arm11.c":{"insertions":2,"deletions":2},"arch/arm/mach-u300/gpio.c":{"insertions":1,"deletions":1},"arch/arm/plat-s3c24xx/clock.c":{"insertions":1,"deletions":1},"arch/arm/plat-samsung/clock.c":{"insertions":1,"deletions":1},"arch/h8300/kernel/timer/itu.c":{"insertions":1,"deletions":1},"arch/h8300/kernel/timer/timer16.c":{"insertions":1,"deletions":1},"arch/h8300/kernel/timer/timer8.c":{"insertions":1,"deletions":1},"arch/ia64/kvm/kvm-ia64.c":{"insertions":3,"deletions":3},"arch/ia64/sn/kernel/setup.c":{"insertions":1,"deletions":1},"arch/sparc/boot/btfixupprep.c":{"insertions":2,"deletions":2},"arch/x86/kernel/apic/apic.c":{"insertions":1,"deletions":1},"arch/x86/kernel/head32.c":{"insertions":1,"deletions":1},"drivers/crypto/amcc/crypto4xx_reg_def.h":{"insertions":1,"deletions":1},"drivers/dma/at_hdmac.c":{"insertions":1,"deletions":1},"drivers/gpu/drm/savage/savage_bci.c":{"insertions":1,"deletions":1},"drivers/ide/ide-gd.c":{"insertions":1,"deletions":1},"drivers/infiniband/hw/ehca/hcp_if.h":{"insertions":1,"deletions":1},"drivers/input/misc/ad714x.c":{"insertions":1,"deletions":1},"drivers/media/video/ov511.c":{"insertions":1,"deletions":1},"drivers/media/video/zoran/zoran.h":{"insertions":1,"deletions":1},"drivers/media/video/zoran/zr36050.c":{"insertions":1,"deletions":1},"drivers/media/video/zoran/zr36060.c":{"insertions":1,"deletions":1},"drivers/message/fusion/mptbase.c":{"insertions":2,"deletions":2},"drivers/mtd/nand/denali.c":{"insertions":1,"deletions":1},"drivers/net/3c527.c":{"insertions":2,"deletions":2},"drivers/net/appletalk/ipddp.c":{"insertions":1,"deletions":1},"drivers/net/hp100.c":{"insertions":1,"deletions":1},"drivers/net/ibm_newemac/core.c":{"insertions":1,"deletions":1},"drivers/net/ksz884x.c":{"insertions":1,"deletions":1},"drivers/net/ll_temac_main.c":{"insertions":1,"deletions":1},"drivers/net/tulip/dmfe.c":{"insertions":10,"deletions":10},"drivers/net/wimax/i2400m/control.c":{"insertions":1,"deletions":1},"drivers/parisc/ccio-dma.c":{"insertions":2,"deletions":2},"drivers/pcmcia/sa11xx_base.c":{"insertions":1,"deletions":1},"drivers/scsi/advansys.c":{"insertions":1,"deletions":1},"drivers/scsi/aic94xx/aic94xx_seq.c":{"insertions":2,"deletions":2},"drivers/scsi/bfa/vport.c":{"insertions":1,"deletions":1},"drivers/scsi/pm8001/pm8001_hwi.c":{"insertions":1,"deletions":1},"drivers/scsi/qla4xxx/ql4_init.c":{"insertions":1,"deletions":1},"drivers/serial/sn_console.c":{"insertions":3,"deletions":3},"drivers/staging/comedi/drivers/usbdux.c":{"insertions":1,"deletions":1},"drivers/staging/octeon/cvmx-cmd-queue.c":{"insertions":3,"deletions":3},"drivers/staging/pohmelfs/inode.c":{"insertions":1,"deletions":1},"drivers/staging/rt2860/common/cmm_wpa.c":{"insertions":2,"deletions":2},"drivers/staging/rtl8192e/r8190_rtl8256.c":{"insertions":3,"deletions":3},"drivers/usb/serial/kl5kusb105.c":{"insertions":1,"deletions":1},"drivers/usb/wusbcore/wusbhc.c":{"insertions":1,"deletions":1},"drivers/uwb/wlp/wss-lc.c":{"insertions":1,"deletions":1},"drivers/video/carminefb.c":{"insertions":1,"deletions":1},"drivers/video/tgafb.c":{"insertions":1,"deletions":1},"fs/befs/linuxvfs.c":{"insertions":1,"deletions":1},"fs/ecryptfs/crypto.c":{"insertions":1,"deletions":1},"fs/ext4/extents.c":{"insertions":1,"deletions":1},"fs/ext4/super.c":{"insertions":1,"deletions":1},"fs/freevxfs/vxfs_super.c":{"insertions":1,"deletions":1},"fs/ocfs2/super.c":{"insertions":1,"deletions":1},"fs/reiserfs/inode.c":{"insertions":1,"deletions":1},"lib/random32.c":{"insertions":1,"deletions":1},"net/netfilter/ipvs/ip_vs_lblc.c":{"insertions":1,"deletions":1},"net/netfilter/ipvs/ip_vs_lblcr.c":{"insertions":1,"deletions":1},"net/sctp/associola.c":{"insertions":1,"deletions":1},"net/sctp/protocol.c":{"insertions":1,"deletions":1},"security/smack/smack_lsm.c":{"insertions":1,"deletions":1},"sound/pci/trident/trident_main.c":{"insertions":1,"deletions":1},"sound/soc/fsl/mpc8610_hpcd.c":{"insertions":1,"deletions":1},"sound/soc/soc-core.c":{"insertions":1,"deletions":1}}},"0dd50d1b0c003ab4f17597fe1198bb57a2fadc06":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2015-10-07 23:20:37 UTC","message":"random32: add prandom_seed_full_state helper\n\nFactor out the full reseed handling code that populates the state\nthrough get_random_bytes() and runs prandom_warmup(). The resulting\nprandom_seed_full_state() will be used later on in more than the\ncurrent __prandom_reseed() user. Fix also two minor whitespace\nissues along the way.\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":21,"deletions":16,"filepaths":{"lib/random32.c":{"insertions":21,"deletions":16}}},"22cf8419f1319ff87ec759d0ebdff4cbafaee832":{"author":"J. Bruce Fields","email":"bfields@redhat.com","date":"2020-06-16 20:43:18 UTC","message":"nfsd: apply umask on fs without ACL support\n\nThe server is failing to apply the umask when creating new objects on\nfilesystems without ACL support.\n\nTo reproduce this, you need to use NFSv4.2 and a client and server\nrecent enough to support umask, and you need to export a filesystem that\nlacks ACL support (for example, ext4 with the \"noacl\" mount option).\n\nFilesystems with ACL support are expected to take care of the umask\nthemselves (usually by calling posix_acl_create).\n\nFor filesystems without ACL support, this is up to the caller of\nvfs_create(), vfs_mknod(), or vfs_mkdir().\n\nReported-by: Elliott Mitchell <ehem+debian@m5p.com>\nReported-by: Salvatore Bonaccorso <carnil@debian.org>\nTested-by: Salvatore Bonaccorso <carnil@debian.org>\nFixes: 47057abde515 (\"nfsd: add support for the umask attribute\")\nCc: stable@vger.kernel.org\nSigned-off-by: J. Bruce Fields <bfields@redhat.com>","insertions":6,"deletions":0,"filepaths":{"fs/nfsd/vfs.c":{"insertions":6,"deletions":0}}},"088406bcf66d6c7fd8a5c04c00aa410ae9077403":{"author":"J. Bruce Fields","email":"bfields@fieldses.org","date":"2006-11-09 01:44:59 UTC","message":"[PATCH] nfsd: fix spurious error return from nfsd_create in async case\n\nCommit 6264d69d7df654ca64f625e9409189a0e50734e9 modified the nfsd_create()\nerror handling in such a way that nfsd_create will usually return\nnfserr_perm even when succesful, if the export has the async export option.\n\nThis introduced a regression that could cause mkdir() to always return a\npermissions error, even though the directory in question was actually\nsuccesfully created.\n\nSigned-off-by: J. Bruce Fields <bfields@citi.umich.edu>\nAcked-by: NeilBrown <neilb@suse.de>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>","insertions":1,"deletions":1,"filepaths":{"fs/nfsd/vfs.c":{"insertions":1,"deletions":1}}},"4a55c1017b8dcfd0554734ce3f19374d5b522d59":{"author":"Jan Kara","email":"jack@suse.cz","date":"2012-06-12 14:20:33 UTC","message":"nfsd: Push mnt_want_write() outside of i_mutex\n\nWhen mnt_want_write() starts to handle freezing it will get a full lock\nsemantics requiring proper lock ordering. So push mnt_want_write() call\nconsistently outside of i_mutex.\n\nCC: linux-nfs@vger.kernel.org\nCC: \"J. Bruce Fields\" <bfields@fieldses.org>\nSigned-off-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>","insertions":64,"deletions":46,"filepaths":{"fs/nfsd/nfs4recover.c":{"insertions":5,"deletions":4},"fs/nfsd/nfsfh.c":{"insertions":1,"deletions":0},"fs/nfsd/nfsproc.c":{"insertions":8,"deletions":1},"fs/nfsd/vfs.c":{"insertions":40,"deletions":39},"fs/nfsd/vfs.h":{"insertions":9,"deletions":2},"include/linux/nfsd/nfsfh.h":{"insertions":1,"deletions":0}}},"312b63fba9e88a0dcf800834b8ede8716bcc1e17":{"author":"Al Viro","email":"viro@zeniv.linux.org.uk","date":"2012-06-10 22:09:36 UTC","message":"don't pass nameidata * to vfs_create()\n\nall we want is a boolean flag, same as the method gets now\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>","insertions":11,"deletions":10,"filepaths":{"fs/cachefiles/namei.c":{"insertions":1,"deletions":1},"fs/ecryptfs/inode.c":{"insertions":1,"deletions":1},"fs/namei.c":{"insertions":5,"deletions":4},"fs/nfsd/vfs.c":{"insertions":2,"deletions":2},"include/linux/fs.h":{"insertions":1,"deletions":1},"ipc/mqueue.c":{"insertions":1,"deletions":1}}},"463c3197263bd26ac59a00d2484990e17e35c50e":{"author":"Dave Hansen","email":"haveblue@us.ibm.com","date":"2008-02-15 22:37:57 UTC","message":"[PATCH] r/o bind mounts: get callers of vfs_mknod/create/mkdir()\n\nThis takes care of all of the direct callers of vfs_mknod().\nSince a few of these cases also handle normal file creation\nas well, this also covers some calls to vfs_create().\n\nSo that we don't have to make three mnt_want/drop_write()\ncalls inside of the switch statement, we move some of its\nlogic outside of the switch and into a helper function\nsuggested by Christoph.\n\nThis also encapsulates a fix for mknod(S_IFREG) that Miklos\nfound.\n\n[AV: merged mkdir handling, added missing nfsd pieces]\n\nAcked-by: Al Viro <viro@ZenIV.linux.org.uk>\nSigned-off-by: Christoph Hellwig <hch@infradead.org>\nSigned-off-by: Dave Hansen <haveblue@us.ibm.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>","insertions":67,"deletions":13,"filepaths":{"fs/namei.c":{"insertions":37,"deletions":11},"fs/nfsd/nfs4recover.c":{"insertions":4,"deletions":0},"fs/nfsd/vfs.c":{"insertions":22,"deletions":2},"net/unix/af_unix.c":{"insertions":4,"deletions":0}}},"bad0dcffc21d17a07dbb83a2bf764f35a57feba5":{"author":"Al Viro","email":"viro@zeniv.linux.org.uk","date":"2011-11-23 17:03:18 UTC","message":"new helpers: fh_{want,drop}_write()\n\nA bunch of places in nfsd does mnt_{want,drop}_write on vfsmount of\nexport of given fhandle.  Switched to obvious inlined helpers...\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>","insertions":29,"deletions":19,"filepaths":{"fs/nfsd/nfs4proc.c":{"insertions":2,"deletions":2},"fs/nfsd/vfs.c":{"insertions":17,"deletions":17},"fs/nfsd/vfs.h":{"insertions":10,"deletions":0}}},"82fd2138a5ffd7e0d4320cdb669e115ee976a26e":{},"f44d04e696feaf13d192d942c4f14ad2e117065a":{"author":"Ilya Dryomov","email":"idryomov@gmail.com","date":"2020-09-03 11:24:11 UTC","message":"rbd: require global CAP_SYS_ADMIN for mapping and unmapping\n\nIt turns out that currently we rely only on sysfs attribute\npermissions:\n\n  $ ll /sys/bus/rbd/{add*,remove*}\n  --w------- 1 root root 4096 Sep  3 20:37 /sys/bus/rbd/add\n  --w------- 1 root root 4096 Sep  3 20:37 /sys/bus/rbd/add_single_major\n  --w------- 1 root root 4096 Sep  3 20:37 /sys/bus/rbd/remove\n  --w------- 1 root root 4096 Sep  3 20:38 /sys/bus/rbd/remove_single_major\n\nThis means that images can be mapped and unmapped (i.e. block devices\ncan be created and deleted) by a UID 0 process even after it drops all\nprivileges or by any process with CAP_DAC_OVERRIDE in its user namespace\nas long as UID 0 is mapped into that user namespace.\n\nBe consistent with other virtual block devices (loop, nbd, dm, md, etc)\nand require CAP_SYS_ADMIN in the initial user namespace for mapping and\nunmapping, and also for dumping the configuration string and refreshing\nthe image header.\n\nCc: stable@vger.kernel.org\nSigned-off-by: Ilya Dryomov ","insertions":12,"deletions":0,"filepaths":{"drivers/block/rbd.c":{"insertions":12,"deletions":0}}},"602adf400201636e95c3fed9f31fba54a3d7e844":{"author":"Yehuda Sadeh","email":"yehuda@hq.newdream.net","date":"2010-08-12 23:11:25 UTC","message":"rbd: introduce rados block device (rbd), based on libceph\n\nThe rados block device (rbd), based on osdblk, creates a block device\nthat is backed by objects stored in the Ceph distributed object storage\ncluster.  Each device consists of a single metadata object and data\nstriped over many data objects.\n\nThe rbd driver supports read-only snapshots.\n\nSigned-off-by: Yehuda Sadeh <yehuda@hq.newdream.net>\nSigned-off-by: Sage Weil <sage@newdream.net>","insertions":1944,"deletions":2,"filepaths":{"MAINTAINERS":{"insertions":9,"deletions":0},"drivers/block/Kconfig":{"insertions":17,"deletions":0},"drivers/block/Makefile":{"insertions":1,"deletions":0},"drivers/block/rbd.c":{"insertions":1843,"deletions":0},"drivers/block/rbd_types.h":{"insertions":73,"deletions":0},"net/ceph/debugfs.c":{"insertions":1,"deletions":2}}},"0d6d1e9c2e970c26e8a1ec4932ffffacec90e0b4":{"author":"Mike Christie","email":"mchristi@redhat.com","date":"2016-08-18 16:38:45 UTC","message":"rbd: add 'config_info' sysfs rbd device attribute\n\nExport the info used to setup the rbd image, so it can be used to remap\nthe image.\n\nSigned-off-by: Mike Christie <mchristi@redhat.com>\n[idryomov@gmail.com: do_rbd_add() EH]\nSigned-off-by: Ilya Dryomov <idryomov@gmail.com>","insertions":2,"deletions":26,"filepaths":{"Documentation/ABI/testing/sysfs-bus-rbd":{"insertions":0,"deletions":5},"drivers/block/rbd.c":{"insertions":2,"deletions":21}}},"0276dca6c1ecb9a665645ff573e70685a57759af":{"author":"Mike Christie","email":"mchristi@redhat.com","date":"2016-08-18 16:38:45 UTC","message":"rbd: add force close option\n\nThis adds a force close option, so we can force the unmapping\nof a rbd device that is open. If a path/device is blacklisted, apps\nlike multipathd can map a new device and then unmap the old one.\nThe unmapping cleanup would then be handled by the generic hotunplug\ncode paths in multipahd like is done for iSCSI, FC/FCOE, SAS, etc.\n\nSigned-off-by: Mike Christie <mchristi@redhat.com>\nSigned-off-by: Ilya Dryomov <idryomov@gmail.com>","insertions":12,"deletions":33,"filepaths":{"Documentation/ABI/testing/sysfs-bus-rbd":{"insertions":3,"deletions":7},"drivers/block/rbd.c":{"insertions":9,"deletions":26}}},"593a9e7b34fa62d703b473ae923a9681556cdf74":{"author":"Alex Elder","email":"elder@dreamhost.com","date":"2012-02-07 18:03:37 UTC","message":"rbd: small changes\n\nHere is another set of small code tidy-ups:\n    - Define SECTOR_SHIFT and SECTOR_SIZE, and use these symbolic\n      names throughout.  Tell the blk_queue system our physical\n      block size, in the (unlikely) event we want to use something\n      other than the default.\n    - Delete the definition of struct rbd_info, which is never used.\n    - Move the definition of dev_to_rbd() down in its source file,\n      just above where it gets first used, and change its name to\n      dev_to_rbd_dev().\n    - Replace an open-coded operation in rbd_dev_release() to use\n      dev_to_rbd_dev() instead.\n    - Calculate the segment size for a given rbd_device just once in\n      rbd_init_disk().\n    - Use the '%zd' conversion specifier in rbd_snap_size_show(),\n      since the value formatted is a size_t.\n    - Switch to the '%llu' conversion specifier in rbd_snap_id_show().\n      since the value formatted is unsigned.\n\nSigned-off-by: Alex Elder <elder@dreamhost.com>","insertions":37,"deletions":52,"filepaths":{"drivers/block/rbd.c":{"insertions":33,"deletions":52},"drivers/block/rbd_types.h":{"insertions":4,"deletions":0}}},"b813623ab95d0b4bbeb22e160bd5461965d0c571":{"author":"Alex Elder","email":"elder@inktank.com","date":"2012-07-25 14:32:41 UTC","message":"rbd: return obj version in __rbd_refresh_header()\n\nAdd a new parameter to __rbd_refresh_header() through which the\nversion of the header object is passed back to the caller.  In most\ncases this isn't needed.  The main motivation is to normalize\n(almost) all calls to __rbd_refresh_header() so they are all\nwrapped immediately by mutex_lock()/mutex_unlock().\n\nSigned-off-by: Alex Elder <elder@inktank.com>\nReviewed-by: Josh Durgin <josh.durgin@inktank.com> ","insertions":14,"deletions":11,"filepaths":{"drivers/block/rbd.c":{"insertions":14,"deletions":11}}},"cc4a38bdd587a1843540989f262feb7bdc43c468":{"author":"Alex Elder","email":"elder@inktank.com","date":"2013-04-30 05:44:33 UTC","message":"rbd: more version parameter removal\n\nContinued from the last patch, more parameters that can go away\nbecause we no longer have a need to track object versions.\n\nSigned-off-by: Alex Elder <elder@inktank.com>\nReviewed-by: Josh Durgin <josh.durgin@inktank.com>","insertions":21,"deletions":18,"filepaths":{"drivers/block/rbd.c":{"insertions":21,"deletions":18}}},"e627db085e0dab7744b68f3c927be6ed6df2f7f9":{"author":"Alex Elder","email":"elder@inktank.com","date":"2013-05-06 12:40:30 UTC","message":"rbd: revalidate only for mapping size changes\n\nThis commit:\n    d98df63e rbd: revalidate_disk upon rbd resize\ninstituted a call to revalidate_disk() to notify interested parties\nthat a mapped image has changed size.  This works well, as long as\nthe the rbd device doesn't map a snapshot.\n\nA snapshot will never change size.  However, the base image the\nsnapshot is associated with can, and it can do so while the snapshot\nis mapped.\n\nThe problem is that the test for the size is looking at the size of\nthe base image, not the size of the mapped snapshot.  This patch\ncorrects that.\n\nUpdate the warning message shown in the event of error, and move\nit into the callers.\n\nThis resolves:\n    http://tracker.ceph.com/issues/4911\n\nSigned-off-by: Alex Elder <elder@inktank.com>\nReviewed-by: Josh Durgin <josh.durgin@inktank.com>","insertions":7,"deletions":9,"filepaths":{"drivers/block/rbd.c":{"insertions":7,"deletions":9}}},"52bb1f9bed796127e8b446b12e5b834026241cdd":{"author":"Ilya Dryomov","email":"ilya.dryomov@inktank.com","date":"2014-07-23 13:11:20 UTC","message":"rbd: harden rbd_dev_refresh() and callers a bit\n\nRecently discovered watch/notify problems showed that we really can't\nignore errors in anything refresh related.  Alas, currently there is\nnot much we can do in response to those errors, except print warnings.\n\nSigned-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>\nReviewed-by: Alex Elder <elder@linaro.org>","insertions":5,"deletions":16,"filepaths":{"drivers/block/rbd.c":{"insertions":5,"deletions":16}}},"9d3997fdf4c82adfb37a4886a21eaa513ee071b6":{"author":"Alex Elder","email":"elder@inktank.com","date":"2012-10-26 04:34:42 UTC","message":"rbd: don't pass rbd_dev to rbd_get_client()\n\nThe only reason rbd_dev is passed to rbd_get_client() is so its\nrbd_client field can get assigned.  Instead, just return the\nrbd_client pointer as a result and have the caller do the\nassignment.\n\nChange rbd_put_client() so it takes an rbd_client structure,\nso follows the more typical symmetry with rbd_get_client().\n\nSigned-off-by: Alex Elder <elder@inktank.com>\nReviewed-by: Josh Durgin <josh.durgin@inktank.com>","insertions":18,"deletions":15,"filepaths":{"drivers/block/rbd.c":{"insertions":18,"deletions":15}}},"b51c83c241910f66b0c9a2ab17cd57db8109a98f":{"author":"Ilya Dryomov","email":"idryomov@gmail.com","date":"2015-10-15 13:38:57 UTC","message":"rbd: return -ENOMEM instead of pool id if rbd_dev_create() fails\n\nReturning pool id (i.e. >= 0) from a sysfs ->store() callback makes\nuserspace think it needs to retry the write.  Fix it - it's a leftover\nfrom the times when the equivalent of rbd_dev_create() was the first\naction in rbd_add().\n\nSigned-off-by: Ilya Dryomov <idryomov@gmail.com>","insertions":2,"deletions":4,"filepaths":{"drivers/block/rbd.c":{"insertions":2,"deletions":4}}},"0d8189e175380c029a309f05f44e82bacf1c0404":{"author":"Alex Elder","email":"elder@inktank.com","date":"2013-04-27 14:59:30 UTC","message":"rbd: don't clean up watch in device release function\n\nCurrently, a watch on an rbd device header object gets torn down\nwhen its final Linux device reference gets dropped.  Instead, tear\nit down when removing the device.  If an error occurs cleaning up\nthe watch event when unmapping, abort the unmap request.\n\nAll images (including parents) still get watch requests set up, so\ntear these down also, in rbd_dev_remove_parent().  For now, ignore\nany errors that occur in this case.\n\nGet rid of local variable \"rc\" in rbd_remove(); use \"ret\" instead\n(they both somehow ended up defined in the function and only one is\nneeded).\n\nSigned-off-by: Alex Elder <elder@inktank.com>\nReviewed-by: Josh Durgin <josh.durgin@inktank.com>","insertions":8,"deletions":23,"filepaths":{"drivers/block/rbd.c":{"insertions":8,"deletions":23}}},"17743798d81238ab13050e8e2833699b54e15467":{"author":"Muchun Song","email":"songmuchun@bytedance.com","date":"2020-09-04 23:36:13 UTC","message":"mm/hugetlb: fix a race between hugetlb sysctl handlers\n\nThere is a race between the assignment of `table->data` and write value\nto the pointer of `table->data` in the __do_proc_doulongvec_minmax() on\nthe other thread.\n\n  CPU0:                                 CPU1:\n                                        proc_sys_write\n  hugetlb_sysctl_handler                  proc_sys_call_handler\n  hugetlb_sysctl_handler_common             hugetlb_sysctl_handler\n    table->data = &tmp;                       hugetlb_sysctl_handler_common\n                                                table->data = &tmp;\n      proc_doulongvec_minmax\n        do_proc_doulongvec_minmax           sysctl_head_finish\n          __do_proc_doulongvec_minmax         unuse_table\n            i = table->data;\n            *i = val;  // corrupt CPU1's stack\n\nFix this by duplicating the `table`, and only update the duplicate of\nit.  And introduce a helper of proc_hugetlb_doulongvec_minmax() to\nsimplify the code.\n\nThe following oops was","insertions":20,"deletions":6,"filepaths":{"mm/hugetlb.c":{"insertions":20,"deletions":6}}},"e5ff215941d59f8ae6bf58f6428dc5c26745a612":{"author":"Andi Kleen","email":"ak@suse.de","date":"2008-07-24 04:27:42 UTC","message":"hugetlb: multiple hstates for multiple page sizes\n\nAdd basic support for more than one hstate in hugetlbfs.  This is the key\nto supporting multiple hugetlbfs page sizes at once.\n\n- Rather than a single hstate, we now have an array, with an iterator\n- default_hstate continues to be the struct hstate which we use by default\n- Add functions for architectures to register new hstates\n\n[akpm@linux-foundation.org: coding-style fixes]\nAcked-by: Adam Litke <agl@us.ibm.com>\nAcked-by: Nishanth Aravamudan <nacc@us.ibm.com>\nSigned-off-by: Andi Kleen <ak@suse.de>\nSigned-off-by: Nick Piggin <npiggin@suse.de>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":142,"deletions":33,"filepaths":{"include/linux/hugetlb.h":{"insertions":16,"deletions":3},"kernel/sysctl.c":{"insertions":5,"deletions":3},"mm/hugetlb.c":{"insertions":121,"deletions":27}}},"8a21346058ad946134b6ddfeb5de975c3cfcf5da":{"author":"Nishanth Aravamudan","email":"nacc@us.ibm.com","date":"2008-07-26 02:44:37 UTC","message":"hugetlb: fix CONFIG_SYSCTL=n build\n\nFixes a build failure reported by Alan Cox:\n\nmm/hugetlb.c: In function `hugetlb_acct_memory': mm/hugetlb.c:1507:\nerror: implicit declaration of function `cpuset_mems_nr'\n\nAlso reverts Ingo's\n\n    commit e44d1b2998d62a1f2f4d7eb17b56ba396535509f\n    Author: Ingo Molnar <mingo@elte.hu>\n    Date:   Fri Jul 25 12:57:41 2008 +0200\n\n        mm/hugetlb.c: fix build failure with !CONFIG_SYSCTL\n\nwhich fixed the build error but added some unused-static-function warnings.\n\nSigned-off-by: Nishanth Aravamudan <nacc@us.ibm.com>\nCc: Alan Cox <alan@lxorguk.ukuu.org.uk>\nCc: Ingo Molnar <mingo@elte.hu>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":12,"deletions":12,"filepaths":{"mm/hugetlb.c":{"insertions":12,"deletions":12}}},"06808b0827e1cd14eedc96bac2655d5b37ac246c":{"author":"Lee Schermerhorn","email":"lee.schermerhorn@hp.com","date":"2009-12-15 01:58:21 UTC","message":"hugetlb: derive huge pages nodes allowed from task mempolicy\n\nThis patch derives a \"nodes_allowed\" node mask from the numa mempolicy of\nthe task modifying the number of persistent huge pages to control the\nallocation, freeing and adjusting of surplus huge pages when the pool page\ncount is modified via the new sysctl or sysfs attribute\n\"nr_hugepages_mempolicy\".  The nodes_allowed mask is derived as follows:\n\n* For \"default\" [NULL] task mempolicy, a NULL nodemask_t pointer\n  is produced.  This will cause the hugetlb subsystem to use\n  node_online_map as the \"nodes_allowed\".  This preserves the\n  behavior before this patch.\n* For \"preferred\" mempolicy, including explicit local allocation,\n  a nodemask with the single preferred node will be produced.\n  \"local\" policy will NOT track any internode migrations of the\n  task adjusting nr_hugepages.\n* For \"bind\" and \"interleave\" policy, the mempolicy's nodemask\n  will be used.\n* Other than to inform the construction of the nodes_allowed node\n  ma","insertions":153,"deletions":15,"filepaths":{"include/linux/hugetlb.h":{"insertions":6,"deletions":0},"include/linux/mempolicy.h":{"insertions":3,"deletions":0},"kernel/sysctl.c":{"insertions":13,"deletions":2},"mm/hugetlb.c":{"insertions":84,"deletions":13},"mm/mempolicy.c":{"insertions":47,"deletions":0}}},"08d4a24659f1284f33e574211435aa12ce968477":{"author":"Michal Hocko","email":"mhocko@suse.cz","date":"2011-01-13 23:47:26 UTC","message":"hugetlb: check the return value of string conversion in sysctl handler\n\nproc_doulongvec_minmax may fail if the given buffer doesn't represent a\nvalid number.  If we provide something invalid we will initialize the\nresulting value (nr_overcommit_huge_pages in this case) to a random value\nfrom the stack.\n\nThe issue was introduced by a3d0c6aa when the default handler has been\nreplaced by the helper function where we do not check the return value.\n\nReproducer:\necho \"\" > /proc/sys/vm/nr_overcommit_hugepages\n\n[akpm@linux-foundation.org: correctly propagate proc_doulongvec_minmax return code]\nSigned-off-by: Michal Hocko <mhocko@suse.cz>\nCc: CAI Qian <caiqian@redhat.com>\nCc: Nishanth Aravamudan <nacc@us.ibm.com>\nCc: Andrea Arcangeli <aarcange@redhat.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":12,"deletions":6,"filepaths":{"mm/hugetlb.c":{"insertions":12,"deletions":6}}},"32927393dc1ccd60fb2bdc05b9e8e88753761469":{"author":"Christoph Hellwig","email":"hch@lst.de","date":"2020-04-24 06:43:38 UTC","message":"sysctl: pass kernel pointers to ->proc_handler\n\nInstead of having all the sysctl handlers deal with user pointers, which\nis rather hairy in terms of the BPF interaction, copy the input to and\nfrom  userspace in common code.  This also means that the strings are\nalways NUL-terminated by the common code, making the API a little bit\nsafer.\n\nAs most handler just pass through the data to one of the common handlers\na lot of the changes are mechnical.\n\nSigned-off-by: Christoph Hellwig <hch@lst.de>\nAcked-by: Andrey Ignatov <rdna@fb.com>\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>","insertions":458,"deletions":653,"filepaths":{"arch/arm64/kernel/armv8_deprecated.c":{"insertions":1,"deletions":1},"arch/arm64/kernel/fpsimd.c":{"insertions":1,"deletions":2},"arch/mips/lasat/sysctl.c":{"insertions":5,"deletions":8},"arch/s390/appldata/appldata_base.c":{"insertions":5,"deletions":6},"arch/s390/kernel/debug.c":{"insertions":1,"deletions":1},"arch/s390/kernel/topology.c":{"insertions":1,"deletions":1},"arch/s390/mm/cmm.c":{"insertions":5,"deletions":7},"arch/x86/kernel/itmt.c":{"insertions":1,"deletions":2},"drivers/cdrom/cdrom.c":{"insertions":1,"deletions":1},"drivers/char/random.c":{"insertions":1,"deletions":1},"drivers/macintosh/mac_hid.c":{"insertions":1,"deletions":2},"drivers/parport/procfs.c":{"insertions":18,"deletions":21},"fs/dcache.c":{"insertions":1,"deletions":1},"fs/drop_caches.c":{"insertions":1,"deletions":1},"fs/file_table.c":{"insertions":2,"deletions":2},"fs/fscache/main.c":{"insertions":1,"deletions":2},"fs/inode.c":{"insertions":1,"deletions":1},"fs/proc/proc_sysctl.c":{"insertions":29,"deletions":18},"fs/quota/dquot.c":{"insertions":1,"deletions":1},"fs/xfs/xfs_sysctl.c":{"insertions":2,"deletions":2},"include/linux/bpf-cgroup.h":{"insertions":4,"deletions":5},"include/linux/compaction.h":{"insertions":1,"deletions":1},"include/linux/fs.h":{"insertions":3,"deletions":3},"include/linux/ftrace.h":{"insertions":1,"deletions":2},"include/linux/hugetlb.h":{"insertions":7,"deletions":8},"include/linux/kprobes.h":{"insertions":1,"deletions":1},"include/linux/latencytop.h":{"insertions":2,"deletions":2},"include/linux/mm.h":{"insertions":6,"deletions":6},"include/linux/mmzone.h":{"insertions":11,"deletions":12},"include/linux/nmi.h":{"insertions":5,"deletions":10},"include/linux/perf_event.h":{"insertions":5,"deletions":8},"include/linux/printk.h":{"insertions":1,"deletions":1},"include/linux/sched/sysctl.h":{"insertions":15,"deletions":29},"include/linux/security.h":{"insertions":1,"deletions":1},"include/linux/sysctl.h":{"insertions":22,"deletions":31},"include/linux/timer.h":{"insertions":1,"deletions":2},"include/linux/vmstat.h":{"insertions":4,"deletions":4},"include/linux/writeback.h":{"insertions":11,"deletions":17},"ipc/ipc_sysctl.c":{"insertions":5,"deletions":5},"ipc/mq_sysctl.c":{"insertions":2,"deletions":2},"kernel/bpf/cgroup.c":{"insertions":12,"deletions":23},"kernel/events/callchain.c":{"insertions":1,"deletions":1},"kernel/events/core.c":{"insertions":2,"deletions":4},"kernel/kprobes.c":{"insertions":1,"deletions":1},"kernel/latencytop.c":{"insertions":2,"deletions":2},"kernel/pid_namespace.c":{"insertions":1,"deletions":1},"kernel/printk/printk.c":{"insertions":1,"deletions":1},"kernel/sched/core.c":{"insertions":4,"deletions":5},"kernel/sched/fair.c":{"insertions":1,"deletions":2},"kernel/sched/rt.c":{"insertions":4,"deletions":6},"kernel/sched/topology.c":{"insertions":1,"deletions":1},"kernel/seccomp.c":{"insertions":1,"deletions":1},"kernel/sysctl.c":{"insertions":91,"deletions":148},"kernel/time/timer.c":{"insertions":1,"deletions":2},"kernel/trace/trace.c":{"insertions":1,"deletions":1},"kernel/umh.c":{"insertions":1,"deletions":1},"kernel/utsname_sysctl.c":{"insertions":1,"deletions":1},"kernel/watchdog.c":{"insertions":6,"deletions":6},"mm/compaction.c":{"insertions":1,"deletions":1},"mm/hugetlb.c":{"insertions":4,"deletions":5},"mm/page-writeback.c":{"insertions":6,"deletions":10},"mm/page_alloc.c":{"insertions":10,"deletions":20},"mm/util.c":{"insertions":4,"deletions":6},"mm/vmstat.c":{"insertions":2,"deletions":2},"net/bridge/br_netfilter_hooks.c":{"insertions":1,"deletions":1},"net/core/neighbour.c":{"insertions":13,"deletions":15},"net/core/sysctl_net_core.c":{"insertions":10,"deletions":17},"net/decnet/dn_dev.c":{"insertions":3,"deletions":4},"net/decnet/sysctl_net_decnet.c":{"insertions":8,"deletions":19},"net/ipv4/devinet.c":{"insertions":3,"deletions":6},"net/ipv4/route.c":{"insertions":1,"deletions":2},"net/ipv4/sysctl_net_ipv4.c":{"insertions":15,"deletions":23},"net/ipv6/addrconf.c":{"insertions":13,"deletions":20},"net/ipv6/ndisc.c":{"insertions":2,"deletions":1},"net/ipv6/route.c":{"insertions":2,"deletions":3},"net/ipv6/sysctl_net_ipv6.c":{"insertions":1,"deletions":2},"net/mpls/af_mpls.c":{"insertions":2,"deletions":3},"net/netfilter/ipvs/ip_vs_ctl.c":{"insertions":3,"deletions":3},"net/netfilter/nf_conntrack_standalone.c":{"insertions":1,"deletions":1},"net/netfilter/nf_log.c":{"insertions":1,"deletions":1},"net/phonet/sysctl.c":{"insertions":1,"deletions":2},"net/rds/tcp.c":{"insertions":2,"deletions":4},"net/sctp/sysctl.c":{"insertions":11,"deletions":21},"net/sunrpc/sysctl.c":{"insertions":13,"deletions":16},"net/sunrpc/xprtrdma/svc_rdma.c":{"insertions":3,"deletions":4},"security/apparmor/lsm.c":{"insertions":1,"deletions":1},"security/min_addr.c":{"insertions":1,"deletions":1},"security/yama/yama_lsm.c":{"insertions":1,"deletions":1}}},"7e24969022cbd61ddc586f14824fc205661bb124":{"author":"Ming Lei","email":"ming.lei@redhat.com","date":"2020-08-17 10:00:55 UTC","message":"block: allow for_each_bvec to support zero len bvec\n\nBlock layer usually doesn't support or allow zero-length bvec. Since\ncommit 1bdc76aea115 (\"iov_iter: use bvec iterator to implement\niterate_bvec()\"), iterate_bvec() switches to bvec iterator. However,\nAl mentioned that 'Zero-length segments are not disallowed' in iov_iter.\n\nFixes for_each_bvec() so that it can move on after seeing one zero\nlength bvec.\n\nFixes: 1bdc76aea115 (\"iov_iter: use bvec iterator to implement iterate_bvec()\")\nReported-by: syzbot <syzbot+61acc40a49a3e46e25ea@syzkaller.appspotmail.com>\nSigned-off-by: Ming Lei <ming.lei@redhat.com>\nTested-by: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nCc: Matthew Wilcox <willy@infradead.org>\nCc: <stable@vger.kernel.org>\nLink: https://www.mail-archive.com/linux-kernel@vger.kernel.org/msg2262077.html\nSigned-off-by: Jens Axboe <axboe@kernel.dk>","insertions":8,"deletions":1,"filepaths":{"include/linux/bvec.h":{"insertions":8,"deletions":1}}},"8fc554552c9d89e7bf76cd4cbc0085648bf3125b":{"author":"Ming Lei","email":"ming.lei@canonical.com","date":"2016-06-09 16:00:58 UTC","message":"block: move bvec iterator into include/linux/bvec.h\n\nbvec iterator helpers should be used to implement by\niterate_bvec():lib/iov_iter.c too, and move them into\none header, so that we can keep bvec iterator header\nout of CONFIG_BLOCK. Then we can remove the reinventing\nof wheel in iterate_bvec().\n\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Ming Lei <ming.lei@canonical.com>\nTested-by: Hannes Reinecke <hare@suse.com>\nSigned-off-by: Jens Axboe <axboe@fb.com>","insertions":75,"deletions":50,"filepaths":{"include/linux/bio.h":{"insertions":1,"deletions":50},"include/linux/bvec.h":{"insertions":74,"deletions":0}}},"b1fb2c52b2d85f51f36f1661409f9aeef94265ff":{"author":"Dmitry Monakhov","email":"dmonakhov@openvz.org","date":"2017-06-29 18:31:13 UTC","message":"block: guard bvec iteration logic\n\nCurrently if some one try to advance bvec beyond it's size we simply\ndump WARN_ONCE and continue to iterate beyond bvec array boundaries.\nThis simply means that we endup dereferencing/corrupting random memory\nregion.\n\nSane reaction would be to propagate error back to calling context\nBut bvec_iter_advance's calling context is not always good for error\nhandling. For safity reason let truncate iterator size to zero which\nwill break external iteration loop which prevent us from unpredictable\nmemory range corruption. And even it caller ignores an error, it will\ncorrupt it's own bvecs, not others.\n\nThis patch does:\n- Return error back to caller with hope that it will react on this\n- Truncate iterator size\n\nCode was added long time ago here 4550dd6c, luckily no one hit it\nin real life :)\n\nSigned-off-by: Dmitry Monakhov <dmonakhov@openvz.org>\nReviewed-by: Ming Lei <ming.lei@redhat.com>\nReviewed-by: Martin K. Petersen <martin.petersen@oracle.com>\n[hch: switch t","insertions":16,"deletions":8,"filepaths":{"drivers/nvdimm/blk.c":{"insertions":2,"deletions":1},"drivers/nvdimm/btt.c":{"insertions":2,"deletions":1},"include/linux/bio.h":{"insertions":3,"deletions":1},"include/linux/bvec.h":{"insertions":9,"deletions":5}}},"77e70d351db7de07a46ac49b87a6c3c7a60fca7e":{"author":"Dmitry Torokhov","email":"dmitry.torokhov@gmail.com","date":"2020-10-26 20:36:17 UTC","message":"Input: sunkbd - avoid use-after-free in teardown paths\n\nWe need to make sure we cancel the reinit work before we tear down the\ndriver structures.\n\nReported-by: Bodong Zhao <nopitydays@gmail.com>\nTested-by: Bodong Zhao <nopitydays@gmail.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>","insertions":33,"deletions":8,"filepaths":{"drivers/input/keyboard/sunkbd.c":{"insertions":33,"deletions":8}}},"3c42f0c3dde8feb59fc87df45cadb847d5511c0a":{"author":"Dmitry Torokhov","email":"dtor_core@ameritech.net","date":"2005-09-15 07:01:45 UTC","message":"[PATCH] drivers/input/keyboard: convert to dynamic input_dev allocation\n\nInput: convert drivers/input/keyboard to dynamic input_dev allocation\n\nThis is required for input_dev sysfs integration\n\nSigned-off-by: Dmitry Torokhov <dtor@mail.ru>\nSigned-off-by: Greg Kroah-Hartman <gregkh@suse.de>","insertions":449,"deletions":431,"filepaths":{"drivers/input/keyboard/amikbd.c":{"insertions":29,"deletions":30},"drivers/input/keyboard/atkbd.c":{"insertions":102,"deletions":86},"drivers/input/keyboard/corgikbd.c":{"insertions":39,"deletions":35},"drivers/input/keyboard/lkkbd.c":{"insertions":64,"deletions":64},"drivers/input/keyboard/maple_keyb.c":{"insertions":31,"deletions":41},"drivers/input/keyboard/newtonkbd.c":{"insertions":39,"deletions":44},"drivers/input/keyboard/spitzkbd.c":{"insertions":45,"deletions":34},"drivers/input/keyboard/sunkbd.c":{"insertions":62,"deletions":55},"drivers/input/keyboard/xtkbd.c":{"insertions":38,"deletions":42}}},"7cac9cd935533e52e277c0c8799a8ba16c24f250":{"author":"Dmitry Torokhov","email":"dmitry.torokhov@gmail.com","date":"2009-09-04 04:57:48 UTC","message":"Input: sunkbd - fix formatting\n\nAdjust the way 'switch' statements were indented; make sure we stay\nunder 80 ciolumns.\n\nSigned-off-by: Dmitry Torokhov <dtor@mail.ru>","insertions":73,"deletions":55,"filepaths":{"drivers/input/keyboard/sunkbd.c":{"insertions":73,"deletions":55}}},"9bc83dcff8fab1f22048c8f82deb3198ec44d53f":{"author":"Fabrice Knevez","email":"nuxdoors@cegetel.net","date":"2006-12-14 23:20:29 UTC","message":"[SUNKBD]: Fix sunkbd_enable(sunkbd, 0); obvious.\n\n\"sunkbd_enable(sunkbd, 0);\" has no effect. Adding \"sunkbd->enabled =\nenable\" in sunkbd_enable (obvious)\n\nSigned-off-by: Fabrice Knevez <nuxdoors@cegetel.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":1,"deletions":1,"filepaths":{"drivers/input/keyboard/sunkbd.c":{"insertions":1,"deletions":1}}},"26896f01467a28651f7a536143fe5ac8449d4041":{"author":"Qingyu Li","email":"ieatmuttonchuan@gmail.com","date":"2020-08-10 01:51:00 UTC","message":"net/nfc/rawsock.c: add CAP_NET_RAW check.\n\nWhen creating a raw AF_NFC socket, CAP_NET_RAW needs to be checked first.\n\nSigned-off-by: Qingyu Li <ieatmuttonchuan@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":5,"deletions":2,"filepaths":{"net/nfc/rawsock.c":{"insertions":5,"deletions":2}}},"23b7869c0fd08d73c9f83a2db88a13312d6198bb":{"author":"Lauro Ramos Venancio","email":"lauro.venancio@openbossa.org","date":"2011-07-01 22:31:36 UTC","message":"NFC: add the NFC socket raw protocol\n\nThis socket protocol is used to perform data exchange with NFC\ntargets.\n\nSigned-off-by: Lauro Ramos Venancio <lauro.venancio@openbossa.org>\nSigned-off-by: Aloisio Almeida Jr <aloisio.almeida@openbossa.org>\nSigned-off-by: Samuel Ortiz <sameo@linux.intel.com>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>","insertions":388,"deletions":2,"filepaths":{"include/linux/nfc.h":{"insertions":12,"deletions":1},"net/nfc/Makefile":{"insertions":1,"deletions":1},"net/nfc/core.c":{"insertions":7,"deletions":0},"net/nfc/nfc.h":{"insertions":14,"deletions":0},"net/nfc/rawsock.c":{"insertions":354,"deletions":0}}},"57be1f3f3ec1ccab6432615ca161c4c9ece2a2aa":{"author":"Hiren Tandel","email":"hirent@marvell.com","date":"2014-05-05 10:43:31 UTC","message":"NFC: Add RAW socket type support for SOCKPROTO_RAW\n\nThis allows for a more generic NFC sniffing by using SOCKPROTO_RAW\nSOCK_RAW to read RAW NFC frames. This is for sniffing anything but LLCP\n(HCI, NCI, etc...).\n\nSigned-off-by: Hiren Tandel <hirent@marvell.com>\nSigned-off-by: Rahul Tank <rahult@marvell.com>\nSigned-off-by: Samuel Ortiz <sameo@linux.intel.com>","insertions":117,"deletions":15,"filepaths":{"include/net/nfc/nfc.h":{"insertions":3,"deletions":0},"include/uapi/linux/nfc.h":{"insertions":12,"deletions":4},"net/nfc/llcp_commands.c":{"insertions":1,"deletions":1},"net/nfc/llcp_core.c":{"insertions":6,"deletions":5},"net/nfc/nfc.h":{"insertions":6,"deletions":0},"net/nfc/rawsock.c":{"insertions":89,"deletions":5}}},"11aa9c28b4209242a9de0a661a7b3405adb568a0":{"author":"Eric W. Biederman","email":"ebiederm@xmission.com","date":"2015-05-09 02:09:13 UTC","message":"net: Pass kern from net_proto_family.create to sk_alloc\n\nIn preparation for changing how struct net is refcounted\non kernel sockets pass the knowledge that we are creating\na kernel socket from sock_create_kern through to sk_alloc.\n\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":109,"deletions":108,"filepaths":{"crypto/af_alg.c":{"insertions":2,"deletions":2},"drivers/isdn/mISDN/socket.c":{"insertions":6,"deletions":6},"drivers/net/macvtap.c":{"insertions":1,"deletions":1},"drivers/net/ppp/pppoe.c":{"insertions":2,"deletions":2},"drivers/net/ppp/pppox.c":{"insertions":1,"deletions":1},"drivers/net/ppp/pptp.c":{"insertions":2,"deletions":2},"drivers/net/tun.c":{"insertions":1,"deletions":1},"include/linux/if_pppox.h":{"insertions":1,"deletions":1},"include/net/af_vsock.h":{"insertions":1,"deletions":1},"include/net/llc_conn.h":{"insertions":1,"deletions":1},"include/net/sock.h":{"insertions":1,"deletions":1},"net/appletalk/ddp.c":{"insertions":1,"deletions":1},"net/atm/common.c":{"insertions":2,"deletions":2},"net/atm/common.h":{"insertions":1,"deletions":1},"net/atm/pvc.c":{"insertions":1,"deletions":1},"net/atm/svc.c":{"insertions":1,"deletions":1},"net/ax25/af_ax25.c":{"insertions":2,"deletions":2},"net/bluetooth/bnep/sock.c":{"insertions":1,"deletions":1},"net/bluetooth/cmtp/sock.c":{"insertions":1,"deletions":1},"net/bluetooth/hci_sock.c":{"insertions":1,"deletions":1},"net/bluetooth/hidp/sock.c":{"insertions":1,"deletions":1},"net/bluetooth/l2cap_sock.c":{"insertions":5,"deletions":5},"net/bluetooth/rfcomm/sock.c":{"insertions":4,"deletions":4},"net/bluetooth/sco.c":{"insertions":4,"deletions":4},"net/caif/caif_socket.c":{"insertions":1,"deletions":1},"net/can/af_can.c":{"insertions":1,"deletions":1},"net/core/sock.c":{"insertions":2,"deletions":1},"net/decnet/af_decnet.c":{"insertions":4,"deletions":4},"net/ieee802154/socket.c":{"insertions":1,"deletions":1},"net/ipv4/af_inet.c":{"insertions":1,"deletions":1},"net/ipv6/af_inet6.c":{"insertions":1,"deletions":1},"net/ipx/af_ipx.c":{"insertions":1,"deletions":1},"net/irda/af_irda.c":{"insertions":1,"deletions":1},"net/iucv/af_iucv.c":{"insertions":5,"deletions":5},"net/key/af_key.c":{"insertions":1,"deletions":1},"net/l2tp/l2tp_ppp.c":{"insertions":2,"deletions":2},"net/llc/af_llc.c":{"insertions":1,"deletions":1},"net/llc/llc_conn.c":{"insertions":3,"deletions":3},"net/netlink/af_netlink.c":{"insertions":5,"deletions":6},"net/netrom/af_netrom.c":{"insertions":2,"deletions":2},"net/nfc/af_nfc.c":{"insertions":1,"deletions":1},"net/nfc/llcp.h":{"insertions":1,"deletions":1},"net/nfc/llcp_core.c":{"insertions":1,"deletions":1},"net/nfc/llcp_sock.c":{"insertions":4,"deletions":4},"net/nfc/nfc.h":{"insertions":1,"deletions":1},"net/nfc/rawsock.c":{"insertions":2,"deletions":2},"net/packet/af_packet.c":{"insertions":1,"deletions":1},"net/phonet/af_phonet.c":{"insertions":1,"deletions":1},"net/phonet/pep.c":{"insertions":1,"deletions":1},"net/rds/af_rds.c":{"insertions":1,"deletions":1},"net/rose/af_rose.c":{"insertions":2,"deletions":2},"net/rxrpc/af_rxrpc.c":{"insertions":1,"deletions":1},"net/sctp/ipv6.c":{"insertions":1,"deletions":1},"net/sctp/protocol.c":{"insertions":1,"deletions":1},"net/tipc/socket.c":{"insertions":1,"deletions":1},"net/unix/af_unix.c":{"insertions":4,"deletions":4},"net/vmw_vsock/af_vsock.c":{"insertions":4,"deletions":3},"net/vmw_vsock/vmci_transport.c":{"insertions":1,"deletions":1},"net/x25/af_x25.c":{"insertions":4,"deletions":4}}},"77377064c3a94911339f13ce113b3abf265e06da":{"author":"Vitaly Kuznetsov","email":"vkuznets@redhat.com","date":"2020-10-24 08:13:24 UTC","message":"KVM: ioapic: break infinite recursion on lazy EOI\n\nDuring shutdown the IOAPIC trigger mode is reset to edge triggered\nwhile the vfio-pci INTx is still registered with a resampler.\nThis allows us to get into an infinite loop:\n\nioapic_set_irq\n  -> ioapic_lazy_update_eoi\n  -> kvm_ioapic_update_eoi_one\n  -> kvm_notify_acked_irq\n  -> kvm_notify_acked_gsi\n  -> (via irq_acked fn ptr) irqfd_resampler_ack\n  -> kvm_set_irq\n  -> (via set fn ptr) kvm_set_ioapic_irq\n  -> kvm_ioapic_set_irq\n  -> ioapic_set_irq\n\nCommit 8be8f932e3db (\"kvm: ioapic: Restrict lazy EOI update to\nedge-triggered interrupts\", 2020-05-04) acknowledges that this recursion\nloop exists and tries to avoid it at the call to ioapic_lazy_update_eoi,\nbut at this point the scenario is already set, we have an edge interrupt\nwith resampler on the same gsi.\n\nFortunately, the only user of irq ack notifiers (in addition to resamplefd)\nis i8254 timer interrupt reinjection.  These are edge-triggered, so in\nprinciple they would need the call t","insertions":1,"deletions":4,"filepaths":{"arch/x86/kvm/ioapic.c":{"insertions":1,"deletions":4}}},"f458d039db7e8518041db4169d657407e3217008":{"author":"Suravee Suthikulpanit","email":"suravee.suthikulpanit@amd.com","date":"2019-11-14 20:15:19 UTC","message":"kvm: ioapic: Lazy update IOAPIC EOI\n\nIn-kernel IOAPIC does not receive EOI with AMD SVM AVIC\nsince the processor accelerate write to APIC EOI register and\ndoes not trap if the interrupt is edge-triggered.\n\nWorkaround this by lazy check for pending APIC EOI at the time when\nsetting new IOPIC irq, and update IOAPIC EOI if no pending APIC EOI.\n\nSigned-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":39,"deletions":0,"filepaths":{"arch/x86/kvm/ioapic.c":{"insertions":39,"deletions":0}}},"f232326f6966cf2a1d1db7bc917a4ce5f9f55f76":{"author":"Piotr Krysiuk","email":"piotras@gmail.com","date":"2021-03-16 08:47:02 UTC","message":"bpf: Prohibit alu ops for pointer types not defining ptr_limit\n\nThe purpose of this patch is to streamline error propagation and in particular\nto propagate retrieve_ptr_limit() errors for pointer types that are not defining\na ptr_limit such that register-based alu ops against these types can be rejected.\n\nThe main rationale is that a gap has been identified by Piotr in the existing\nprotection against speculatively out-of-bounds loads, for example, in case of\nctx pointers, unprivileged programs can still perform pointer arithmetic. This\ncan be abused to execute speculatively out-of-bounds loads without restrictions\nand thus extract contents of kernel memory.\n\nFix this by rejecting unprivileged programs that attempt any pointer arithmetic\non unprotected pointer types. The two affected ones are pointer to ctx as well\nas pointer to map. Field access to a modified ctx' pointer is rejected at a\nlater point in time in the verifier, and 7c6967326267 (\"bpf: Permit map_ptr\narithmetic with opcode ","insertions":10,"deletions":6,"filepaths":{"kernel/bpf/verifier.c":{"insertions":10,"deletions":6}}},"979d63d50c0c0f7bc537bf821e056cc9fe5abd38":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2019-01-02 23:58:34 UTC","message":"bpf: prevent out of bounds speculation on pointer arithmetic\n\nJann reported that the original commit back in b2157399cc98\n(\"bpf: prevent out-of-bounds speculation\") was not sufficient\nto stop CPU from speculating out of bounds memory access:\nWhile b2157399cc98 only focussed on masking array map access\nfor unprivileged users for tail calls and data access such\nthat the user provided index gets sanitized from BPF program\nand syscall side, there is still a more generic form affected\nfrom BPF programs that applies to most maps that hold user\ndata in relation to dynamic map access when dealing with\nunknown scalars or \"slow\" known scalars as access offset, for\nexample:\n\n  - Load a map value pointer into R6\n  - Load an index into R7\n  - Do a slow computation (e.g. with a memory dependency) that\n    loads a limit into R8 (e.g. load the limit from a map for\n    high latency, then mask it to make the verifier happy)\n  - Exit if R7 >= R8 (mispredicted branch)\n  - Load R0 = R6[R7]\n  - Load R0 = R6[","insertions":189,"deletions":6,"filepaths":{"include/linux/bpf_verifier.h":{"insertions":10,"deletions":0},"kernel/bpf/verifier.c":{"insertions":179,"deletions":6}}},"d3bd7413e0ca40b60cf60d4003246d067cafdeda":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2019-01-05 23:54:37 UTC","message":"bpf: fix sanitation of alu op with pointer / scalar type from different paths\n\nWhile 979d63d50c0c (\"bpf: prevent out of bounds speculation on pointer\narithmetic\") took care of rejecting alu op on pointer when e.g. pointer\ncame from two different map values with different map properties such as\nvalue size, Jann reported that a case was not covered yet when a given\nalu op is used in both \"ptr_reg += reg\" and \"numeric_reg += reg\" from\ndifferent branches where we would incorrectly try to sanitize based\non the pointer's limit. Catch this corner case and reject the program\ninstead.\n\nFixes: 979d63d50c0c (\"bpf: prevent out of bounds speculation on pointer arithmetic\")\nReported-by: Jann Horn <jannh@google.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>","insertions":49,"deletions":13,"filepaths":{"include/linux/bpf_verifier.h":{"insertions":1,"deletions":0},"kernel/bpf/verifier.c":{"insertions":48,"deletions":13}}},"10d2bb2e6b1d8c4576c56a748f697dbeb8388899":{"author":"Piotr Krysiuk","email":"piotras@gmail.com","date":"2021-03-16 07:20:16 UTC","message":"bpf: Fix off-by-one for area size in creating mask to left\n\nretrieve_ptr_limit() computes the ptr_limit for registers with stack and\nmap_value type. ptr_limit is the size of the memory area that is still\nvalid / in-bounds from the point of the current position and direction\nof the operation (add / sub). This size will later be used for masking\nthe operation such that attempting out-of-bounds access in the speculative\ndomain is redirected to remain within the bounds of the current map value.\n\nWhen masking to the right the size is correct, however, when masking to\nthe left, the size is off-by-one which would lead to an incorrect mask\nand thus incorrect arithmetic operation in the non-speculative domain.\nPiotr found that if the resulting alu_limit value is zero, then the\nBPF_MOV32_IMM() from the fixup_bpf_calls() rewrite will end up loading\n0xffffffff into AX instead of sign-extending to the full 64 bit range,\nand as a result, this allows abuse for executing speculatively out-of-\nbounds lo","insertions":2,"deletions":2,"filepaths":{"kernel/bpf/verifier.c":{"insertions":2,"deletions":2}}},"5b9fbeb75b6a98955f628e205ac26689bcb1383e":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2020-10-07 13:48:58 UTC","message":"bpf: Fix scalar32_min_max_or bounds tracking\n\nSimon reported an issue with the current scalar32_min_max_or() implementation.\nThat is, compared to the other 32 bit subreg tracking functions, the code in\nscalar32_min_max_or() stands out that it's using the 64 bit registers instead\nof 32 bit ones. This leads to bounds tracking issues, for example:\n\n  [...]\n  8: R0=map_value(id=0,off=0,ks=4,vs=48,imm=0) R10=fp0 fp-8=mmmmmmmm\n  8: (79) r1 = *(u64 *)(r0 +0)\n   R0=map_value(id=0,off=0,ks=4,vs=48,imm=0) R10=fp0 fp-8=mmmmmmmm\n  9: R0=map_value(id=0,off=0,ks=4,vs=48,imm=0) R1_w=inv(id=0) R10=fp0 fp-8=mmmmmmmm\n  9: (b7) r0 = 1\n  10: R0_w=inv1 R1_w=inv(id=0) R10=fp0 fp-8=mmmmmmmm\n  10: (18) r2 = 0x600000002\n  12: R0_w=inv1 R1_w=inv(id=0) R2_w=inv25769803778 R10=fp0 fp-8=mmmmmmmm\n  12: (ad) if r1 < r2 goto pc+1\n   R0_w=inv1 R1_w=inv(id=0,umin_value=25769803778) R2_w=inv25769803778 R10=fp0 fp-8=mmmmmmmm\n  13: R0_w=inv1 R1_w=inv(id=0,umin_value=25769803778) R2_w=inv25769803778 R10=fp0 fp-8=mmmmmmmm\n  ","insertions":4,"deletions":4,"filepaths":{"kernel/bpf/verifier.c":{"insertions":4,"deletions":4}}},"3f50f132d8400e129fc9eb68b5020167ef80a244":{"author":"John Fastabend","email":"john.fastabend@gmail.com","date":"2020-03-30 21:36:39 UTC","message":"bpf: Verifier, do explicit ALU32 bounds tracking\n\nIt is not possible for the current verifier to track ALU32 and JMP ops\ncorrectly. This can result in the verifier aborting with errors even though\nthe program should be verifiable. BPF codes that hit this can work around\nit by changin int variables to 64-bit types, marking variables volatile,\netc. But this is all very ugly so it would be better to avoid these tricks.\n\nBut, the main reason to address this now is do_refine_retval_range() was\nassuming return values could not be negative. Once we fixed this code that\nwas previously working will no longer work. See do_refine_retval_range()\npatch for details. And we don't want to suddenly cause programs that used\nto work to fail.\n\nThe simplest example code snippet that illustrates the problem is likely\nthis,\n\n 53: w8 = w0                    // r8 <- [0, S32_MAX],\n                                // w8 <- [-S32_MIN, X]\n 54: w8 <s 0                    // r8 <- [0, U32_MAX]\n                       ","insertions":869,"deletions":281,"filepaths":{"include/linux/bpf_verifier.h":{"insertions":4,"deletions":0},"include/linux/limits.h":{"insertions":1,"deletions":0},"include/linux/tnum.h":{"insertions":12,"deletions":0},"kernel/bpf/tnum.c":{"insertions":15,"deletions":0},"kernel/bpf/verifier.c":{"insertions":837,"deletions":281}}},"07721feee46b4b248402133228235318199b05ec":{"author":"Paolo Bonzini","email":"pbonzini@redhat.com","date":"2020-02-04 23:26:29 UTC","message":"KVM: nVMX: Don't emulate instructions in guest mode\n\nvmx_check_intercept is not yet fully implemented. To avoid emulating\ninstructions disallowed by the L1 hypervisor, refuse to emulate\ninstructions by default.\n\nCc: stable@vger.kernel.org\n[Made commit, added commit msg - Oliver]\nSigned-off-by: Oliver Upton <oupton@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":1,"deletions":1,"filepaths":{"arch/x86/kvm/vmx/vmx.c":{"insertions":1,"deletions":1}}},"35a571346a94fb93b5b3b6a599675ef3384bc75c":{"author":"Oliver Upton","email":"oupton@google.com","date":"2020-02-04 23:26:31 UTC","message":"KVM: nVMX: Check IO instruction VM-exit conditions\n\nConsult the 'unconditional IO exiting' and 'use IO bitmaps' VM-execution\ncontrols when checking instruction interception. If the 'use IO bitmaps'\nVM-execution control is 1, check the instruction access against the IO\nbitmaps to determine if the instruction causes a VM-exit.\n\nSigned-off-by: Oliver Upton <oupton@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":52,"deletions":7,"filepaths":{"arch/x86/kvm/vmx/nested.c":{"insertions":1,"deletions":1},"arch/x86/kvm/vmx/vmx.c":{"insertions":51,"deletions":6}}},"e71237d3ff1abf9f3388337cfebf53b96df2020d":{"author":"Oliver Upton","email":"oupton@google.com","date":"2020-02-04 23:26:30 UTC","message":"KVM: nVMX: Refactor IO bitmap checks into helper function\n\nChecks against the IO bitmap are useful for both instruction emulation\nand VM-exit reflection. Refactor the IO bitmap checks into a helper\nfunction.\n\nSigned-off-by: Oliver Upton <oupton@google.com>\nReviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":27,"deletions":14,"filepaths":{"arch/x86/kvm/vmx/nested.c":{"insertions":25,"deletions":14},"arch/x86/kvm/vmx/nested.h":{"insertions":2,"deletions":0}}},"8a76d7f25f8f24fc5a328c8e15e4a7313cf141b9":{"author":"Joerg Roedel","email":"joerg.roedel@amd.com","date":"2011-04-04 10:39:27 UTC","message":"KVM: x86: Add x86 callback for intercept check\n\nThis patch adds a callback into kvm_x86_ops so that svm and\nvmx code can do intercept checks on emulated instructions.\n\nSigned-off-by: Joerg Roedel <joerg.roedel@amd.com>\nSigned-off-by: Avi Kivity <avi@redhat.com>","insertions":74,"deletions":11,"filepaths":{"arch/x86/include/asm/kvm_emulate.h":{"insertions":20,"deletions":2},"arch/x86/include/asm/kvm_host.h":{"insertions":7,"deletions":0},"arch/x86/kvm/emulate.c":{"insertions":26,"deletions":6},"arch/x86/kvm/svm.c":{"insertions":9,"deletions":0},"arch/x86/kvm/vmx.c":{"insertions":9,"deletions":0},"arch/x86/kvm/x86.c":{"insertions":3,"deletions":3}}},"fb6d4d340e0532032c808a9933eaaa7b8de435ab":{"author":"Paolo Bonzini","email":"pbonzini@redhat.com","date":"2016-07-12 09:04:26 UTC","message":"KVM: x86: emulate RDPID\n\nThis is encoded as F3 0F C7 /7 with a register argument.  The register\nargument is the second array in the group9 GroupDual, while F3 is the\nfourth element of a Prefix.\n\nReviewed-by: Wanpeng Li <wanpeng.li@hotmail.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":42,"deletions":2,"filepaths":{"arch/x86/kvm/cpuid.c":{"insertions":6,"deletions":1},"arch/x86/kvm/emulate.c":{"insertions":21,"deletions":1},"arch/x86/kvm/vmx.c":{"insertions":15,"deletions":0}}},"7c1779384a2b2479722e90778721c40811e1b7a7":{"author":"Nadav Har'El","email":"nyh@il.ibm.com","date":"2011-05-25 20:12:04 UTC","message":"KVM: nVMX: vmcs12 checks on nested entry\n\nThis patch adds a bunch of tests of the validity of the vmcs12 fields,\naccording to what the VMX spec and our implementation allows. If fields\nwe cannot (or don't want to) honor are discovered, an entry failure is\nemulated.\n\nAccording to the spec, there are two types of entry failures: If the problem\nwas in vmcs12's host state or control fields, the VMLAUNCH instruction simply\nfails. But a problem is found in the guest state, the behavior is more\nsimilar to that of an exit.\n\nSigned-off-by: Nadav Har'El <nyh@il.ibm.com>\nSigned-off-by: Marcelo Tosatti <mtosatti@redhat.com>","insertions":109,"deletions":0,"filepaths":{"arch/x86/include/asm/vmx.h":{"insertions":8,"deletions":0},"arch/x86/kvm/vmx.c":{"insertions":101,"deletions":0}}},"55d2375e58a61be072431dd3d3c8a320f4a4a01b":{"author":"Sean Christopherson","email":"sean.j.christopherson@intel.com","date":"2018-12-03 21:53:18 UTC","message":"KVM: nVMX: Move nested code to dedicated files\n\nFrom a functional perspective, this is (supposed to be) a straight\ncopy-paste of code.  Code was moved piecemeal to nested.c as not all\ncode that could/should be moved was obviously nested-only.  The nested\ncode was then re-ordered as needed to compile, i.e. stats may not show\nthis is being a \"pure\" move despite there not being any intended changes\nin functionality.\n\nSigned-off-by: Sean Christopherson <sean.j.christopherson@intel.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":7340,"deletions":7302,"filepaths":{"arch/x86/kvm/Makefile":{"insertions":1,"deletions":1},"arch/x86/kvm/vmx/nested.c":{"insertions":5674,"deletions":0},"arch/x86/kvm/vmx/nested.h":{"insertions":282,"deletions":0},"arch/x86/kvm/vmx/vmx.c":{"insertions":1383,"deletions":7301}}},"463bfeeead97416ad2b141421f51888054dc0e18":{"author":"Miaohe Lin","email":"linmiaohe@huawei.com","date":"2020-02-14 02:44:05 UTC","message":"KVM: nVMX: Fix some obsolete comments and grammar error\n\nFix wrong variable names and grammar error in comment.\n\nSigned-off-by: Miaohe Lin <linmiaohe@huawei.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":5,"deletions":5,"filepaths":{"arch/x86/kvm/vmx/nested.c":{"insertions":5,"deletions":5}}},"fdb28619a8f033c13f5d9b9e8b5536bb6e68a2c3":{"author":"Eugene Korenevsky","email":"ekorenevsky@gmail.com","date":"2019-06-05 21:19:16 UTC","message":"kvm: vmx: segment limit check: use access length\n\nThere is an imperfection in get_vmx_mem_address(): access length is ignored\nwhen checking the limit. To fix this, pass access length as a function argument.\nThe access length is usually obvious since it is used by callers after\nget_vmx_mem_address() call, but for vmread/vmwrite it depends on the\nstate of 64-bit mode.\n\nSigned-off-by: Eugene Korenevsky <ekorenevsky@gmail.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":19,"deletions":14,"filepaths":{"arch/x86/kvm/vmx/nested.c":{"insertions":16,"deletions":12},"arch/x86/kvm/vmx/nested.h":{"insertions":1,"deletions":1},"arch/x86/kvm/vmx/vmx.c":{"insertions":2,"deletions":1}}},"03a8871add95213827e2bea84c12133ae5df952e":{"author":"Oliver Upton","email":"oupton@google.com","date":"2019-11-14 00:17:20 UTC","message":"KVM: nVMX: Expose load IA32_PERF_GLOBAL_CTRL VM-{Entry,Exit} control\n\nThe \"load IA32_PERF_GLOBAL_CTRL\" bit for VM-entry and VM-exit should\nonly be exposed to the guest if IA32_PERF_GLOBAL_CTRL is a valid MSR.\nCreate a new helper to allow pmu_refresh() to update the VM-Entry and\nVM-Exit controls to ensure PMU values are initialized when performing\nthe is_valid_msr() check.\n\nSuggested-by: Jim Mattson <jmattson@google.com>\nCo-developed-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>\nSigned-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>\nSigned-off-by: Oliver Upton <oupton@google.com>\nReviewed-by: Jim Mattson <jmattson@google.com>\nReviewed-by: Peter Shier <pshier@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":25,"deletions":0,"filepaths":{"arch/x86/kvm/vmx/nested.c":{"insertions":21,"deletions":0},"arch/x86/kvm/vmx/nested.h":{"insertions":1,"deletions":0},"arch/x86/kvm/vmx/pmu_intel.c":{"insertions":3,"deletions":0}}},"e99502f76271d6bc4e374fe368c50c67a1fd3070":{"author":"Juergen Gross","email":"jgross@suse.com","date":"2020-09-07 13:47:30 UTC","message":"xen/events: defer eoi in case of excessive number of events\n\nIn case rogue guests are sending events at high frequency it might\nhappen that xen_evtchn_do_upcall() won't stop processing events in\ndom0. As this is done in irq handling a crash might be the result.\n\nIn order to avoid that, delay further inter-domain events after some\ntime in xen_evtchn_do_upcall() by forcing eoi processing into a\nworker on the same cpu, thus inhibiting new events coming in.\n\nThe time after which eoi processing is to be delayed is configurable\nvia a new module parameter \"event_loop_timeout\" which specifies the\nmaximum event loop time in jiffies (default: 2, the value was chosen\nafter some tests showing that a value of 2 was the lowest with an\nonly slight drop of dom0 network throughput while multiple guests\nperformed an event storm).\n\nHow long eoi processing will be delayed can be specified via another\nparameter \"event_eoi_delay\" (again in jiffies, default 10, again the\nvalue was chosen after testing with di","insertions":216,"deletions":32,"filepaths":{"Documentation/admin-guide/kernel-parameters.txt":{"insertions":8,"deletions":0},"drivers/xen/events/events_2l.c":{"insertions":2,"deletions":5},"drivers/xen/events/events_base.c":{"insertions":184,"deletions":5},"drivers/xen/events/events_fifo.c":{"insertions":11,"deletions":19},"drivers/xen/events/events_internal.h":{"insertions":11,"deletions":3}}},"2ec16bc0fc7ab544f2d405fd4fdd0d717c5ec0c5":{"author":"Ryan Thibodeaux","email":"ryan.thibodeaux@starlab.io","date":"2019-03-22 18:29:57 UTC","message":"x86/xen: Add \"xen_timer_slop\" command line option\n\nAdd a new command-line option \"xen_timer_slop=<INT>\" that sets the\nminimum delta of virtual Xen timers. This commit does not change the\ndefault timer slop value for virtual Xen timers.\n\nLowering the timer slop value should improve the accuracy of virtual\ntimers (e.g., better process dispatch latency), but it will likely\nincrease the number of virtual timer interrupts (relative to the\noriginal slop setting).\n\nThe original timer slop value has not changed since the introduction\nof the Xen-aware Linux kernel code. This commit provides users an\nopportunity to tune timer performance given the refinements to\nhardware and the Xen event channel processing. It also mirrors\na feature in the Xen hypervisor - the \"timer_slop\" Xen command line\noption.\n\n[boris: updated comment describing TIMER_SLOP]\n\nSigned-off-by: Ryan Thibodeaux <ryan.thibodeaux@starlab.io>\nReviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>\nSigned-off-by: Boris Ostrovsky <bo","insertions":24,"deletions":3,"filepaths":{"Documentation/admin-guide/kernel-parameters.txt":{"insertions":7,"deletions":0},"arch/x86/xen/time.c":{"insertions":17,"deletions":3}}},"30978346372e5c43a652cfbd4533c6bd5427c33b":{"author":"Zhenzhong Duan","email":"zhenzhong.duan@oracle.com","date":"2019-07-11 12:02:09 UTC","message":"x86: Add \"nopv\" parameter to disable PV extensions\n\nIn virtualization environment, PV extensions (drivers, interrupts,\ntimers, etc) are enabled in the majority of use cases which is the\nbest option.\n\nHowever, in some cases (kexec not fully working, benchmarking)\nwe want to disable PV extensions. We have \"xen_nopv\" for that purpose\nbut only for XEN. For a consistent admin experience a common command\nline parameter \"nopv\" set across all PV guest implementations is a\nbetter choice.\n\nThere are guest types which just won't work without PV extensions,\nlike Xen PV, Xen PVH and jailhouse. add a \"ignore_nopv\" member to\nstruct hypervisor_x86 set to true for those guest types and call\nthe detect functions only if nopv is false or ignore_nopv is true.\n\nSuggested-by: Juergen Gross <jgross@suse.com>\nSigned-off-by: Zhenzhong Duan <zhenzhong.duan@oracle.com>\nReviewed-by: Juergen Gross <jgross@suse.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Ingo Molnar <mingo@redhat.com>\nCc: Borislav Petkov <bp@a","insertions":22,"deletions":0,"filepaths":{"Documentation/admin-guide/kernel-parameters.txt":{"insertions":5,"deletions":0},"arch/x86/include/asm/hypervisor.h":{"insertions":4,"deletions":0},"arch/x86/kernel/cpu/hypervisor.c":{"insertions":11,"deletions":0},"arch/x86/kernel/jailhouse.c":{"insertions":1,"deletions":0},"arch/x86/xen/enlighten_pv.c":{"insertions":1,"deletions":0}}},"589d03e93f6cd595f68891e48f0804f2c8f38aae":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2014-02-23 21:40:18 UTC","message":"xen: Use the proper irq functions\n\ngeneric_handler_irq() already tests for !desc so use this instead of\ngeneric_handle_irq_desc().\n\nUse irq_get_irq_data() instead of desc->irq_data.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: David Vrabel <david.vrabel@citrix.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nCc: Xen <xen-devel@lists.xenproject.org>\nLink: http://lkml.kernel.org/r/20140223212738.222412125@linutronix.de\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>","insertions":8,"deletions":22,"filepaths":{"drivers/xen/events/events_2l.c":{"insertions":4,"deletions":11},"drivers/xen/events/events_base.c":{"insertions":2,"deletions":5},"drivers/xen/events/events_fifo.c":{"insertions":2,"deletions":6}}},"ab9a1cca3d172876ae9d5edb63abce7986045597":{"author":"David Vrabel","email":"david.vrabel@citrix.com","date":"2013-03-14 12:49:19 UTC","message":"xen/events: add struct evtchn_ops for the low-level port operations\n\nevtchn_ops contains the low-level operations that access the shared\ndata structures.  This allows alternate ABIs to be supported.\n\nSigned-off-by: David Vrabel <david.vrabel@citrix.com>\nReviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nReviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>","insertions":84,"deletions":16,"filepaths":{"drivers/xen/events/events_2l.c":{"insertions":25,"deletions":8},"drivers/xen/events/events_base.c":{"insertions":4,"deletions":0},"drivers/xen/events/events_internal.h":{"insertions":55,"deletions":8}}},"d0b075ffeede257342c3afdbeadd2fda8504ecee":{"author":"David Vrabel","email":"david.vrabel@citrix.com","date":"2013-10-17 14:23:15 UTC","message":"xen/events: Refactor evtchn_to_irq array to be dynamically allocated\n\nRefactor static array evtchn_to_irq array to be dynamically allocated by\nimplementing get and set functions for accesses to the array.\n\nTwo new port ops are added: max_channels (maximum supported number of\nevent channels) and nr_channels (number of currently usable event\nchannels).  For the 2-level ABI, these numbers are both the same as\nthe shared data structure is a fixed size. For the FIFO ABI, these\nwill be different as the event array is expanded dynamically.\n\nThis allows more than 65000 event channels so an unsigned short is no\nlonger sufficient for an event channel port number and unsigned int is\nused instead.\n\nSigned-off-by: Malcolm Crossley <malcolm.crossley@citrix.com>\nSigned-off-by: David Vrabel <david.vrabel@citrix.com>\nReviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nReviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>","insertions":149,"deletions":55,"filepaths":{"drivers/xen/events/events_2l.c":{"insertions":9,"deletions":2},"drivers/xen/events/events_base.c":{"insertions":124,"deletions":51},"drivers/xen/events/events_internal.h":{"insertions":16,"deletions":2}}},"9a489f45a155fe96b9b55fbbef2b757ef7737cfc":{"author":"David Vrabel","email":"david.vrabel@citrix.com","date":"2013-03-13 15:29:25 UTC","message":"xen/events: move 2-level specific code into its own file\n\nIn preparation for alternative event channel ABIs, move all the\nfunctions accessing the shared data structures into their own file.\n\nSigned-off-by: David Vrabel <david.vrabel@citrix.com>\nReviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nReviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>","insertions":442,"deletions":362,"filepaths":{"drivers/xen/events/Makefile":{"insertions":1,"deletions":0},"drivers/xen/events/events_2l.c":{"insertions":348,"deletions":0},"drivers/xen/events/events_base.c":{"insertions":17,"deletions":362},"drivers/xen/events/events_internal.h":{"insertions":74,"deletions":0},"include/xen/events.h":{"insertions":2,"deletions":0}}},"54c9de89895e0a36047fcc4ae754ea5b8655fb9d":{"author":"Juergen Gross","email":"jgross@suse.com","date":"2020-09-07 13:47:27 UTC","message":"xen/events: add a new \"late EOI\" evtchn framework\n\nIn order to avoid tight event channel related IRQ loops add a new\nframework of \"late EOI\" handling: the IRQ the event channel is bound\nto will be masked until the event has been handled and the related\ndriver is capable to handle another event. The driver is responsible\nfor unmasking the event channel via the new function xen_irq_lateeoi().\n\nThis is similar to binding an event channel to a threaded IRQ, but\nwithout having to structure the driver accordingly.\n\nIn order to support a future special handling in case a rogue guest\nis sending lots of unsolicited events, add a flag to xen_irq_lateeoi()\nwhich can be set by the caller to indicate the event was a spurious\none.\n\nThis is part of XSA-332.\n\nCc: stable@vger.kernel.org\nReported-by: Julien Grall <julien@xen.org>\nSigned-off-by: Juergen Gross <jgross@suse.com>\nReviewed-by: Jan Beulich <jbeulich@suse.com>\nReviewed-by: Stefano Stabellini <sstabellini@kernel.org>\nReviewed-by: Wei Liu <wl@xen","insertions":155,"deletions":17,"filepaths":{"drivers/xen/events/events_base.c":{"insertions":134,"deletions":17},"include/xen/events.h":{"insertions":21,"deletions":0}}},"073d0552ead5bfc7a3a9c01de590e924f11b5dd2":{"author":"Juergen Gross","email":"jgross@suse.com","date":"2020-09-07 13:47:27 UTC","message":"xen/events: avoid removing an event channel while handling it\n\nToday it can happen that an event channel is being removed from the\nsystem while the event handling loop is active. This can lead to a\nrace resulting in crashes or WARN() splats when trying to access the\nirq_info structure related to the event channel.\n\nFix this problem by using a rwlock taken as reader in the event\nhandling loop and as writer when deallocating the irq_info structure.\n\nAs the observed problem was a NULL dereference in evtchn_from_irq()\nmake this function more robust against races by testing the irq_info\npointer to be not NULL before dereferencing it.\n\nAnd finally make all accesses to evtchn_to_irq[row][col] atomic ones\nin order to avoid seeing partial updates of an array element in irq\nhandling. Note that irq handling can be entered only for event channels\nwhich have been valid before, so any not populated row isn't a problem\nin this regard, as rows are only ever added and never removed.\n\nThis is XSA-331.\n\nC","insertions":36,"deletions":5,"filepaths":{"drivers/xen/events/events_base.c":{"insertions":36,"deletions":5}}},"7beb290caa2adb0a399e735a1e175db9aae0523a":{"author":"Juergen Gross","email":"jgross@suse.com","date":"2020-09-13 12:23:02 UTC","message":"xen/events: use a common cpu hotplug hook for event channels\n\nToday only fifo event channels have a cpu hotplug callback. In order\nto prepare for more percpu (de)init work move that callback into\nevents_base.c and add percpu_init() and percpu_deinit() hooks to\nstruct evtchn_ops.\n\nThis is part of XSA-332.\n\nCc: stable@vger.kernel.org\nSigned-off-by: Juergen Gross <jgross@suse.com>\nReviewed-by: Jan Beulich <jbeulich@suse.com>\nReviewed-by: Wei Liu <wl@xen.org>","insertions":47,"deletions":21,"filepaths":{"drivers/xen/events/events_base.c":{"insertions":25,"deletions":0},"drivers/xen/events/events_fifo.c":{"insertions":19,"deletions":21},"drivers/xen/events/events_internal.h":{"insertions":3,"deletions":0}}},"e46cdb66c8fc1c8d61cfae0f219ff47ac4b9d531":{"author":"Jeremy Fitzhardinge","email":"jeremy@xensource.com","date":"2007-07-18 01:37:05 UTC","message":"xen: event channels\n\nXen implements interrupts in terms of event channels.  Each guest\ndomain gets 1024 event channels which can be used for a variety of\npurposes, such as Xen timer events, inter-domain events,\ninter-processor events (IPI) or for real hardware IRQs.\n\nWithin the kernel, we map the event channels to IRQs, and implement\nthe whole interrupt handling using a Xen irq_chip.\n\nRather than setting NR_IRQ to 1024 under PARAVIRT in order to\naccomodate Xen, we create a dynamic mapping between event channels and\nIRQs.  Ideally, Linux will eventually move towards dynamically\nallocating per-irq structures, and we can use a 1:1 mapping between\nevent channels and irqs.\n\nSigned-off-by: Jeremy Fitzhardinge <jeremy@xensource.com>\nSigned-off-by: Chris Wright <chrisw@sous-sol.org>\nCc: Ingo Molnar <mingo@elte.hu>\nCc: Eric W. Biederman <ebiederm@xmission.com>","insertions":542,"deletions":1,"filepaths":{"arch/i386/xen/Makefile":{"insertions":2,"deletions":1},"arch/i386/xen/enlighten.c":{"insertions":1,"deletions":0},"arch/i386/xen/events.c":{"insertions":511,"deletions":0},"include/xen/events.h":{"insertions":28,"deletions":0}}},"6cb6537d34a146c8f3e232da9ffd79ae1265fed3":{"author":"Ian Campbell","email":"ian.campbell@citrix.com","date":"2011-03-10 16:08:11 UTC","message":"xen: events: maintain a list of Xen interrupts\n\nIn a PVHVM kernel not all interrupts are Xen interrupts (APIC interrupts can also be present).\n\nCurrently we get away with walking over all interrupts because the\nlookup in the irq_info array simply returns IRQT_UNBOUND and we ignore\nit. However this array will be going away in a future patch so we need\nto manually track which interrupts have been allocated by the Xen\nevents infrastructure.\n\nSigned-off-by: Ian Campbell <ian.campbell@citrix.com>\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>","insertions":44,"deletions":15,"filepaths":{"drivers/xen/events.c":{"insertions":44,"deletions":15}}},"38e20b07efd541a959de367dc90a17f92ce2e8a6":{"author":"Sheng Yang","email":"sheng@linux.intel.com","date":"2010-05-14 11:40:51 UTC","message":"x86/xen: event channels delivery on HVM.\n\nSet the callback to receive evtchns from Xen, using the\ncallback vector delivery mechanism.\n\nThe traditional way for receiving event channel notifications from Xen\nis via the interrupts from the platform PCI device.\nThe callback vector is a newer alternative that allow us to receive\nnotifications on any vcpu and doesn't need any PCI support: we allocate\na vector exclusively to receive events, in the vector handler we don't\nneed to interact with the vlapic, therefore we avoid a VMEXIT.\n\nSigned-off-by: Stefano Stabellini <stefano.stabellini@eu.citrix.com>\nSigned-off-by: Sheng Yang <sheng@linux.intel.com>\nSigned-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>","insertions":118,"deletions":7,"filepaths":{"arch/x86/include/asm/irq_vectors.h":{"insertions":3,"deletions":0},"arch/x86/kernel/entry_32.S":{"insertions":3,"deletions":0},"arch/x86/kernel/entry_64.S":{"insertions":3,"deletions":0},"arch/x86/xen/enlighten.c":{"insertions":28,"deletions":0},"arch/x86/xen/xen-ops.h":{"insertions":2,"deletions":0},"drivers/xen/events.c":{"insertions":63,"deletions":7},"include/xen/events.h":{"insertions":7,"deletions":0},"include/xen/hvm.h":{"insertions":6,"deletions":0},"include/xen/interface/features.h":{"insertions":3,"deletions":0}}},"1fe565517b57676884349dccfd6ce853ec338636":{"author":"David Vrabel","email":"david.vrabel@citrix.com","date":"2013-03-15 13:02:35 UTC","message":"xen/events: use the FIFO-based ABI if available\n\nImplement all the event channel port ops for the FIFO-based ABI.\n\nIf the hypervisor supports the FIFO-based ABI, enable it by\ninitializing the control block for the boot VCPU and subsequent VCPUs\nas they are brought up and on resume.  The event array is expanded as\nrequired when event ports are setup.\n\nThe 'xen.fifo_events=0' command line option may be used to disable use\nof the FIFO-based ABI.\n\nSigned-off-by: David Vrabel <david.vrabel@citrix.com>\nReviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nReviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>","insertions":448,"deletions":1,"filepaths":{"drivers/xen/events/Makefile":{"insertions":1,"deletions":0},"drivers/xen/events/events_base.c":{"insertions":13,"deletions":1},"drivers/xen/events/events_fifo.c":{"insertions":426,"deletions":0},"drivers/xen/events/events_internal.h":{"insertions":8,"deletions":0}}},"f87e4cac4f4e940b328d3deb5b53e642e3881f43":{"author":"Jeremy Fitzhardinge","email":"jeremy@xensource.com","date":"2007-07-18 01:37:06 UTC","message":"xen: SMP guest support\n\nThis is a fairly straightforward Xen implementation of smp_ops.\n\nXen has its own IPI mechanisms, and has no dependency on any\nAPIC-based IPI.  The smp_ops hooks and the flush_tlb_others pv_op\nallow a Xen guest to avoid all APIC code in arch/i386 (the only apic\noperation is a single apic_read for the apic version number).\n\nOne subtle point which needs to be addressed is unpinning pagetables\nwhen another cpu may have a lazy tlb reference to the pagetable. Xen\nwill not allow an in-use pagetable to be unpinned, so we must find any\nother cpus with a reference to the pagetable and get them to shoot\ndown their references.\n\nSigned-off-by: Jeremy Fitzhardinge <jeremy@xensource.com>\nSigned-off-by: Chris Wright <chrisw@sous-sol.org>\nCc: Benjamin LaHaise <bcrl@kvack.org>\nCc: Ingo Molnar <mingo@redhat.com>\nCc: Andi Kleen <ak@suse.de>","insertions":705,"deletions":53,"filepaths":{"arch/i386/xen/Kconfig":{"insertions":1,"deletions":1},"arch/i386/xen/Makefile":{"insertions":2,"deletions":0},"arch/i386/xen/enlighten.c":{"insertions":89,"deletions":26},"arch/i386/xen/events.c":{"insertions":79,"deletions":1},"arch/i386/xen/mmu.c":{"insertions":52,"deletions":17},"arch/i386/xen/mmu.h":{"insertions":13,"deletions":0},"arch/i386/xen/setup.c":{"insertions":5,"deletions":0},"arch/i386/xen/smp.c":{"insertions":407,"deletions":0},"arch/i386/xen/time.c":{"insertions":9,"deletions":4},"arch/i386/xen/xen-ops.h":{"insertions":25,"deletions":0},"include/xen/events.h":{"insertions":23,"deletions":4}}},"7e186bdd0098b34c69fb8067c67340ae610ea499":{"author":"Stefano Stabellini","email":"stefano.stabellini@eu.citrix.com","date":"2011-05-06 11:27:50 UTC","message":"xen: do not clear and mask evtchns in __xen_evtchn_do_upcall\n\nChange the irq handler of evtchns and pirqs that don't need EOI (pirqs\nthat correspond to physical edge interrupts) to handle_edge_irq.\n\nUse handle_fasteoi_irq for pirqs that need eoi (they generally\ncorrespond to level triggered irqs), no risk in loosing interrupts\nbecause we have to EOI the irq anyway.\n\nThis change has the following benefits:\n\n- it uses the very same handlers that Linux would use on native for the\nsame irqs (handle_edge_irq for edge irqs and msis, and\nhandle_fasteoi_irq for everything else);\n\n- it uses these handlers in the same way native code would use them: it\nlet Linux mask\\unmask and ack the irq when Linux want to mask\\unmask\nand ack the irq;\n\n- it fixes a problem occurring when a driver calls disable_irq() in its\nhandler: the old code was unconditionally unmasking the evtchn even if\nthe irq is disabled when irq_eoi was called.\n\nSee Documentation/DocBook/genericirq.tmpl for more informations.\n\nSigned-o","insertions":73,"deletions":40,"filepaths":{"drivers/xen/events.c":{"insertions":73,"deletions":40}}},"0891fb39ba67bd7ae023ea0d367297ffff010781":{"author":"Juergen Gross","email":"jgross@suse.com","date":"2020-09-30 09:16:14 UTC","message":"xen/events: don't use chip_data for legacy IRQs\n\nSince commit c330fb1ddc0a (\"XEN uses irqdesc::irq_data_common::handler_data to store a per interrupt XEN data pointer which contains XEN specific information.\")\nXen is using the chip_data pointer for storing IRQ specific data. When\nrunning as a HVM domain this can result in problems for legacy IRQs, as\nthose might use chip_data for their own purposes.\n\nUse a local array for this purpose in case of legacy IRQs, avoiding the\ndouble use.\n\nCc: stable@vger.kernel.org\nFixes: c330fb1ddc0a (\"XEN uses irqdesc::irq_data_common::handler_data to store a per interrupt XEN data pointer which contains XEN specific information.\")\nSigned-off-by: Juergen Gross <jgross@suse.com>\nTested-by: Stefan Bader <stefan.bader@canonical.com>\nReviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>\nLink: https://lore.kernel.org/r/20200930091614.13660-1-jgross@suse.com\nSigned-off-by: Juergen Gross <jgross@suse.com>","insertions":21,"deletions":8,"filepaths":{"drivers/xen/events/events_base.c":{"insertions":21,"deletions":8}}},"348be43384e6bcd5e9da7ff5f1680d49f65c488d":{"author":"Juergen Gross","email":"jgross@suse.com","date":"2019-11-29 12:39:41 UTC","message":"xen/events: remove event handling recursion detection\n\n__xen_evtchn_do_upcall() contains guards against being called\nrecursively. This mechanism was introduced in the early pvops times\n(kernel 2.6.26) when there were all the Xen backend drivers missing\nfrom the upstream kernel, and some of those out-of-tree drivers were\nenabling interrupts in their event handlers (which was explicitly\nallowed in the initial XenoLinux).\n\nNowadays we don't need to support those old drivers any more and the\ncapability to allow recursive calls of __xen_evtchn_do_upcall() can\nbe removed.\n\nSigned-off-by: Juergen Gross <jgross@suse.com>\nReviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>\nSigned-off-by: Juergen Gross <jgross@suse.com>","insertions":3,"deletions":13,"filepaths":{"drivers/xen/events/events_base.c":{"insertions":3,"deletions":13}}},"229664bee6126e01f8662976a5fe2e79813b77c8":{"author":"Jeremy Fitzhardinge","email":"jeremy@goop.org","date":"2008-03-17 23:37:20 UTC","message":"xen: short-cut for recursive event handling\n\nIf an event comes in while events are currently being processed, then\njust increment the counter and have the outer event loop reprocess the\npending events.  This prevents unbounded recursion on heavy event\nloads (of course massive event storms will cause infinite loops).\n\nSigned-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>","insertions":30,"deletions":16,"filepaths":{"arch/x86/xen/events.c":{"insertions":30,"deletions":16}}},"f731e3ef02b4744f4d7ca2f63539b900e47db31f":{"author":"Qing He","email":"qing.he@intel.com","date":"2010-10-11 14:30:09 UTC","message":"xen: remap MSIs into pirqs when running as initial domain\n\nImplement xen_create_msi_irq to create an msi and remap it as pirq.\nUse xen_create_msi_irq to implement an initial domain specific version\nof setup_msi_irqs.\n\nSigned-off-by: Qing He <qing.he@intel.com>\nSigned-off-by: Yunhong Jiang <yunhong.jiang@intel.com>\nSigned-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>\nSigned-off-by: Stefano Stabellini <stefano.stabellini@eu.citrix.com>\nReviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>","insertions":101,"deletions":18,"filepaths":{"arch/x86/pci/xen.c":{"insertions":37,"deletions":18},"drivers/xen/events.c":{"insertions":60,"deletions":0},"include/xen/events.h":{"insertions":4,"deletions":0}}},"0ec53ecf38bcbf95b4b057328a8fbba4d22ef28b":{"author":"Stefano Stabellini","email":"stefano.stabellini@eu.citrix.com","date":"2012-09-14 13:37:32 UTC","message":"xen/arm: receive Xen events on ARM\n\nCompile events.c on ARM.\nParse, map and enable the IRQ to get event notifications from the device\ntree (node \"/xen\").\n\nSigned-off-by: Stefano Stabellini <stefano.stabellini@eu.citrix.com>\nAcked-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>","insertions":69,"deletions":4,"filepaths":{"arch/arm/include/asm/xen/events.h":{"insertions":18,"deletions":0},"arch/arm/xen/enlighten.c":{"insertions":33,"deletions":0},"arch/x86/xen/enlighten.c":{"insertions":1,"deletions":0},"arch/x86/xen/irq.c":{"insertions":1,"deletions":0},"arch/x86/xen/xen-ops.h":{"insertions":0,"deletions":1},"drivers/xen/events.c":{"insertions":14,"deletions":3},"include/xen/events.h":{"insertions":2,"deletions":0}}},"b5328cd14557880e9eb757a8a9c8a88f1b23533a":{"author":"Konrad Rzeszutek Wilk","email":"konrad.wilk@oracle.com","date":"2011-06-15 18:24:29 UTC","message":"xen: Fix compile warning when CONFIG_SMP is not defined.\n\n.. which is quite benign.\n\ndrivers/xen/events.c:398: warning: unused variable ‘desc’\n\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>","insertions":1,"deletions":1,"filepaths":{"drivers/xen/events.c":{"insertions":1,"deletions":1}}},"c149e4cd08ba01f4d2d0104f469d5f5419294e06":{"author":"Jiang Liu","email":"jiang.liu@linux.intel.com","date":"2015-06-03 03:46:22 UTC","message":"x86/irq: Use access helper irq_data_get_affinity_mask()\n\nThis is a preparatory patch for moving irq_data struct members.\n\nSigned-off-by: Jiang Liu <jiang.liu@linux.intel.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>","insertions":8,"deletions":6,"filepaths":{"arch/x86/kernel/apic/io_apic.c":{"insertions":1,"deletions":1},"arch/x86/kernel/apic/vector.c":{"insertions":2,"deletions":1},"arch/x86/kernel/irq.c":{"insertions":3,"deletions":2},"drivers/xen/events/events_base.c":{"insertions":2,"deletions":2}}},"ca62ce8cde36cde5a31af8f9bb23e6430700e437":{"author":"Ian Campbell","email":"ian.campbell@citrix.com","date":"2011-03-10 16:08:12 UTC","message":"xen: events: dynamically allocate irq info structures\n\nRemoves nr_irq sized array allocation at start of day.\n\nSigned-off-by: Ian Campbell <ian.campbell@citrix.com>\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>","insertions":16,"deletions":15,"filepaths":{"drivers/xen/events.c":{"insertions":16,"deletions":15}}},"94032c506720e26402db64987e08168565b57990":{"author":"Konrad Rzeszutek Wilk","email":"konrad.wilk@oracle.com","date":"2013-04-16 14:55:18 UTC","message":"xen/events: Check that IRQ value passed in is valid.\n\nWe naively assume that the IRQ value passed in is correct.\nIf it is not, then any dereference operation for the 'info'\nstructure will result in crash - so might as well guard ourselves\nand sprinkle copious amounts of WARN_ON.\n\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>","insertions":19,"deletions":1,"filepaths":{"drivers/xen/events.c":{"insertions":19,"deletions":1}}},"9158c3588a0693ef11208f5961f0d6b0241694d8":{"author":"Ian Campbell","email":"ian.campbell@citrix.com","date":"2011-03-10 16:08:09 UTC","message":"xen: events: turn irq_info constructors into initialiser functions\n\nSigned-off-by: Ian Campbell <ian.campbell@citrix.com>\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>","insertions":66,"deletions":38,"filepaths":{"drivers/xen/events.c":{"insertions":66,"deletions":38}}},"780f36d8b3fa9572f731d4fb85067b2e45e6f993":{"author":"Christoph Lameter","email":"cl@linux.com","date":"2010-12-06 17:16:29 UTC","message":"xen: Use this_cpu_ops\n\nUse this_cpu_ops to reduce code size and simplify things in various places.\n\nV3->V4:\n\tMove instance of this_cpu_inc_return to a later patchset so that\n\tthis patch can be applied without infrastructure changes.\n\nCc: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>\nAcked-by: H. Peter Anvin <hpa@zytor.com>\nSigned-off-by: Christoph Lameter <cl@linux.com>\nSigned-off-by: Tejun Heo <tj@kernel.org>","insertions":15,"deletions":15,"filepaths":{"arch/x86/xen/enlighten.c":{"insertions":2,"deletions":2},"arch/x86/xen/multicalls.h":{"insertions":1,"deletions":1},"arch/x86/xen/spinlock.c":{"insertions":4,"deletions":4},"arch/x86/xen/time.c":{"insertions":4,"deletions":4},"drivers/xen/events.c":{"insertions":4,"deletions":4}}},"3de88d622fd68bd4dbee0f80168218b23f798fd0":{"author":"Ross Lagerwall","email":"ross.lagerwall@citrix.com","date":"2015-06-19 15:15:57 UTC","message":"xen/events/fifo: Consume unprocessed events when a CPU dies\n\nWhen a CPU is offlined, there may be unprocessed events on a port for\nthat CPU.  If the port is subsequently reused on a different CPU, it\ncould be in an unexpected state with the link bit set, resulting in\ninterrupts being missed. Fix this by consuming any unprocessed events\nfor a particular CPU when that CPU dies.\n\nSigned-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>\nCc: <stable@vger.kernel.org> # 3.14+\nSigned-off-by: David Vrabel <david.vrabel@citrix.com>","insertions":18,"deletions":5,"filepaths":{"drivers/xen/events/events_fifo.c":{"insertions":18,"deletions":5}}},"0102e4efda76d0721bc744dd80258eb6cfa25fc3":{"author":"Yan Yankovskyi","email":"yyankovskyi@gmail.com","date":"2020-03-23 16:15:11 UTC","message":"xen: Use evtchn_type_t as a type for event channels\n\nMake event channel functions pass event channel port using\nevtchn_port_t type. It eliminates signed <-> unsigned conversion.\n\nSigned-off-by: Yan Yankovskyi <yyankovskyi@gmail.com>\nReviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>\nLink: https://lore.kernel.org/r/20200323152343.GA28422@kbp1-lhp-F74019\nSigned-off-by: Juergen Gross <jgross@suse.com>","insertions":128,"deletions":116,"filepaths":{"drivers/xen/events/events_2l.c":{"insertions":8,"deletions":8},"drivers/xen/events/events_base.c":{"insertions":48,"deletions":45},"drivers/xen/events/events_fifo.c":{"insertions":11,"deletions":11},"drivers/xen/events/events_internal.h":{"insertions":15,"deletions":15},"drivers/xen/evtchn.c":{"insertions":7,"deletions":6},"drivers/xen/gntdev-common.h":{"insertions":2,"deletions":1},"drivers/xen/gntdev.c":{"insertions":1,"deletions":1},"drivers/xen/pvcalls-back.c":{"insertions":3,"deletions":2},"drivers/xen/pvcalls-front.c":{"insertions":9,"deletions":6},"drivers/xen/xen-pciback/xenbus.c":{"insertions":4,"deletions":3},"drivers/xen/xen-scsiback.c":{"insertions":2,"deletions":1},"drivers/xen/xenbus/xenbus_client.c":{"insertions":3,"deletions":3},"include/xen/events.h":{"insertions":11,"deletions":11},"include/xen/interface/event_channel.h":{"insertions":1,"deletions":1},"include/xen/xenbus.h":{"insertions":3,"deletions":2}}},"c8761e2016aa51a2829563b02a0a55913bdb0be8":{"author":"Sebastian Andrzej Siewior","email":"bigeasy@linutronix.de","date":"2016-09-07 17:19:01 UTC","message":"xen/events: Convert to hotplug state machine\n\nInstall the callbacks via the state machine.\n\nSigned-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>\nSigned-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>\nSigned-off-by: David Vrabel <david.vrabel@citrix.com>","insertions":13,"deletions":22,"filepaths":{"drivers/xen/events/events_fifo.c":{"insertions":12,"deletions":22},"include/linux/cpuhotplug.h":{"insertions":1,"deletions":0}}},"4892c9b4ada9f9a71a0da7a268f95e988d88064b":{"author":"Roger Pau Monne","email":"roger.pau@citrix.com","date":"2014-02-27 18:15:35 UTC","message":"xen: add support for MSI message groups\n\nAdd support for MSI message groups for Xen Dom0 using the\nMAP_PIRQ_TYPE_MULTI_MSI pirq map type.\n\nIn order to keep track of which pirq is the first one in the group all\npirqs in the MSI group except for the first one have the newly\nintroduced PIRQ_MSI_GROUP flag set. This prevents calling\nPHYSDEVOP_unmap_pirq on them, since the unmap must be done with the\nfirst pirq in the group.\n\nSigned-off-by: Roger Pau Monné <roger.pau@citrix.com>\nSigned-off-by: David Vrabel <david.vrabel@citrix.com>\nCc: Boris Ostrovsky <boris.ostrovsky@oracle.com>","insertions":65,"deletions":27,"filepaths":{"arch/x86/pci/xen.c":{"insertions":20,"deletions":9},"drivers/xen/events/events_base.c":{"insertions":32,"deletions":15},"drivers/xen/events/events_internal.h":{"insertions":1,"deletions":0},"include/xen/events.h":{"insertions":4,"deletions":1},"include/xen/interface/physdev.h":{"insertions":8,"deletions":2}}},"c9df1ce585e3bb5a2f101c1d87381b285a9f962f":{"author":"Ian Campbell","email":"ian.campbell@citrix.com","date":"2011-01-11 17:20:15 UTC","message":"xen: events: add xen_allocate_irq_{dynamic, gsi} and xen_free_irq\n\nThis is neater than open-coded calls to irq_alloc_desc_at and\nirq_free_desc.\n\nNo intended behavioural change.\n\nNote that we previously were not checking the return value of\nirq_alloc_desc_at which would be failing for GSI<NR_IRQS_LEGACY\nbecause the core architecture code has already allocated those for\nus. Hence the additional check against NR_IRQS_LEGACY in\nxen_allocate_irq_gsi.\n\nSigned-off-by: Ian Campbell <ian.campbell@citrix.com>\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nCc: Stefano Stabellini <stefano.stabellini@eu.citrix.com>\nCc: Jeremy Fitzhardinge <jeremy@goop.org>","insertions":35,"deletions":18,"filepaths":{"drivers/xen/events.c":{"insertions":35,"deletions":18}}},"420eb554d5ee6daad743d8190383219f757dd66c":{"author":"Daniel De Graaf","email":"dgdegra@tycho.nsa.gov","date":"2011-10-27 21:58:47 UTC","message":"xen/event: Add reference counting to event channels\n\nEvent channels exposed to userspace by the evtchn module may be used by\nother modules in an asynchronous manner, which requires that reference\ncounting be used to prevent the event channel from being closed before\nthe signals are delivered.\n\nThe reference count on new event channels defaults to -1 which indicates\nthe event channel is not referenced outside the kernel; evtchn_get fails\nif called on such an event channel. The event channels made visible to\nuserspace by evtchn have a normal reference count.\n\nSigned-off-by: Daniel De Graaf <dgdegra@tycho.nsa.gov>\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>","insertions":81,"deletions":2,"filepaths":{"drivers/xen/events.c":{"insertions":73,"deletions":1},"drivers/xen/evtchn.c":{"insertions":1,"deletions":1},"include/xen/events.h":{"insertions":7,"deletions":0}}},"b21ddbf50386d10cdd60d8f8e744cff0496d2552":{"author":"Jeremy Fitzhardinge","email":"jeremy.fitzhardinge@citrix.com","date":"2010-06-07 20:28:49 UTC","message":"xen: dynamically allocate irq & event structures\n\nDynamically allocate the irq_info and evtchn_to_irq arrays, so that\n1) the irq_info array scales to the actual number of possible irqs,\nand 2) we don't needlessly increase the static size of the kernel\nwhen we aren't running under Xen.\n\nDerived on patch from Mike Travis <travis@sgi.com>.\n\n[Impact: reduce memory usage ]\n[v2: Conflict in drivers/xen/events.c: Replaced alloc_bootmen with kcalloc ]\n\nSigned-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>","insertions":10,"deletions":6,"filepaths":{"drivers/xen/events.c":{"insertions":10,"deletions":6}}},"773659483685d652970583384a0294948e57f8b3":{"author":"Konrad Rzeszutek Wilk","email":"konrad.wilk@oracle.com","date":"2011-09-14 09:10:00 UTC","message":"xen/irq: Alter the locking to use a mutex instead of a spinlock.\n\nWhen we allocate/change the IRQ informations, we do not\nneed to use spinlocks. We can use a mutex (which is\nwhat the generic IRQ code does for allocations/changes).\nFixes a slew of:\n\nBUG: sleeping function called from invalid context at /linux/kernel/mutex.c:271\nin_atomic(): 1, irqs_disabled(): 0, pid: 3216, name: xenstored\n2 locks held by xenstored/3216:\n #0:  (&u->bind_mutex){......}, at: [<ffffffffa02e0920>] evtchn_ioctl+0x30/0x3a0 [xen_evtchn]\n #1:  (irq_mapping_update_lock){......}, at: [<ffffffff8138b274>] bind_evtchn_to_irq+0x24/0x90\nPid: 3216, comm: xenstored Not tainted 3.1.0-rc6-00021-g437a3d1 #2\nCall Trace:\n [<ffffffff81088d10>] __might_sleep+0x100/0x130\n [<ffffffff81645c2f>] mutex_lock_nested+0x2f/0x50\n [<ffffffff81627529>] __irq_alloc_descs+0x49/0x200\n [<ffffffffa02e0920>] ? evtchn_ioctl+0x30/0x3a0 [xen_evtchn]\n [<ffffffff8138b214>] xen_allocate_irq_dynamic+0x34/0x70\n [<ffffffff8138b2ad>] bind_evtchn_to_irq+0","insertions":20,"deletions":20,"filepaths":{"drivers/xen/events.c":{"insertions":20,"deletions":20}}},"4dca864b59dd150a221730775e2f21f49779c135":{"author":"Josh Abraham","email":"j.abraham1776@gmail.com","date":"2018-09-13 01:13:54 UTC","message":"xen: fix GCC warning and remove duplicate EVTCHN_ROW/EVTCHN_COL usage\n\nThis patch removes duplicate macro useage in events_base.c.\n\nIt also fixes gcc warning:\nvariable ‘col’ set but not used [-Wunused-but-set-variable]\n\nSigned-off-by: Joshua Abraham <j.abraham1776@gmail.com>\nReviewed-by: Juergen Gross <jgross@suse.com>\nSigned-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>","insertions":1,"deletions":1,"filepaths":{"drivers/xen/events/events_base.c":{"insertions":1,"deletions":1}}},"89f403541325181748b491fd96118e68292f47e1":{"author":"Denis Efremov","email":"efremov@linux.com","date":"2019-09-25 23:49:28 UTC","message":"xen/events: remove unlikely() from WARN() condition\n\n\"unlikely(WARN(x))\" is excessive. WARN() already uses unlikely()\ninternally.\n\nLink: http://lkml.kernel.org/r/20190829165025.15750-4-efremov@linux.com\nSigned-off-by: Denis Efremov <efremov@linux.com>\nCc: Boris Ostrovsky <boris.ostrovsky@oracle.com>\nCc: Joe Perches <joe@perches.com>\nReviewed-by: Juergen Gross <jgross@suse.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":1,"deletions":1,"filepaths":{"drivers/xen/events/events_base.c":{"insertions":1,"deletions":1}}},"ced40d0f3e8833bb8d7d8e2cbfac7da0bf7008c4":{"author":"Jeremy Fitzhardinge","email":"jeremy@goop.org","date":"2009-02-06 22:09:44 UTC","message":"xen: pack all irq-related info together\n\nPut all irq info into one struct.  Also, use a union to keep\nevent channel type-specific information, rather than overloading the\nindex field.\n\nSigned-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>","insertions":135,"deletions":49,"filepaths":{"drivers/xen/events.c":{"insertions":135,"deletions":49}}},"7214610475b2847a81478d96e4d3ba0bbe49598c":{"author":"Ian Campbell","email":"Ian.Campbell@eu.citrix.com","date":"2011-02-03 09:49:35 UTC","message":"xen: events: do not free legacy IRQs\n\nc514d00c8057 \"xen: events: add xen_allocate_irq_{dynamic, gsi} and\nxen_free_irq\" correctly avoids reallocating legacy IRQs (which are\nmanaged by the arch core) but erroneously did not prevent them being\nfreed.\n\nSigned-off-by: Ian Campbell <ian.campbell@citrix.com>\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>","insertions":4,"deletions":0,"filepaths":{"drivers/xen/events.c":{"insertions":4,"deletions":0}}},"bd59380c5ba4147dcbaad3e582b55ccfd120b764":{"author":"Andrew Donnellan","email":"ajd@linux.ibm.com","date":"2020-08-20 04:45:12 UTC","message":"powerpc/rtas: Restrict RTAS requests from userspace\n\nA number of userspace utilities depend on making calls to RTAS to retrieve\ninformation and update various things.\n\nThe existing API through which we expose RTAS to userspace exposes more\nRTAS functionality than we actually need, through the sys_rtas syscall,\nwhich allows root (or anyone with CAP_SYS_ADMIN) to make any RTAS call they\nwant with arbitrary arguments.\n\nMany RTAS calls take the address of a buffer as an argument, and it's up to\nthe caller to specify the physical address of the buffer as an argument. We\nallocate a buffer (the \"RMO buffer\") in the Real Memory Area that RTAS can\naccess, and then expose the physical address and size of this buffer in\n/proc/powerpc/rtas/rmo_buffer. Userspace is expected to read this address,\npoke at the buffer using /dev/mem, and pass an address in the RMO buffer to\nthe RTAS call.\n\nHowever, there's nothing stopping the caller from specifying whatever\naddress they want in the RTAS call, and it's ","insertions":166,"deletions":0,"filepaths":{"arch/powerpc/Kconfig":{"insertions":13,"deletions":0},"arch/powerpc/kernel/rtas.c":{"insertions":153,"deletions":0}}},"bd5d9c743d38f67d64ea1b512a461f6b5a5f6bec":{"author":"Nayna Jain","email":"nayna@linux.ibm.com","date":"2019-11-11 03:10:34 UTC","message":"powerpc: expose secure variables to userspace via sysfs\n\nPowerNV secure variables, which store the keys used for OS kernel\nverification, are managed by the firmware. These secure variables need to\nbe accessed by the userspace for addition/deletion of the certificates.\n\nThis patch adds the sysfs interface to expose secure variables for PowerNV\nsecureboot. The users shall use this interface for manipulating\nthe keys stored in the secure variables.\n\nSigned-off-by: Nayna Jain <nayna@linux.ibm.com>\nReviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nSigned-off-by: Eric Richter <erichte@linux.ibm.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/1573441836-3632-3-git-send-email-nayna@linux.ibm.com","insertions":306,"deletions":0,"filepaths":{"Documentation/ABI/testing/sysfs-secvar":{"insertions":46,"deletions":0},"arch/powerpc/Kconfig":{"insertions":11,"deletions":0},"arch/powerpc/kernel/Makefile":{"insertions":1,"deletions":0},"arch/powerpc/kernel/secvar-sysfs.c":{"insertions":248,"deletions":0}}},"14cf11af6cf608eb8c23e989ddb17a715ddce109":{"author":"Paul Mackerras","email":"paulus@samba.org","date":"2005-09-26 06:04:21 UTC","message":"powerpc: Merge enough to start building in arch/powerpc.\n\nThis creates the directory structure under arch/powerpc and a bunch\nof Kconfig files.  It does a first-cut merge of arch/powerpc/mm,\narch/powerpc/lib and arch/powerpc/platforms/powermac.  This is enough\nto build a 32-bit powermac kernel with ARCH=powerpc.\n\nFor now we are getting some unmerged files from arch/ppc/kernel and\narch/ppc/syslib, or arch/ppc64/kernel.  This makes some minor changes\nto files in those directories and files outside arch/powerpc.\n\nThe boot directory is still not merged.  That's going to be interesting.\n\nSigned-off-by: Paul Mackerras <paulus@samba.org>","insertions":32423,"deletions":25,"filepaths":{"arch/powerpc/Kconfig":{"insertions":861,"deletions":0},"arch/powerpc/Kconfig.debug":{"insertions":73,"deletions":0},"arch/powerpc/Makefile":{"insertions":222,"deletions":0},"arch/powerpc/kernel/Makefile":{"insertions":18,"deletions":0},"arch/powerpc/kernel/asm-offsets.c":{"insertions":262,"deletions":0},"arch/powerpc/kernel/fpu.S":{"insertions":133,"deletions":0},"arch/powerpc/kernel/head.S":{"insertions":1545,"deletions":0},"arch/powerpc/kernel/head_44x.S":{"insertions":778,"deletions":0},"arch/powerpc/kernel/head_4xx.S":{"insertions":1016,"deletions":0},"arch/powerpc/kernel/head_64.S":{"insertions":2011,"deletions":0},"arch/powerpc/kernel/head_8xx.S":{"insertions":860,"deletions":0},"arch/powerpc/kernel/head_fsl_booke.S":{"insertions":1058,"deletions":0},"arch/powerpc/kernel/idle_6xx.S":{"insertions":233,"deletions":0},"arch/powerpc/kernel/process.c":{"insertions":724,"deletions":0},"arch/powerpc/kernel/semaphore.c":{"insertions":135,"deletions":0},"arch/powerpc/kernel/traps.c":{"insertions":1047,"deletions":0},"arch/powerpc/kernel/vector.S":{"insertions":197,"deletions":0},"arch/powerpc/kernel/vmlinux.lds":{"insertions":174,"deletions":0},"arch/powerpc/kernel/vmlinux.lds.S":{"insertions":172,"deletions":0},"arch/powerpc/lib/Makefile":{"insertions":9,"deletions":0},"arch/powerpc/lib/checksum.S":{"insertions":225,"deletions":0},"arch/powerpc/lib/checksum64.S":{"insertions":229,"deletions":0},"arch/powerpc/lib/copy32.S":{"insertions":543,"deletions":0},"arch/powerpc/lib/copypage.S":{"insertions":121,"deletions":0},"arch/powerpc/lib/copyuser.S":{"insertions":576,"deletions":0},"arch/powerpc/lib/div64.S":{"insertions":58,"deletions":0},"arch/powerpc/lib/e2a.c":{"insertions":108,"deletions":0},"arch/powerpc/lib/memcpy.S":{"insertions":172,"deletions":0},"arch/powerpc/lib/rheap.c":{"insertions":693,"deletions":0},"arch/powerpc/lib/sstep.c":{"insertions":141,"deletions":0},"arch/powerpc/lib/strcase.c":{"insertions":23,"deletions":0},"arch/powerpc/lib/string.S":{"insertions":203,"deletions":0},"arch/powerpc/lib/usercopy.c":{"insertions":41,"deletions":0},"arch/powerpc/mm/44x_mmu.c":{"insertions":120,"deletions":0},"arch/powerpc/mm/4xx_mmu.c":{"insertions":141,"deletions":0},"arch/powerpc/mm/Makefile":{"insertions":12,"deletions":0},"arch/powerpc/mm/fault.c":{"insertions":391,"deletions":0},"arch/powerpc/mm/fsl_booke_mmu.c":{"insertions":237,"deletions":0},"arch/powerpc/mm/hash_32.S":{"insertions":618,"deletions":0},"arch/powerpc/mm/init.c":{"insertions":581,"deletions":0},"arch/powerpc/mm/init64.c":{"insertions":385,"deletions":0},"arch/powerpc/mm/mem.c":{"insertions":299,"deletions":0},"arch/powerpc/mm/mem64.c":{"insertions":259,"deletions":0},"arch/powerpc/mm/mem_pieces.c":{"insertions":163,"deletions":0},"arch/powerpc/mm/mem_pieces.h":{"insertions":48,"deletions":0},"arch/powerpc/mm/mmu_context.c":{"insertions":86,"deletions":0},"arch/powerpc/mm/mmu_context64.c":{"insertions":63,"deletions":0},"arch/powerpc/mm/mmu_decl.h":{"insertions":85,"deletions":0},"arch/powerpc/mm/pgtable.c":{"insertions":470,"deletions":0},"arch/powerpc/mm/pgtable64.c":{"insertions":357,"deletions":0},"arch/powerpc/mm/ppc_mmu.c":{"insertions":296,"deletions":0},"arch/powerpc/mm/tlb.c":{"insertions":183,"deletions":0},"arch/powerpc/platforms/4xx/Kconfig":{"insertions":280,"deletions":0},"arch/powerpc/platforms/85xx/Kconfig":{"insertions":86,"deletions":0},"arch/powerpc/platforms/8xx/Kconfig":{"insertions":352,"deletions":0},"arch/powerpc/platforms/apus/Kconfig":{"insertions":130,"deletions":0},"arch/powerpc/platforms/embedded6xx/Kconfig":{"insertions":313,"deletions":0},"arch/powerpc/platforms/iseries/Kconfig":{"insertions":31,"deletions":0},"arch/powerpc/platforms/powermac/Makefile":{"insertions":9,"deletions":0},"arch/powerpc/platforms/powermac/pmac.h":{"insertions":31,"deletions":0},"arch/powerpc/platforms/powermac/pmac_backlight.c":{"insertions":202,"deletions":0},"arch/powerpc/platforms/powermac/pmac_cache.S":{"insertions":359,"deletions":0},"arch/powerpc/platforms/powermac/pmac_cpufreq.c":{"insertions":728,"deletions":0},"arch/powerpc/platforms/powermac/pmac_feature.c":{"insertions":3062,"deletions":0},"arch/powerpc/platforms/powermac/pmac_low_i2c.c":{"insertions":523,"deletions":0},"arch/powerpc/platforms/powermac/pmac_nvram.c":{"insertions":584,"deletions":0},"arch/powerpc/platforms/powermac/pmac_pci.c":{"insertions":1341,"deletions":0},"arch/powerpc/platforms/powermac/pmac_pic.c":{"insertions":655,"deletions":0},"arch/powerpc/platforms/powermac/pmac_pic.h":{"insertions":11,"deletions":0},"arch/powerpc/platforms/powermac/pmac_setup.c":{"insertions":662,"deletions":0},"arch/powerpc/platforms/powermac/pmac_sleep.S":{"insertions":396,"deletions":0},"arch/powerpc/platforms/powermac/pmac_smp.c":{"insertions":716,"deletions":0},"arch/powerpc/platforms/powermac/pmac_time.c":{"insertions":291,"deletions":0},"arch/powerpc/platforms/prep/Kconfig":{"insertions":22,"deletions":0},"arch/powerpc/platforms/pseries/Kconfig":{"insertions":47,"deletions":0},"arch/powerpc/sysdev/Makefile":{"insertions":1,"deletions":0},"arch/powerpc/sysdev/mpic.c":{"insertions":904,"deletions":0},"arch/ppc/kernel/Makefile":{"insertions":21,"deletions":0},"arch/ppc/kernel/setup.c":{"insertions":8,"deletions":0},"arch/ppc/platforms/prep_setup.c":{"insertions":0,"deletions":3},"arch/ppc/syslib/Makefile":{"insertions":14,"deletions":0},"drivers/macintosh/via-pmu.c":{"insertions":1,"deletions":1},"fs/proc/proc_misc.c":{"insertions":0,"deletions":8},"include/asm-powerpc/kdebug.h":{"insertions":42,"deletions":0},"include/asm-powerpc/kprobes.h":{"insertions":67,"deletions":0},"include/asm-powerpc/mpic.h":{"insertions":279,"deletions":0},"include/asm-powerpc/reg.h":{"insertions":446,"deletions":0},"include/asm-powerpc/system.h":{"insertions":350,"deletions":0},"include/asm-ppc/smp.h":{"insertions":4,"deletions":13}}},"033ef338b6e007dc081c6282a4f2a9dd761f8cd2":{"author":"Paul Mackerras","email":"paulus@samba.org","date":"2005-10-26 07:05:24 UTC","message":"powerpc: Merge rtas.c into arch/powerpc/kernel\n\nThis splits arch/ppc64/kernel/rtas.c into arch/powerpc/kernel/rtas.c,\nwhich contains generic RTAS functions useful on any CHRP platform,\nand arch/powerpc/platforms/pseries/rtas-fw.[ch], which contain\nsome pSeries-specific firmware flashing bits.  The parts of rtas.c\nthat are to do with pSeries-specific error logging are protected\nby a new CONFIG_RTAS_ERROR_LOGGING symbol.  The inclusion of rtas.o\nis controlled by the CONFIG_PPC_RTAS symbol, and the relevant\nplatforms select that.\n\nSigned-off-by: Paul Mackerras <paulus@samba.org>","insertions":256,"deletions":199,"filepaths":{"arch/powerpc/Kconfig":{"insertions":13,"deletions":0},"arch/powerpc/kernel/Makefile":{"insertions":1,"deletions":0},"arch/powerpc/kernel/asm-offsets.c":{"insertions":3,"deletions":3},"arch/powerpc/kernel/entry_32.S":{"insertions":5,"deletions":7},"arch/powerpc/kernel/prom.c":{"insertions":0,"deletions":3},"arch/{ppc64 => powerpc}/kernel/rtas.c":{"insertions":80,"deletions":175},"arch/powerpc/platforms/pseries/Kconfig":{"insertions":0,"deletions":5},"arch/powerpc/platforms/pseries/Makefile":{"insertions":1,"deletions":1},"arch/powerpc/platforms/pseries/rtas-fw.c":{"insertions":138,"deletions":0},"arch/powerpc/platforms/pseries/rtas-fw.h":{"insertions":3,"deletions":0},"arch/powerpc/platforms/pseries/setup.c":{"insertions":6,"deletions":4},"arch/ppc64/Kconfig":{"insertions":5,"deletions":0},"arch/ppc64/kernel/Makefile":{"insertions":1,"deletions":1}}},"6431f20879e338306b997cd75a36824cf9d6e687":{"author":"Anton Blanchard","email":"anton@samba.org","date":"2012-03-21 15:47:07 UTC","message":"powerpc: Make function that parses RTAS error logs global\n\nThe IO event interrupt code has a function that finds specific\nsections in an RTAS error log. We want to use it in the EPOW\ncode so make it global.\n\nRename things to make it less cryptic:\n\nfind_xelog_section() -> get_pseries_errorlog()\nstruct pseries_elog_section -> struct pseries_errorlog\n\nSigned-off-by: Anton Blanchard <anton@samba.org>\nSigned-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>","insertions":69,"deletions":66,"filepaths":{"arch/powerpc/include/asm/rtas.h":{"insertions":33,"deletions":0},"arch/powerpc/kernel/rtas.c":{"insertions":34,"deletions":0},"arch/powerpc/platforms/pseries/io_event_irq.c":{"insertions":2,"deletions":66}}},"599d2870425dcde3bf2a7d969d5977baa57feb8b":{"author":"Greg Kurz","email":"gkurz@linux.vnet.ibm.com","date":"2014-03-19 16:02:51 UTC","message":"powerpc/le: Big endian arguments for ppc_rtas()\n\nThe ppc_rtas() syscall allows userspace to interact directly with RTAS.\nFor the moment, it assumes every thing is big endian and returns either\nEINVAL or EFAULT when called in a little endian environment.\n\nAs suggested by Benjamin, to avoid bugs when userspace wants to pass\na non 32 bit value to RTAS, it is far better to stick with a simple\nrationale: ppc_rtas() should be called with a big endian rtas_args\nstructure.\n\nWith this patch, it is now up to userspace to forge big endian arguments,\nas expected by RTAS.\n\nSigned-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>\nSigned-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>","insertions":13,"deletions":9,"filepaths":{"arch/powerpc/kernel/rtas.c":{"insertions":13,"deletions":9}}},"b79998fc2e1144919b6b02acbd407a5db1f80ac0":{"author":"Nathan Fontenot","email":"nfont@austin.ibm.com","date":"2008-07-30 16:23:27 UTC","message":"powerpc: Zero fill the return values of rtas argument buffer\n\nThe kernel copy of the rtas args struct contains the return\nvalue(s) for the specified rtas call.  These are copied back\nto user space with the assumption that every value has been\nset by the rtas call, which turns out to be not always true.\nThus userspace can see random values and think the call failed\nwhen in fact it succeeded, but for some reason didn't set one\nof the return values.\n\nThis fixes the problem by zeroing out the return value fields\nof the rtas args struct before processing the rtas call.\n\nSigned-off-by: Nathan Fontenot <nfont@austin.ibm.com>\nSigned-off-by: Paul Mackerras <paulus@samba.org>","insertions":3,"deletions":2,"filepaths":{"arch/powerpc/kernel/rtas.c":{"insertions":3,"deletions":2}}},"de6d2d1b7bf2b3a8d5e57ebffad9f2688fe00a7a":{"author":"Gavin Shan","email":"gwshan@linux.vnet.ibm.com","date":"2017-01-23 22:49:53 UTC","message":"powerpc/kernel: Use of_property_read_u32() in rtas_initialize()\n\nThis uses of_property_read_u32() in rtas_initialize() so that we\nneedn't explicitly care the CPU's endian.\n\nSigned-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>","insertions":9,"deletions":11,"filepaths":{"arch/powerpc/kernel/rtas.c":{"insertions":9,"deletions":11}}},"458148c00b97864a27ecf528a1d45a8e5ebd9bbc":{"author":"Michael Ellerman","email":"michael@ellerman.id.au","date":"2006-06-23 08:20:13 UTC","message":"[POWERPC] Setup RTAS values earlier, to enable rtas_call() earlier\n\nAlthought RTAS is instantiated when we enter the kernel, we can't actually\ncall into it until we know its entry point address. Currently we grab that\nin rtas_initialize(), however that's quite late in the boot sequence.\n\nTo enable rtas_call() earlier, we can grab the RTAS entry etc. values while\nwe're scanning the flattened device tree. There's existing code to retrieve\nthe values from /chosen, however we don't store them there anymore, so remove\nthat code.\n\nSigned-off-by: Michael Ellerman <michael@ellerman.id.au>\nSigned-off-by: Paul Mackerras <paulus@samba.org>","insertions":30,"deletions":18,"filepaths":{"arch/powerpc/kernel/prom.c":{"insertions":5,"deletions":18},"arch/powerpc/kernel/rtas.c":{"insertions":22,"deletions":0},"include/asm-powerpc/rtas.h":{"insertions":3,"deletions":0}}},"4c392e6591e3257ebd08210e1ac0a175eefd0168":{"author":"Al Viro","email":"viro@zeniv.linux.org.uk","date":"2018-05-02 13:20:48 UTC","message":"powerpc/syscalls: switch rtas(2) to SYSCALL_DEFINE\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>\n[mpe: Update sys_ni.c for s/ppc_rtas/sys_rtas/]\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>","insertions":5,"deletions":7,"filepaths":{"arch/powerpc/include/asm/syscalls.h":{"insertions":1,"deletions":1},"arch/powerpc/include/asm/systbl.h":{"insertions":1,"deletions":1},"arch/powerpc/kernel/rtas.c":{"insertions":2,"deletions":1},"arch/powerpc/kernel/systbl.S":{"insertions":0,"deletions":1},"arch/powerpc/kernel/systbl_chk.c":{"insertions":0,"deletions":1},"arch/powerpc/platforms/cell/spu_callbacks.c":{"insertions":0,"deletions":1},"kernel/sys_ni.c":{"insertions":1,"deletions":1}}},"91dc182ca6e25ee8b648ed2fb2a41859ead34903":{"author":"Dave C Boutcher","email":"sleddog@us.ibm.com","date":"2006-01-14 00:39:24 UTC","message":"[PATCH] powerpc: special-case ibm,suspend-me RTAS call\n\nHandle the ibm,suspend-me RTAS call specially.  It needs\nto be wrapped in a set of synchronization hypervisor calls\n(H_Join).  When the H_Join calls are made on all CPUs, the\nintent is that only one will return with H_Continue, meaning\nthat he is the \"last man standing\".  That CPU then issues the\nibm,suspend-me call.  What is interesting, of course, is that\nthe CPU running when the rtas syscall is made, may NOT be the\nCPU that ultimately executes the ibm,suspend-me rtas call.\n\nSigned-off-by: Dave Boutcher <sleddog@us.ibm.com>\nSigned-off-by: Paul Mackerras <paulus@samba.org>","insertions":95,"deletions":1,"filepaths":{"arch/powerpc/kernel/rtas.c":{"insertions":95,"deletions":1}}},"3df76a9dcc74d5f012b94ea01ed6e7aaf8362c5a":{"author":"Cyril Bur","email":"cyrilbur@gmail.com","date":"2015-01-21 02:32:00 UTC","message":"powerpc/pseries: Fix endian problems with LE migration\n\nRTAS events require arguments be passed in big endian while hypercalls\nhave their arguments passed in registers and the values should therefore\nbe in CPU endian.\n\nThe \"ibm,suspend_me\" 'RTAS' call makes a sequence of hypercalls to setup\none true RTAS call. This means that \"ibm,suspend_me\" is handled\nspecially in the ppc_rtas() syscall.\n\nThe ppc_rtas() syscall has its arguments in big endian and can therefore\npass these arguments directly to the RTAS call. \"ibm,suspend_me\" is\nhandled specially from within ppc_rtas() (by calling rtas_ibm_suspend_me())\nwhich has left an endian bug on little endian systems due to the\nrequirement of hypercalls. The return value from rtas_ibm_suspend_me()\ngets returned in cpu endian, and is left unconverted, also a bug on\nlittle endian systems.\n\nrtas_ibm_suspend_me() does not actually make use of the rtas_args that\nit is passed. This patch removes the convoluted use of the rtas_args\nstruct to pass params ","insertions":22,"deletions":24,"filepaths":{"arch/powerpc/include/asm/rtas.h":{"insertions":1,"deletions":1},"arch/powerpc/kernel/rtas.c":{"insertions":15,"deletions":7},"arch/powerpc/platforms/pseries/mobility.c":{"insertions":6,"deletions":16}}},"e8d5f92b8d30bb4ade76494490c3c065e12411b1":{"author":"Zqiang","email":"qiang.zhang@windriver.com","date":"2020-06-05 03:05:33 UTC","message":"usb: gadget: function: printer: fix use-after-free in __lock_acquire\n\nFix this by increase object reference count.\n\nBUG: KASAN: use-after-free in __lock_acquire+0x3fd4/0x4180\nkernel/locking/lockdep.c:3831\nRead of size 8 at addr ffff8880683b0018 by task syz-executor.0/3377\n\nCPU: 1 PID: 3377 Comm: syz-executor.0 Not tainted 5.6.11 #1\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011\nCall Trace:\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0xce/0x128 lib/dump_stack.c:118\n print_address_description.constprop.4+0x21/0x3c0 mm/kasan/report.c:374\n __kasan_report+0x131/0x1b0 mm/kasan/report.c:506\n kasan_report+0x12/0x20 mm/kasan/common.c:641\n __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:135\n __lock_acquire+0x3fd4/0x4180 kernel/locking/lockdep.c:3831\n lock_acquire+0x127/0x350 kernel/locking/lockdep.c:4488\n __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]\n _raw_spin_lock_irqsave+0x35/0x50 kernel/locking/spinlock.c:159\n pr","insertions":14,"deletions":2,"filepaths":{"drivers/usb/gadget/function/f_printer.c":{"insertions":14,"deletions":2}}},"b185f01a9ab7af586133be2555298e960237359b":{"author":"Andrzej Pietrasiewicz","email":"andrzej.p@samsung.com","date":"2015-03-03 09:52:27 UTC","message":"usb: gadget: printer: factor out f_printer\n\nThe legacy printer gadget now contains both a reusable printer function\nand legacy gadget proper implementations interwoven, but logically\nseparate. This patch factors out a reusable f_printer.\n\nSigned-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com>\nSigned-off-by: Felipe Balbi <balbi@ti.com>","insertions":1285,"deletions":1249,"filepaths":{"drivers/usb/gadget/function/f_printer.c":{"insertions":1279,"deletions":0},"drivers/usb/gadget/legacy/printer.c":{"insertions":6,"deletions":1249}}},"b26394bd567e5ebe57ec4dee7fe6cd14023c96e9":{"author":"Andrzej Pietrasiewicz","email":"andrzej.p@samsung.com","date":"2015-03-03 09:52:28 UTC","message":"usb: gadget: f_printer: convert to new function interface with backward compatibility\n\nIn order to add configfs support, a usb function must be converted to use\nthe new interface. This patch converts the function to the new interface\nand provides backward compatiblity layer, which can be removed after\nall its users are converted to use the new interface.\n\nSigned-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com>\nSigned-off-by: Felipe Balbi <balbi@ti.com>","insertions":220,"deletions":1,"filepaths":{"drivers/usb/gadget/Kconfig":{"insertions":3,"deletions":0},"drivers/usb/gadget/function/Makefile":{"insertions":2,"deletions":0},"drivers/usb/gadget/function/f_printer.c":{"insertions":184,"deletions":1},"drivers/usb/gadget/function/u_printer.h":{"insertions":30,"deletions":0},"drivers/usb/gadget/legacy/printer.c":{"insertions":1,"deletions":0}}},"ee1cd515e889d222f5a7397fead0a9db1214edea":{"author":"Andrzej Pietrasiewicz","email":"andrzej.p@samsung.com","date":"2015-03-03 09:52:32 UTC","message":"usb: gadget: printer: add configfs support\n\nAdd support for configfs interface so that f_printer can be used as a\ncomponent of usb gadgets composed with it.\n\nSigned-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com>\nSigned-off-by: Felipe Balbi <balbi@ti.com>","insertions":2,"deletions":204,"filepaths":{"Documentation/ABI/testing/configfs-usb-gadget-printer":{"insertions":0,"deletions":9},"Documentation/usb/gadget-testing.txt":{"insertions":0,"deletions":47},"drivers/usb/gadget/Kconfig":{"insertions":0,"deletions":13},"drivers/usb/gadget/function/f_printer.c":{"insertions":2,"deletions":128},"drivers/usb/gadget/function/u_printer.h":{"insertions":0,"deletions":7}}},"f2d67fec0b43edce8c416101cdc52e71145b5fef":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2020-03-30 16:03:22 UTC","message":"bpf: Undo incorrect __reg_bound_offset32 handling\n\nAnatoly has been fuzzing with kBdysch harness and reported a hang in\none of the outcomes:\n\n  0: (b7) r0 = 808464432\n  1: (7f) r0 >>= r0\n  2: (14) w0 -= 808464432\n  3: (07) r0 += 808464432\n  4: (b7) r1 = 808464432\n  5: (de) if w1 s<= w0 goto pc+0\n   R0_w=invP(id=0,umin_value=808464432,umax_value=5103431727,var_off=(0x30303020;0x10000001f)) R1_w=invP808464432 R10=fp0\n  6: (07) r0 += -2144337872\n  7: (14) w0 -= -1607454672\n  8: (25) if r0 > 0x30303030 goto pc+0\n   R0_w=invP(id=0,umin_value=271581184,umax_value=271581311,var_off=(0x10300000;0x7f)) R1_w=invP808464432 R10=fp0\n  9: (76) if w0 s>= 0x303030 goto pc+2\n  12: (95) exit\n\n  from 8 to 9: safe\n\n  from 5 to 6: R0_w=invP(id=0,umin_value=808464432,umax_value=5103431727,var_off=(0x30303020;0x10000001f)) R1_w=invP808464432 R10=fp0\n  6: (07) r0 += -2144337872\n  7: (14) w0 -= -1607454672\n  8: (25) if r0 > 0x30303030 goto pc+0\n   R0_w=invP(id=0,umin_value=271581184,umax_value=271581311,var_off","insertions":0,"deletions":19,"filepaths":{"kernel/bpf/verifier.c":{"insertions":0,"deletions":19}}},"581738a681b6faae5725c2555439189ca81c0f1f":{"author":"Yonghong Song","email":"yhs@fb.com","date":"2019-11-21 17:06:50 UTC","message":"bpf: Provide better register bounds after jmp32 instructions\n\nWith latest llvm (trunk https://github.com/llvm/llvm-project),\ntest_progs, which has +alu32 enabled, failed for strobemeta.o.\nThe verifier output looks like below with edit to replace large\ndecimal numbers with hex ones.\n 193: (85) call bpf_probe_read_user_str#114\n   R0=inv(id=0)\n 194: (26) if w0 > 0x1 goto pc+4\n   R0_w=inv(id=0,umax_value=0xffffffff00000001)\n 195: (6b) *(u16 *)(r7 +80) = r0\n 196: (bc) w6 = w0\n   R6_w=inv(id=0,umax_value=0xffffffff,var_off=(0x0; 0xffffffff))\n 197: (67) r6 <<= 32\n   R6_w=inv(id=0,smax_value=0x7fffffff00000000,umax_value=0xffffffff00000000,\n            var_off=(0x0; 0xffffffff00000000))\n 198: (77) r6 >>= 32\n   R6=inv(id=0,umax_value=0xffffffff,var_off=(0x0; 0xffffffff))\n ...\n 201: (79) r8 = *(u64 *)(r10 -416)\n   R8_w=map_value(id=0,off=40,ks=4,vs=13872,imm=0)\n 202: (0f) r8 += r6\n   R8_w=map_value(id=0,off=40,ks=4,vs=13872,umax_value=0xffffffff,var_off=(0x0; 0xffffffff))\n 203: (07) r8 += 9696\n  ","insertions":19,"deletions":0,"filepaths":{"kernel/bpf/verifier.c":{"insertions":19,"deletions":0}}},"2f9ac30a54dc0181ddac3705cdcf4775d863c530":{},"2e90ca68b0d2f5548804f22f0dd61145516171e3":{"author":"Linus Torvalds","email":"torvalds@linux-foundation.org","date":"2020-02-21 20:43:35 UTC","message":"floppy: check FDC index for errors before assigning it\n\nJordy Zomer reported a KASAN out-of-bounds read in the floppy driver in\nwait_til_ready().\n\nWhich on the face of it can't happen, since as Willy Tarreau points out,\nthe function does no particular memory access.  Except through the FDCS\nmacro, which just indexes a static allocation through teh current fdc,\nwhich is always checked against N_FDC.\n\nExcept the checking happens after we've already assigned the value.\n\nThe floppy driver is a disgrace (a lot of it going back to my original\nhorrd \"design\"), and has no real maintainer.  Nobody has the hardware,\nand nobody really cares.  But it still gets used in virtual environment\nbecause it's one of those things that everybody supports.\n\nThe whole thing should be re-written, or at least parts of it should be\nseriously cleaned up.  The 'current fdc' index, which is used by the\nFDCS macro, and which is often shadowed by a local 'fdc' variable, is a\nprime example of how not to write code.\n\nBu","insertions":5,"deletions":2,"filepaths":{"drivers/block/floppy.c":{"insertions":5,"deletions":2}}},"b46df356de8c63882cfb1ee7501bd9c772a6981b":{"author":"Joe Perches","email":"joe@perches.com","date":"2010-03-10 23:20:46 UTC","message":"drivers/block/floppy.c: use pr_<level>\n\nConvert bare printk to pr_info and pr_cont\nConvert printk(KERN_ERR to pr_err\n\nSigned-off-by: Joe Perches <joe@perches.com>\nCc: Stephen Hemminger <shemminger@vyatta.com>\nCc: Jens Axboe <jens.axboe@oracle.com>\nCc: Marcin Slusarz <marcin.slusarz@gmail.com>\nCc: Bartlomiej Zolnierkiewicz <bzolnier@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":175,"deletions":178,"filepaths":{"drivers/block/floppy.c":{"insertions":175,"deletions":178}}},"dcde237319e626d1ec3c9d8b7613032f0fd4663a":{"author":"Catalin Marinas","email":"catalin.marinas@arm.com","date":"2020-02-19 12:31:56 UTC","message":"mm: Avoid creating virtual address aliases in brk()/mmap()/mremap()\n\nCurrently the arm64 kernel ignores the top address byte passed to brk(),\nmmap() and mremap(). When the user is not aware of the 56-bit address\nlimit or relies on the kernel to return an error, untagging such\npointers has the potential to create address aliases in user-space.\nPassing a tagged address to munmap(), madvise() is permitted since the\ntagged pointer is expected to be inside an existing mapping.\n\nThe current behaviour breaks the existing glibc malloc() implementation\nwhich relies on brk() with an address beyond 56-bit to be rejected by\nthe kernel.\n\nRemove untagging in the above functions by partially reverting commit\nce18d171cb73 (\"mm: untag user pointers in mmap/munmap/mremap/brk\"). In\naddition, update the arm64 tagged-address-abi.rst document accordingly.\n\nLink: https://bugzilla.redhat.com/1797052\nFixes: ce18d171cb73 (\"mm: untag user pointers in mmap/munmap/mremap/brk\")\nCc: <stable@vger.kernel.org> # 5.4.x-\n","insertions":9,"deletions":7,"filepaths":{"Documentation/arm64/tagged-address-abi.rst":{"insertions":9,"deletions":2},"mm/mmap.c":{"insertions":0,"deletions":4},"mm/mremap.c":{"insertions":0,"deletions":1}}},"e1b832503e8f29ea6e20c30db9c3176576c0fc78":{"author":"Vincenzo Frascino","email":"vincenzo.frascino@arm.com","date":"2019-08-21 16:47:29 UTC","message":"arm64: Define Documentation/arm64/tagged-address-abi.rst\n\nOn AArch64 the TCR_EL1.TBI0 bit is set by default, allowing userspace\n(EL0) to perform memory accesses through 64-bit pointers with a non-zero\ntop byte. Introduce the document describing the relaxation of the\nsyscall ABI that allows userspace to pass certain tagged pointers to\nkernel syscalls.\n\nCc: Will Deacon <will.deacon@arm.com>\nCc: Szabolcs Nagy <szabolcs.nagy@arm.com>\nAcked-by: Kevin Brodsky <kevin.brodsky@arm.com>\nAcked-by: Andrey Konovalov <andreyknvl@google.com>\nSigned-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>\nCo-developed-by: Catalin Marinas <catalin.marinas@arm.com>\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>\nSigned-off-by: Will Deacon <will@kernel.org>","insertions":156,"deletions":0,"filepaths":{"Documentation/arm64/tagged-address-abi.rst":{"insertions":156,"deletions":0}}},"ce18d171cb7368557e6498a3ce111d7d3dc03e4d":{"author":"Catalin Marinas","email":"catalin.marinas@arm.com","date":"2019-09-25 23:49:04 UTC","message":"mm: untag user pointers in mmap/munmap/mremap/brk\n\nThere isn't a good reason to differentiate between the user address space\nlayout modification syscalls and the other memory permission/attributes\nones (e.g.  mprotect, madvise) w.r.t.  the tagged address ABI.  Untag the\nuser addresses on entry to these functions.\n\nLink: http://lkml.kernel.org/r/20190821164730.47450-2-catalin.marinas@arm.com\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>\nAcked-by: Will Deacon <will@kernel.org>\nAcked-by: Andrey Konovalov <andreyknvl@google.com>\nCc: Vincenzo Frascino <vincenzo.frascino@arm.com>\nCc: Szabolcs Nagy <szabolcs.nagy@arm.com>\nCc: Kevin Brodsky <kevin.brodsky@arm.com>\nCc: Dave P Martin <Dave.Martin@arm.com>\nCc: Dave Hansen <dave.hansen@intel.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":6,"deletions":5,"filepaths":{"mm/mmap.c":{"insertions":5,"deletions":0},"mm/mremap.c":{"insertions":1,"deletions":5}}},"a0c80efe5956ccce9fe7ae5c78542578c07bc20a":{"author":"Jiri Kosina","email":"jkosina@suse.cz","date":"2016-02-01 10:19:17 UTC","message":"floppy: fix lock_fdc() signal handling\n\nfloppy_revalidate() doesn't perform any error handling on lock_fdc()\nresult. lock_fdc() might actually be interrupted by a signal (it waits for\nfdc becoming non-busy interruptibly). In such case, floppy_revalidate()\nproceeds as if it had claimed the lock, but it fact it doesn't.\n\nIn case of multiple threads trying to open(\"/dev/fdX\"), this leads to\nserious corruptions all over the place, because all of a sudden there is\nno critical section protection (that'd otherwise be guaranteed by locked\nfd) whatsoever.\n\nWhile at this, fix the fact that the 'interruptible' parameter to\nlock_fdc() doesn't make any sense whatsoever, because we always wait\ninterruptibly anyway.\n\nMost of the lock_fdc() callsites do properly handle error (and propagate\nEINTR), but floppy_revalidate() and floppy_check_events() don't. Fix this.\n\nSpotted by 'syzkaller' tool.\n\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nTested-by: Dmitry Vyukov <dvyukov@google.com>\nSigned-off-by: J","insertions":18,"deletions":15,"filepaths":{"drivers/block/floppy.c":{"insertions":18,"deletions":15}}},"74f63f469ed1cee8305840b7bbcee2f99797cd12":{"author":"Joe Perches","email":"joe@perches.com","date":"2010-03-10 23:20:58 UTC","message":"drivers/block/floppy.c: convert int 1/0 to bool true/false\n\nVarious functions use int where bool is appropriate\nlock_fdc, wait_til_done, poll_drive, user_reset_fdc\n\nConvert to bool.\n\nSigned-off-by: Joe Perches <joe@perches.com>\nCc: Stephen Hemminger <shemminger@vyatta.com>\nCc: Jens Axboe <jens.axboe@oracle.com>\nCc: Marcin Slusarz <marcin.slusarz@gmail.com>\nCc: Bartlomiej Zolnierkiewicz <bzolnier@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":30,"deletions":30,"filepaths":{"drivers/block/floppy.c":{"insertions":30,"deletions":30}}},"b862f26fe17df273167bd47df79e8742a1bf101c":{"author":"Stephen Hemminger","email":"shemminger@vyatta.com","date":"2010-06-15 11:21:11 UTC","message":"floppy: use wait_event_interruptible\n\nConvert wait loops to use wait_event_ macros.\n\nSigned-off-by: Stephen Hemminger <shemminger@vyatta.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Jens Axboe <jaxboe@fusionio.com>","insertions":9,"deletions":50,"filepaths":{"drivers/block/floppy.c":{"insertions":9,"deletions":50}}},"52a0d61f64123ab758d8b8cc8f8ca521733d2f32":{"author":"Joe Perches","email":"joe@perches.com","date":"2010-03-10 23:20:53 UTC","message":"drivers/block/floppy.c: remove macro LOCK_FDC\n\nMacros with hidden returns aren't nice.\n\nSigned-off-by: Joe Perches <joe@perches.com>\nCc: Stephen Hemminger <shemminger@vyatta.com>\nCc: Jens Axboe <jens.axboe@oracle.com>\nCc: Marcin Slusarz <marcin.slusarz@gmail.com>\nCc: Bartlomiej Zolnierkiewicz <bzolnier@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":17,"deletions":26,"filepaths":{"drivers/block/floppy.c":{"insertions":17,"deletions":26}}},"fa0dc04df259ba2df3ce1920e9690c7842f8fa4b":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2016-01-24 21:53:50 UTC","message":"af_unix: fix struct pid memory leak\n\nDmitry reported a struct pid leak detected by a syzkaller program.\n\nBug happens in unix_stream_recvmsg() when we break the loop when a\nsignal is pending, without properly releasing scm.\n\nFixes: b3ca9b02b007 (\"net: fix multithreaded signal handling in unix recv routines\")\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nCc: Rainer Weikusat <rweikusat@mobileactivedefense.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":1,"deletions":0,"filepaths":{"net/unix/af_unix.c":{"insertions":1,"deletions":0}}},"3822b5c2fc62e3de8a0f33806ff279fb7df92432":{"author":"Rainer Weikusat","email":"rweikusat@mobileactivedefense.com","date":"2015-12-16 20:09:25 UTC","message":"af_unix: Revert 'lock_interruptible' in stream receive code\n\nWith b3ca9b02b00704053a38bfe4c31dbbb9c13595d0, the AF_UNIX SOCK_STREAM\nreceive code was changed from using mutex_lock(&u->readlock) to\nmutex_lock_interruptible(&u->readlock) to prevent signals from being\ndelayed for an indefinite time if a thread sleeping on the mutex\nhappened to be selected for handling the signal. But this was never a\nproblem with the stream receive code (as opposed to its datagram\ncounterpart) as that never went to sleep waiting for new messages with the\nmutex held and thus, wouldn't cause secondary readers to block on the\nmutex waiting for the sleeping primary reader. As the interruptible\nlocking makes the code more complicated in exchange for no benefit,\nchange it back to using mutex_lock.\n\nSigned-off-by: Rainer Weikusat <rweikusat@mobileactivedefense.com>\nAcked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":3,"deletions":10,"filepaths":{"net/unix/af_unix.c":{"insertions":3,"deletions":10}}},"b3ca9b02b00704053a38bfe4c31dbbb9c13595d0":{"author":"Rainer Weikusat","email":"rweikusat@mobileactivedefense.com","date":"2011-02-28 04:50:55 UTC","message":"net: fix multithreaded signal handling in unix recv routines\n\nThe unix_dgram_recvmsg and unix_stream_recvmsg routines in\nnet/af_unix.c utilize mutex_lock(&u->readlock) calls in order to\nserialize read operations of multiple threads on a single socket. This\nimplies that, if all n threads of a process block in an AF_UNIX recv\ncall trying to read data from the same socket, one of these threads\nwill be sleeping in state TASK_INTERRUPTIBLE and all others in state\nTASK_UNINTERRUPTIBLE. Provided that a particular signal is supposed to\nbe handled by a signal handler defined by the process and that none of\nthis threads is blocking the signal, the complete_signal routine in\nkernel/signal.c will select the 'first' such thread it happens to\nencounter when deciding which thread to notify that a signal is\nsupposed to be handled and if this is one of the TASK_UNINTERRUPTIBLE\nthreads, the signal won't be handled until the one thread not blocking\non the u->readlock mutex is woken up because some data to","insertions":13,"deletions":4,"filepaths":{"net/unix/af_unix.c":{"insertions":13,"deletions":4}}},"511885d7061eda3eb1faf3f57dcc936ff75863f1":{"author":"Davidlohr Bueso","email":"dave@stgolabs.net","date":"2019-07-24 15:23:23 UTC","message":"lib/timerqueue: Rely on rbtree semantics for next timer\n\nSimplify the timerqueue code by using cached rbtrees and rely on the tree\nleftmost node semantics to get the timer with earliest expiration time.\nThis is a drop in conversion, and therefore semantics remain untouched.\n\nThe runtime overhead of cached rbtrees is be pretty much the same as the\ncurrent head->next method, noting that when removing the leftmost node,\na common operation for the timerqueue, the rb_next(leftmost) is O(1) as\nwell, so the next timer will either be the right node or its parent.\nTherefore no extra pointer chasing. Finally, the size of the struct\ntimerqueue_head remains the same.\n\nPasses several hours of rcutorture.\n\nSigned-off-by: Davidlohr Bueso <dbueso@suse.de>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nLink: https://lkml.kernel.org/r/20190724152323.bojciei3muvfxalm@linux-r8p5","insertions":18,"deletions":25,"filepaths":{"include/linux/timerqueue.h":{"insertions":6,"deletions":7},"lib/timerqueue.c":{"insertions":12,"deletions":18}}},"1f5a24794a54588ea3a9efd521be31d826e0b9d7":{"author":"John Stultz","email":"john.stultz@linaro.org","date":"2010-12-09 20:02:18 UTC","message":"timers: Rename timerlist infrastructure to timerqueue\n\nThomas pointed out a namespace collision between the new timerlist\ninfrastructure I introduced and the existing timer_list.c\n\nSo to avoid confusion, I've renamed the timerlist infrastructure\nto timerqueue.\n\nReported-by: Thomas Gleixner <tglx@linutronix.de>\nSigned-off-by: John Stultz <john.stultz@linaro.org>","insertions":58,"deletions":58,"filepaths":{"include/linux/timerlist.h":{"insertions":0,"deletions":37},"include/linux/timerqueue.h":{"insertions":37,"deletions":0},"lib/Makefile":{"insertions":1,"deletions":1},"lib/{timerlist.c => timerqueue.c}":{"insertions":20,"deletions":20}}},"45f74264e18449cf3c93cccaf098ee6e9524ab78":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2010-12-11 11:34:34 UTC","message":"timerqueue: Make timerqueue_getnext() static inline\n\nNo point in calling a function just to dereference a pointer.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: John Stultz <john.stultz@linaro.org>","insertions":14,"deletions":15,"filepaths":{"include/linux/timerqueue.h":{"insertions":14,"deletions":1},"lib/timerqueue.c":{"insertions":0,"deletions":14}}},"87de5ac782761a3ebf806e434e8c9cc205a87274":{"author":"John Stultz","email":"john.stultz@linaro.org","date":"2010-09-21 00:42:46 UTC","message":"timers: Introduce timerlist infrastructure.\n\nThe timerlist infrastructure is a thin layer over the rbtree\ncode that implements a simple list of timers sorted by an\nexpires value, and a getnext function that provides a pointer\nto the earliest timer.\n\nThis infrastructure allows drivers and other kernel infrastructure\nto easily implement timers without duplicating code.\n\nSigned-off-by: John Stultz <john.stultz@linaro.org>\nLKML Reference: <1290136329-18291-2-git-send-email-john.stultz@linaro.org>\nReviewed-by: Thomas Gleixner <tglx@linutronix.de>\nCC: Alessandro Zummo <a.zummo@towertech.it>\nCC: Thomas Gleixner <tglx@linutronix.de>\nCC: Richard Cochran <richardcochran@gmail.com>","insertions":156,"deletions":1,"filepaths":{"include/linux/timerlist.h":{"insertions":37,"deletions":0},"lib/Makefile":{"insertions":1,"deletions":1},"lib/timerlist.c":{"insertions":118,"deletions":0}}},"c320642e1ced3b81592610e374894fea995f475b":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2015-04-14 21:08:46 UTC","message":"timerqueue: Let timerqueue_add/del return information\n\nThe hrtimer code is interested whether the added timer is the first\none to expire and whether the removed timer was the last one in the\ntree. The add/del routines have that information already. So we can\nreturn it right away instead of reevaluating it at the call site.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Peter Zijlstra <peterz@infradead.org>\nCc: Preeti U Murthy <preeti@linux.vnet.ibm.com>\nCc: Viresh Kumar <viresh.kumar@linaro.org>\nCc: Marcelo Tosatti <mtosatti@redhat.com>\nCc: Frederic Weisbecker <fweisbec@gmail.com>\nCc: John Stultz <john.stultz@linaro.org>\nLink: http://lkml.kernel.org/r/20150414203501.579063647@linutronix.de\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>","insertions":11,"deletions":7,"filepaths":{"include/linux/timerqueue.h":{"insertions":4,"deletions":4},"lib/timerqueue.c":{"insertions":7,"deletions":3}}},"2456e855354415bfaeb7badaa14e11b3e02c8466":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2016-12-25 10:38:40 UTC","message":"ktime: Get rid of the union\n\nktime is a union because the initial implementation stored the time in\nscalar nanoseconds on 64 bit machine and in a endianess optimized timespec\nvariant for 32bit machines. The Y2038 cleanup removed the timespec variant\nand switched everything to scalar nanoseconds. The union remained, but\nbecome completely pointless.\n\nGet rid of the union and just keep ktime_t as simple typedef of type s64.\n\nThe conversion was done with coccinelle and some manual mopping up.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: Peter Zijlstra <peterz@infradead.org>","insertions":200,"deletions":227,"filepaths":{"drivers/base/power/wakeup.c":{"insertions":1,"deletions":1},"drivers/media/rc/ir-rx51.c":{"insertions":1,"deletions":1},"drivers/rtc/interface.c":{"insertions":4,"deletions":4},"drivers/usb/chipidea/otg_fsm.c":{"insertions":7,"deletions":7},"drivers/usb/host/ehci-timer.c":{"insertions":1,"deletions":1},"drivers/usb/host/fotg210-hcd.c":{"insertions":1,"deletions":1},"fs/aio.c":{"insertions":2,"deletions":2},"fs/nfs/flexfilelayout/flexfilelayout.c":{"insertions":1,"deletions":2},"fs/ocfs2/cluster/heartbeat.c":{"insertions":1,"deletions":1},"fs/timerfd.c":{"insertions":13,"deletions":13},"include/linux/futex.h":{"insertions":2,"deletions":2},"include/linux/hrtimer.h":{"insertions":6,"deletions":6},"include/linux/ktime.h":{"insertions":23,"deletions":45},"include/linux/tick.h":{"insertions":1,"deletions":3},"include/linux/wait.h":{"insertions":1,"deletions":1},"include/net/red.h":{"insertions":2,"deletions":2},"include/net/sock.h":{"insertions":2,"deletions":2},"include/trace/events/alarmtimer.h":{"insertions":3,"deletions":3},"include/trace/events/timer.h":{"insertions":7,"deletions":9},"kernel/futex.c":{"insertions":2,"deletions":2},"kernel/signal.c":{"insertions":3,"deletions":3},"kernel/time/alarmtimer.c":{"insertions":10,"deletions":10},"kernel/time/clockevents.c":{"insertions":3,"deletions":3},"kernel/time/hrtimer.c":{"insertions":26,"deletions":26},"kernel/time/itimer.c":{"insertions":5,"deletions":5},"kernel/time/ntp.c":{"insertions":1,"deletions":1},"kernel/time/posix-timers.c":{"insertions":10,"deletions":10},"kernel/time/tick-broadcast-hrtimer.c":{"insertions":1,"deletions":1},"kernel/time/tick-broadcast.c":{"insertions":12,"deletions":12},"kernel/time/tick-oneshot.c":{"insertions":1,"deletions":1},"kernel/time/tick-sched.c":{"insertions":11,"deletions":11},"kernel/time/timekeeping.c":{"insertions":3,"deletions":3},"lib/timerqueue.c":{"insertions":2,"deletions":2},"net/can/bcm.c":{"insertions":14,"deletions":14},"net/can/gw.c":{"insertions":1,"deletions":1},"net/core/dev.c":{"insertions":2,"deletions":2},"net/core/skbuff.c":{"insertions":1,"deletions":1},"net/ipv4/tcp_output.c":{"insertions":2,"deletions":2},"net/ipv6/exthdrs.c":{"insertions":1,"deletions":1},"net/ipx/af_ipx.c":{"insertions":1,"deletions":1},"net/netfilter/nf_conntrack_core.c":{"insertions":1,"deletions":1},"net/netfilter/nfnetlink_log.c":{"insertions":1,"deletions":1},"net/netfilter/nfnetlink_queue.c":{"insertions":2,"deletions":2},"net/netfilter/xt_time.c":{"insertions":1,"deletions":1},"net/sched/sch_netem.c":{"insertions":1,"deletions":1},"net/socket.c":{"insertions":1,"deletions":1},"net/sunrpc/svcsock.c":{"insertions":1,"deletions":1},"sound/core/hrtimer.c":{"insertions":1,"deletions":1}}},"d852d39432f5d9822dd0ea8760573448338caf41":{"author":"Geliang Tang","email":"geliangtang@gmail.com","date":"2016-12-20 13:57:44 UTC","message":"timerqueue: Use rb_entry_safe() instead of open-coding it\n\nSigned-off-by: Geliang Tang <geliangtang@gmail.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: John Stultz <john.stultz@linaro.org>\nLink: http://lkml.kernel.org/r/0d5cf199ac43792df0b6f7e2145545c30fa1dbbe.1482222135.git.geliangtang@gmail.com\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>","insertions":1,"deletions":2,"filepaths":{"lib/timerqueue.c":{"insertions":1,"deletions":2}}},"4785305c05b25a242e5314cc821f54ade4c18810":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2021-08-25 23:17:28 UTC","message":"ipv6: use siphash in rt6_exception_hash()\n\nA group of security researchers brought to our attention\nthe weakness of hash function used in rt6_exception_hash()\n\nLets use siphash instead of Jenkins Hash, to considerably\nreduce security risks.\n\nFollowing patch deals with IPv4.\n\nFixes: 35732d01fe31 (\"ipv6: introduce a hash table to store dst cache\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: Keyu Man <kman001@ucr.edu>\nCc: Wei Wang <weiwan@google.com>\nCc: Martin KaFai Lau <kafai@fb.com>\nAcked-by: Wei Wang <weiwan@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":14,"deletions":6,"filepaths":{"net/ipv6/route.c":{"insertions":14,"deletions":6}}},"6457378fe796815c973f631a1904e147d6ee33b1":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2021-08-25 23:17:29 UTC","message":"ipv4: use siphash instead of Jenkins in fnhe_hashfun()\n\nA group of security researchers brought to our attention\nthe weakness of hash function used in fnhe_hashfun().\n\nLets use siphash instead of Jenkins Hash, to considerably\nreduce security risks.\n\nAlso remove the inline keyword, this really is distracting.\n\nFixes: d546c621542d (\"ipv4: harden fnhe_hashfun()\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: Keyu Man <kman001@ucr.edu>\nCc: Willy Tarreau <w@1wt.eu>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":6,"deletions":6,"filepaths":{"net/ipv4/route.c":{"insertions":6,"deletions":6}}},"67d6d681e15b578c1725bad8ad079e05d1c48a8e":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2021-08-29 22:16:15 UTC","message":"ipv4: make exception cache less predictible\n\nEven after commit 6457378fe796 (\"ipv4: use siphash instead of Jenkins in\nfnhe_hashfun()\"), an attacker can still use brute force to learn\nsome secrets from a victim linux host.\n\nOne way to defeat these attacks is to make the max depth of the hash\ntable bucket a random value.\n\nBefore this patch, each bucket of the hash table used to store exceptions\ncould contain 6 items under attack.\n\nAfter the patch, each bucket would contains a random number of items,\nbetween 6 and 10. The attacker can no longer infer secrets.\n\nThis is slightly increasing memory size used by the hash table,\nby 50% in average, we do not expect this to be a problem.\n\nThis patch is more complex than the prior one (IPv6 equivalent),\nbecause IPv4 was reusing the oldest entry.\nSince we need to be able to evict more than one entry per\nupdate_or_create_fnhe() call, I had to replace\nfnhe_oldest() with fnhe_remove_oldest().\n\nAlso note that we will queue extra kfree_rcu() calls under ","insertions":30,"deletions":16,"filepaths":{"net/ipv4/route.c":{"insertions":30,"deletions":16}}},"a00df2caffed3883c341d5685f830434312e4a43":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2021-08-29 22:16:14 UTC","message":"ipv6: make exception cache less predictible\n\nEven after commit 4785305c05b2 (\"ipv6: use siphash in rt6_exception_hash()\"),\nan attacker can still use brute force to learn some secrets from a victim\nlinux host.\n\nOne way to defeat these attacks is to make the max depth of the hash\ntable bucket a random value.\n\nBefore this patch, each bucket of the hash table used to store exceptions\ncould contain 6 items under attack.\n\nAfter the patch, each bucket would contains a random number of items,\nbetween 6 and 10. The attacker can no longer infer secrets.\n\nThis is slightly increasing memory size used by the hash table,\nwe do not expect this to be a problem.\n\nFollowing patch is dealing with the same issue in IPv4.\n\nFixes: 35732d01fe31 (\"ipv6: introduce a hash table to store dst cache\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: Keyu Man <kman001@ucr.edu>\nCc: Wei Wang <weiwan@google.com>\nCc: Martin KaFai Lau <kafai@fb.com>\nReviewed-by: David Ahern <dsahern@kernel.org>\nSigned-off-b","insertions":4,"deletions":1,"filepaths":{"net/ipv6/route.c":{"insertions":4,"deletions":1}}},"35732d01fe311ec13c4e42936878b782b8e7ea85":{"author":"Wei Wang","email":"weiwan@google.com","date":"2017-10-06 19:05:57 UTC","message":"ipv6: introduce a hash table to store dst cache\n\nAdd a hash table into struct rt6_info in order to store dst caches\ncreated by pmtu discovery and ip redirect in ipv6 routing code.\nAPIs to add dst cache, delete dst cache, find dst cache and update\ndst cache in the hash table are implemented and will be used in later\ncommits.\nThis is a preparation work to move all cache routes into the exception\ntable instead of getting inserted into the fib6 tree.\n\nSigned-off-by: Wei Wang <weiwan@google.com>\nSigned-off-by: Martin KaFai Lau <kafai@fb.com>\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":363,"deletions":0,"filepaths":{"include/net/ip6_fib.h":{"insertions":19,"deletions":0},"include/net/ip6_route.h":{"insertions":3,"deletions":0},"net/ipv6/route.c":{"insertions":341,"deletions":0}}},"b6b556afd21b48a372be8ed0c0f79428022e1b7c":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2019-11-04 02:24:16 UTC","message":"ipv6: use jhash2() in rt6_exception_hash()\n\nFaster jhash2() can be used instead of jhash(), since\nIPv6 addresses have the needed alignment requirement.\n\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":2,"deletions":2,"filepaths":{"net/ipv6/route.c":{"insertions":2,"deletions":2}}},"5b7c931dff03621ae7ac524c4fa280d4e5f187a4":{"author":"Daniel Lezcano","email":"dlezcano@fr.ibm.com","date":"2008-03-04 07:28:58 UTC","message":"[NETNS][IPV6] ip6_fib - add net to gc timer parameter\n\nThe fib tables are now relative to the network namespace. When the\ngarbage collector timer expires, we must have a network namespace\nparameter in order to retrieve the tables. For now this is the\ninit_net, but we should be able to have a timer per namespace and use\nthe timer callback parameter to pass the network namespace from the\nexpired timer.\n\nThe timer callback, fib6_run_gc, is actually used to be called\nsynchronously by some functions and asynchronously when the timer\nexpires.\n\nWhen the timer expires, the delay specified for fib6_run_gc parameter\nis always zero. So, I changed fib6_run_gc to not be a timer callback\nbut a function called by the timer callback and I added a timer\ncallback where its work is just to retrieve from the data arg of the\ntimer the network namespace and call fib6_run_gc with zero expiring\ntime and the network namespace parameters. That makes the code cleaner\nfor the fib6_run_gc callers.\n\nSigned-off-by: D","insertions":14,"deletions":26,"filepaths":{"include/net/ip6_fib.h":{"insertions":1,"deletions":2},"net/ipv6/ip6_fib.c":{"insertions":8,"deletions":16},"net/ipv6/ndisc.c":{"insertions":2,"deletions":3},"net/ipv6/route.c":{"insertions":3,"deletions":5}}},"457c4cbc5a3dde259d2a1f15d5f9785290397267":{"author":"Eric W. Biederman","email":"ebiederm@xmission.com","date":"2007-09-12 10:01:34 UTC","message":"[NET]: Make /proc/net per network namespace\n\nThis patch makes /proc/net per network namespace.  It modifies the global\nvariables proc_net and proc_net_stat to be per network namespace.\nThe proc_net file helpers are modified to take a network namespace argument,\nand all of their callers are fixed to pass &init_net for that argument.\nThis ensures that all of the /proc/net files are only visible and\nusable in the initial network namespace until the code behind them\nhas been updated to be handle multiple network namespaces.\n\nMaking /proc/net per namespace is necessary as at least some files\nin /proc/net depend upon the set of network devices which is per\nnetwork namespace, and even more files in /proc/net have contents\nthat are relevant to a single network namespace.\n\nSigned-off-by: Eric W. Biederman <ebiederm@xmission.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":261,"deletions":342,"filepaths":{"drivers/isdn/divert/divert_procfs.c":{"insertions":3,"deletions":4},"drivers/isdn/hardware/eicon/diva_didd.c":{"insertions":2,"deletions":3},"drivers/isdn/hysdn/hysdn_procconf.c":{"insertions":2,"deletions":3},"drivers/net/bonding/bond_main.c":{"insertions":3,"deletions":4},"drivers/net/hamradio/bpqether.c":{"insertions":2,"deletions":3},"drivers/net/hamradio/scc.c":{"insertions":2,"deletions":3},"drivers/net/hamradio/yam.c":{"insertions":2,"deletions":3},"drivers/net/ibmveth.c":{"insertions":3,"deletions":4},"drivers/net/pppoe.c":{"insertions":2,"deletions":3},"drivers/net/pppol2tp.c":{"insertions":2,"deletions":3},"drivers/net/tokenring/lanstreamer.c":{"insertions":2,"deletions":3},"drivers/net/tokenring/olympic.c":{"insertions":4,"deletions":5},"drivers/net/wireless/hostap/hostap_main.c":{"insertions":3,"deletions":4},"drivers/net/wireless/strip.c":{"insertions":2,"deletions":3},"fs/proc/Makefile":{"insertions":0,"deletions":1},"fs/proc/internal.h":{"insertions":0,"deletions":5},"fs/proc/root.c":{"insertions":5,"deletions":3},"include/linux/proc_fs.h":{"insertions":25,"deletions":19},"include/net/net_namespace.h":{"insertions":0,"deletions":5},"net/802/tr.c":{"insertions":1,"deletions":2},"net/8021q/vlanproc.c":{"insertions":2,"deletions":3},"net/appletalk/atalk_proc.c":{"insertions":3,"deletions":4},"net/atm/proc.c":{"insertions":2,"deletions":3},"net/ax25/af_ax25.c":{"insertions":6,"deletions":7},"net/core/dev.c":{"insertions":9,"deletions":10},"net/core/dev_mcast.c":{"insertions":1,"deletions":2},"net/core/neighbour.c":{"insertions":1,"deletions":2},"net/core/pktgen.c":{"insertions":4,"deletions":5},"net/core/sock.c":{"insertions":1,"deletions":2},"net/dccp/probe.c":{"insertions":3,"deletions":4},"net/decnet/af_decnet.c":{"insertions":2,"deletions":3},"net/decnet/dn_dev.c":{"insertions":2,"deletions":3},"net/decnet/dn_neigh.c":{"insertions":2,"deletions":3},"net/decnet/dn_route.c":{"insertions":2,"deletions":3},"net/ieee80211/ieee80211_module.c":{"insertions":3,"deletions":4},"net/ipv4/arp.c":{"insertions":1,"deletions":2},"net/ipv4/fib_hash.c":{"insertions":2,"deletions":3},"net/ipv4/fib_trie.c":{"insertions":8,"deletions":9},"net/ipv4/igmp.c":{"insertions":2,"deletions":3},"net/ipv4/ipconfig.c":{"insertions":1,"deletions":2},"net/ipv4/ipmr.c":{"insertions":2,"deletions":3},"net/ipv4/ipvs/ip_vs_app.c":{"insertions":2,"deletions":3},"net/ipv4/ipvs/ip_vs_conn.c":{"insertions":2,"deletions":3},"net/ipv4/ipvs/ip_vs_ctl.c":{"insertions":4,"deletions":5},"net/ipv4/ipvs/ip_vs_lblcr.c":{"insertions":2,"deletions":3},"net/ipv4/netfilter/ip_queue.c":{"insertions":4,"deletions":4},"net/ipv4/netfilter/ipt_CLUSTERIP.c":{"insertions":1,"deletions":2},"net/ipv4/netfilter/ipt_recent.c":{"insertions":2,"deletions":3},"net/ipv4/netfilter/nf_conntrack_l3proto_ipv4_compat.c":{"insertions":8,"deletions":9},"net/ipv4/proc.c":{"insertions":5,"deletions":6},"net/ipv4/raw.c":{"insertions":2,"deletions":3},"net/ipv4/route.c":{"insertions":3,"deletions":4},"net/ipv4/tcp_ipv4.c":{"insertions":2,"deletions":3},"net/ipv4/tcp_probe.c":{"insertions":3,"deletions":4},"net/ipv4/udp.c":{"insertions":2,"deletions":3},"net/ipv6/addrconf.c":{"insertions":3,"deletions":4},"net/ipv6/anycast.c":{"insertions":2,"deletions":3},"net/ipv6/ip6_flowlabel.c":{"insertions":2,"deletions":3},"net/ipv6/mcast.c":{"insertions":4,"deletions":5},"net/ipv6/netfilter/ip6_queue.c":{"insertions":3,"deletions":4},"net/ipv6/proc.c":{"insertions":8,"deletions":9},"net/ipv6/raw.c":{"insertions":2,"deletions":3},"net/ipv6/route.c":{"insertions":4,"deletions":5},"net/ipx/ipx_proc.c":{"insertions":3,"deletions":4},"net/irda/irproc.c":{"insertions":2,"deletions":3},"net/key/af_key.c":{"insertions":2,"deletions":3},"net/llc/llc_proc.c":{"insertions":3,"deletions":4},"net/netfilter/core.c":{"insertions":1,"deletions":2},"net/netfilter/nf_conntrack_expect.c":{"insertions":2,"deletions":3},"net/netfilter/nf_conntrack_standalone.c":{"insertions":6,"deletions":7},"net/netfilter/x_tables.c":{"insertions":8,"deletions":9},"net/netfilter/xt_hashlimit.c":{"insertions":5,"deletions":6},"net/netlink/af_netlink.c":{"insertions":1,"deletions":2},"net/netrom/af_netrom.c":{"insertions":6,"deletions":7},"net/packet/af_packet.c":{"insertions":2,"deletions":3},"net/rose/af_rose.c":{"insertions":8,"deletions":9},"net/rxrpc/af_rxrpc.c":{"insertions":4,"deletions":5},"net/sched/sch_api.c":{"insertions":1,"deletions":2},"net/sctp/protocol.c":{"insertions":2,"deletions":3},"net/sunrpc/stats.c":{"insertions":2,"deletions":3},"net/unix/af_unix.c":{"insertions":2,"deletions":3},"net/wanrouter/wanproc.c":{"insertions":3,"deletions":4},"net/wireless/wext.c":{"insertions":1,"deletions":2},"net/x25/x25_proc.c":{"insertions":3,"deletions":4}}},"d546c621542df9e45eedc91f35356e887ac63b7b":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2014-09-04 15:21:31 UTC","message":"ipv4: harden fnhe_hashfun()\n\nLets make this hash function a bit secure, as ICMP attacks are still\nin the wild.\n\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":6,"deletions":5,"filepaths":{"include/net/ip_fib.h":{"insertions":2,"deletions":1},"net/ipv4/route.c":{"insertions":4,"deletions":4}}},"d3a25c980fc231238256f8d80816367674e5caaf":{"author":"David S. Miller","email":"davem@davemloft.net","date":"2012-07-17 20:23:08 UTC","message":"ipv4: Fix nexthop exception hash computation.\n\nNeed to mask it with (FNHE_HASH_SIZE - 1).\n\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":12,"deletions":4,"filepaths":{"net/ipv4/route.c":{"insertions":12,"deletions":4}}},"4895c771c7f006b4b90f9d6b1d2210939ba57b38":{"author":"David S. Miller","email":"davem@davemloft.net","date":"2012-07-17 11:19:00 UTC","message":"ipv4: Add FIB nexthop exceptions.\n\nIn a regime where we have subnetted route entries, we need a way to\nstore persistent storage about destination specific learned values\nsuch as redirects and PMTU values.\n\nThis is implemented here via nexthop exceptions.\n\nThe initial implementation is a 2048 entry hash table with relaiming\nstarting at chain length 5.  A more sophisticated scheme can be\ndevised if that proves necessary.\n\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":31,"deletions":266,"filepaths":{"include/net/ip_fib.h":{"insertions":0,"deletions":18},"net/ipv4/fib_semantics.c":{"insertions":0,"deletions":23},"net/ipv4/route.c":{"insertions":31,"deletions":225}}},"aee06da6726d4981c51928c2d6d1e2cabeec7a10":{"author":"Julian Anastasov","email":"ja@ssi.bg","date":"2012-07-18 10:15:35 UTC","message":"ipv4: use seqlock for nh_exceptions\n\nUse global seqlock for the nh_exceptions. Call\nfnhe_oldest with the right hash chain. Correct the diff\nvalue for dst_set_expires.\n\nv2: after suggestions from Eric Dumazet:\n* get rid of spin lock fnhe_lock, rearrange update_or_create_fnhe\n* continue daddr search in rt_bind_exception\n\nv3:\n* remove the daddr check before seqlock in rt_bind_exception\n* restart lookup in rt_bind_exception on detected seqlock change,\nas suggested by David Miller\n\nSigned-off-by: Julian Anastasov <ja@ssi.bg>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":69,"deletions":51,"filepaths":{"include/net/ip_fib.h":{"insertions":1,"deletions":1},"net/ipv4/route.c":{"insertions":68,"deletions":50}}},"387aa65a89434abe3128d36d1a6fc3842c94905d":{"author":"Timo Teräs","email":"timo.teras@iki.fi","date":"2013-05-27 20:46:31 UTC","message":"ipv4: properly refresh rtable entries on pmtu/redirect events\n\nThis reverts commit 05ab86c5 (xfrm4: Invalidate all ipv4 routes on\nIPsec pmtu events). Flushing all cached entries is not needed.\n\nInstead, invalidate only the related next hop dsts to recheck for\nthe added next hop exception where needed. This also fixes a subtle\nrace due to bumping generation id's before updating the pmtu.\n\nCc: Steffen Klassert <steffen.klassert@secunet.com>\nSigned-off-by: Timo Teräs <timo.teras@iki.fi>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":43,"deletions":41,"filepaths":{"net/ipv4/ah4.c":{"insertions":2,"deletions":5},"net/ipv4/esp4.c":{"insertions":2,"deletions":5},"net/ipv4/ipcomp.c":{"insertions":2,"deletions":5},"net/ipv4/route.c":{"insertions":37,"deletions":26}}},"2ffae99d1fac272952b5a395759823717760ce37":{"author":"Timo Teräs","email":"timo.teras@iki.fi","date":"2013-06-27 07:27:05 UTC","message":"ipv4: use next hop exceptions also for input routes\n\nCommit d2d68ba9 (ipv4: Cache input routes in fib_info nexthops)\nassmued that \"locally destined, and routed packets, never trigger\nPMTU events or redirects that will be processed by us\".\n\nHowever, it seems that tunnel devices do trigger PMTU events in certain\ncases. At least ip_gre, ip6_gre, sit, and ipip do use the inner flow's\nskb_dst(skb)->ops->update_pmtu to propage mtu information from the\nouter flows. These can cause the inner flow mtu to be decreased. If\nnext hop exceptions are not consulted for pmtu, IP fragmentation will\nnot be done properly for these routes.\n\nIt also seems that we really need to have the PMTU information always\nfor netfilter TCPMSS clamp-to-pmtu feature to work properly.\n\nSo for the time being, cache separate copies of input routes for\neach next hop exception.\n\nSigned-off-by: Timo Teräs <timo.teras@iki.fi>\nReviewed-by: Julian Anastasov <ja@ssi.bg>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":54,"deletions":17,"filepaths":{"include/net/ip_fib.h":{"insertions":2,"deletions":1},"net/ipv4/fib_semantics.c":{"insertions":2,"deletions":1},"net/ipv4/route.c":{"insertions":50,"deletions":15}}},"cebe84c6190d741045a322f5343f717139993c08":{"author":"Xin Long","email":"lucien.xin@gmail.com","date":"2017-11-17 06:27:18 UTC","message":"route: also update fnhe_genid when updating a route cache\n\nNow when ip route flush cache and it turn out all fnhe_genid != genid.\nIf a redirect/pmtu icmp packet comes and the old fnhe is found and all\nit's members but fnhe_genid will be updated.\n\nThen next time when it looks up route and tries to rebind this fnhe to\nthe new dst, the fnhe will be flushed due to fnhe_genid != genid. It\ncauses this redirect/pmtu icmp packet acutally not to be applied.\n\nThis patch is to also reset fnhe_genid when updating a route cache.\n\nFixes: 5aad1de5ea2c (\"ipv4: use separate genid for next hop exceptions\")\nAcked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: Xin Long <lucien.xin@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":7,"deletions":2,"filepaths":{"net/ipv4/route.c":{"insertions":7,"deletions":2}}},"d52e5a7e7ca49457dd31fc8b42fb7c0d58a31221":{"author":"Sabrina Dubroca","email":"sd@queasysnail.net","date":"2018-03-14 09:21:14 UTC","message":"ipv4: lock mtu in fnhe when received PMTU < net.ipv4.route.min_pmtu\n\nPrior to the rework of PMTU information storage in commit\n2c8cec5c10bc (\"ipv4: Cache learned PMTU information in inetpeer.\"),\nwhen a PMTU event advertising a PMTU smaller than\nnet.ipv4.route.min_pmtu was received, we would disable setting the DF\nflag on packets by locking the MTU metric, and set the PMTU to\nnet.ipv4.route.min_pmtu.\n\nSince then, we don't disable DF, and set PMTU to\nnet.ipv4.route.min_pmtu, so the intermediate router that has this link\nwith a small MTU will have to drop the packets.\n\nThis patch reestablishes pre-2.6.39 behavior by splitting\nrtable->rt_pmtu into a bitfield with rt_mtu_locked and rt_pmtu.\nrt_mtu_locked indicates that we shouldn't set the DF bit on that path,\nand is checked in ip_dont_fragment().\n\nOne possible workaround is to set net.ipv4.route.min_pmtu to a value low\nenough to accommodate the lowest MTU encountered.\n\nFixes: 2c8cec5c10bc (\"ipv4: Cache learned PMTU information in inetpeer.\"","insertions":32,"deletions":10,"filepaths":{"include/net/ip.h":{"insertions":9,"deletions":2},"include/net/ip_fib.h":{"insertions":1,"deletions":0},"include/net/route.h":{"insertions":2,"deletions":1},"net/ipv4/route.c":{"insertions":19,"deletions":7},"net/ipv4/xfrm4_policy.c":{"insertions":1,"deletions":0}}},"94720e3aee6884d8c8beb678001629da60ec6366":{"author":"Julian Anastasov","email":"ja@ssi.bg","date":"2018-05-02 06:41:19 UTC","message":"ipv4: fix fnhe usage by non-cached routes\n\nAllow some non-cached routes to use non-expired fnhe:\n\n1. ip_del_fnhe: moved above and now called by find_exception.\nThe 4.5+ commit deed49df7390 expires fnhe only when caching\nroutes. Change that to:\n\n1.1. use fnhe for non-cached local output routes, with the help\nfrom (2)\n\n1.2. allow __mkroute_input to detect expired fnhe (outdated\nfnhe_gw, for example) when do_cache is false, eg. when itag!=0\nfor unicast destinations.\n\n2. __mkroute_output: keep fi to allow local routes with orig_oif != 0\nto use fnhe info even when the new route will not be cached into fnhe.\nAfter commit 839da4d98960 (\"net: ipv4: set orig_oif based on fib\nresult for local traffic\") it means all local routes will be affected\nbecause they are not cached. This change is used to solve a PMTU\nproblem with IPVS (and probably Netfilter DNAT) setups that redirect\nlocal clients from target local IP (local route to Virtual IP)\nto new remote IP target, eg. IPVS TUN real server. Loopback","insertions":53,"deletions":65,"filepaths":{"net/ipv4/route.c":{"insertions":53,"deletions":65}}},"cc5c073a693fa6ed7a207b0436114f68cce72434":{"author":"David Ahern","email":"dsahern@gmail.com","date":"2019-05-23 03:27:58 UTC","message":"ipv6: Move exception bucket to fib6_nh\n\nSimilar to the pcpu routes exceptions are really per nexthop, so move\nrt6i_exception_bucket from fib6_info to fib6_nh.\n\nTo avoid additional increases to the size of fib6_nh for a 1-bit flag,\nuse the lowest bit in the allocated memory pointer for the flushed flag.\nAdd helpers for retrieving the bucket pointer to mask off the flag.\n\nThe cleanup of the exception bucket is moved to fib6_nh_release.\n\nfib6_nh_flush_exceptions can now be called from 2 contexts:\n1. deleting a fib entry\n2. deleting a fib6_nh\n\nFor 1., fib6_nh_flush_exceptions is called for a specific fib6_info that\nis getting deleted. All exceptions in the cache using the entry are\ndeleted. For 2, the fib6_nh itself is getting destroyed so\nfib6_nh_flush_exceptions is called for a NULL fib6_info which means\nflush all entries.\n\nThe pmtu.sh selftest exercises the affected code paths - from creating\nexceptions to cleaning them up on device delete. All tests pass without\nany rcu locking or memle","insertions":126,"deletions":73,"filepaths":{"include/net/ip6_fib.h":{"insertions":3,"deletions":5},"net/ipv6/ip6_fib.c":{"insertions":0,"deletions":6},"net/ipv6/route.c":{"insertions":123,"deletions":62}}},"9fa492cdc160cd27ce1046cb36f47d3b2b1efa21":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2006-09-20 19:05:37 UTC","message":"[NETFILTER]: x_tables: simplify compat API\n\nSplit the xt_compat_match/xt_compat_target into smaller type-safe functions\nperforming just one operation. Handle all alignment and size-related\nconversions centrally in these function instead of requiring each module to\nimplement a full-blown conversion function. Replace ->compat callback by\n->compat_from_user and ->compat_to_user callbacks, responsible for\nconverting just a single private structure.\n\nSigned-off-by: Patrick McHardy <kaber@trash.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":151,"deletions":185,"filepaths":{"include/linux/netfilter/x_tables.h":{"insertions":18,"deletions":11},"net/ipv4/netfilter/ip_tables.c":{"insertions":24,"deletions":91},"net/netfilter/x_tables.c":{"insertions":109,"deletions":83}}},"b29c457a6511435960115c0f548c4360d5f4801d":{"author":"Florian Westphal","email":"fw@strlen.de","date":"2021-04-07 19:38:57 UTC","message":"netfilter: x_tables: fix compat match/target pad out-of-bound write\n\nxt_compat_match/target_from_user doesn't check that zeroing the area\nto start of next rule won't write past end of allocated ruleset blob.\n\nRemove this code and zero the entire blob beforehand.\n\nReported-by: syzbot+cfc0247ac173f597aaaa@syzkaller.appspotmail.com\nReported-by: Andy Nguyen <theflow@google.com>\nFixes: 9fa492cdc160c (\"[NETFILTER]: x_tables: simplify compat API\")\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":8,"deletions":8,"filepaths":{"net/ipv4/netfilter/arp_tables.c":{"insertions":2,"deletions":0},"net/ipv4/netfilter/ip_tables.c":{"insertions":2,"deletions":0},"net/ipv6/netfilter/ip6_tables.c":{"insertions":2,"deletions":0},"net/netfilter/x_tables.c":{"insertions":2,"deletions":8}}},"2722971cbe831117686039d5c334f2c0f560be13":{"author":"Dmitry Mishin","email":"dim@openvz.org","date":"2006-04-01 10:25:19 UTC","message":"[NETFILTER]: iptables 32bit compat layer\n\nThis patch extends current iptables compatibility layer in order to get\n32bit iptables to work on 64bit kernel. Current layer is insufficient due\nto alignment checks both in kernel and user space tools.\n\nPatch is for current net-2.6.17 with addition of move of ipt_entry_{match|\ntarget} definitions to xt_entry_{match|target}.\n\nSigned-off-by: Dmitry Mishin <dim@openvz.org>\nAcked-off-by: Kirill Korotaev <dev@openvz.org>\nSigned-off-by: Patrick McHardy <kaber@trash.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":208,"deletions":1281,"filepaths":{"include/linux/netfilter/x_tables.h":{"insertions":0,"deletions":67},"include/linux/netfilter_ipv4/ip_tables.h":{"insertions":0,"deletions":18},"net/compat.c":{"insertions":2,"deletions":1},"net/ipv4/netfilter/ip_tables.c":{"insertions":206,"deletions":1082},"net/netfilter/x_tables.c":{"insertions":0,"deletions":113}}},"37f9f7334b86ffc3b8a1921842ae33cb9aa22ee3":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2006-03-21 01:59:06 UTC","message":"[NETFILTER]: xt_tables: add centralized error checking\n\nIntroduce new functions for common match/target checks (private data\nsize, valid hooks, valid tables and valid protocols) to get more consistent\nerror reporting and to avoid each module duplicating them.\n\nSigned-off-by: Patrick McHardy <kaber@trash.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":11,"deletions":84,"filepaths":{"include/linux/netfilter/x_tables.h":{"insertions":4,"deletions":19},"net/netfilter/x_tables.c":{"insertions":7,"deletions":65}}},"c4b885139203d37f76662c37ae645fe8e0f4e4e5":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2006-03-21 02:03:40 UTC","message":"[NETFILTER]: x_tables: replace IPv4/IPv6 policy match by address family independant version\n\nSigned-off-by: Patrick McHardy <kaber@trash.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":476,"deletions":314,"filepaths":{"include/linux/netfilter/x_tables.h":{"insertions":0,"deletions":4},"include/linux/netfilter/xt_policy.h":{"insertions":0,"deletions":58},"include/linux/netfilter_ipv4/ipt_policy.h":{"insertions":53,"deletions":16},"include/linux/netfilter_ipv6/ip6t_policy.h":{"insertions":53,"deletions":16},"net/ipv4/netfilter/Kconfig":{"insertions":10,"deletions":0},"net/ipv4/netfilter/Makefile":{"insertions":1,"deletions":0},"net/ipv4/netfilter/ipt_policy.c":{"insertions":174,"deletions":0},"net/ipv6/netfilter/Kconfig":{"insertions":10,"deletions":0},"net/ipv6/netfilter/Makefile":{"insertions":1,"deletions":0},"net/ipv6/netfilter/ip6t_policy.c":{"insertions":174,"deletions":0},"net/netfilter/Kconfig":{"insertions":0,"deletions":10},"net/netfilter/Makefile":{"insertions":0,"deletions":1},"net/netfilter/xt_policy.c":{"insertions":0,"deletions":209}}},"91270cf81765152f6e77953440beb4d3b34a71b5":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2006-08-22 07:43:38 UTC","message":"[NETFILTER]: x_tables: add data member to struct xt_match\n\nShared match functions can use this to make runtime decisions basen on the\nused match.\n\nSigned-off-by: Patrick McHardy <kaber@trash.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":0,"deletions":3,"filepaths":{"include/linux/netfilter/x_tables.h":{"insertions":0,"deletions":3}}},"46c5ea3c9ae7fbc6e52a13c92e59d4fc7f4ca80a":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2006-05-02 03:12:22 UTC","message":"[NETFILTER] x_tables: fix compat related crash on non-x86\n\nWhen iptables userspace adds an ipt_standard_target, it calculates the size\nof the entire entry as:\n\nsizeof(struct ipt_entry) + XT_ALIGN(sizeof(struct ipt_standard_target))\n\nipt_standard_target looks like this:\n\n  struct xt_standard_target\n  {\n        struct xt_entry_target target;\n        int verdict;\n  };\n\nxt_entry_target contains a pointer, so when compiled for 64 bit the\nstructure gets an extra 4 byte of padding at the end. On 32 bit\narchitectures where iptables aligns to 8 byte it will also have 4\nbyte padding at the end because it is only 36 bytes large.\n\nThe compat_ipt_standard_fn in the kernel adjusts the offsets by\n\n  sizeof(struct ipt_standard_target) - sizeof(struct compat_ipt_standard_target),\n\nwhich will always result in 4, even if the structure from userspace\nwas already padded to a multiple of 8. On x86 this works out by\naccident because userspace only aligns to 4, on all other\narchitectures this is broken and cau","insertions":19,"deletions":22,"filepaths":{"include/linux/netfilter/x_tables.h":{"insertions":0,"deletions":8},"net/ipv4/netfilter/ip_tables.c":{"insertions":19,"deletions":14}}},"7800007c1e2d42cd4120b87b0ba3f3480f17f30a":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2006-05-04 06:20:27 UTC","message":"[NETFILTER]: x_tables: don't use __copy_{from,to}_user on unchecked memory in compat layer\n\nNoticed by Linus Torvalds <torvalds@osdl.org>\n\nSigned-off-by: Patrick McHardy <kaber@trash.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":5,"deletions":5,"filepaths":{"net/ipv4/netfilter/ip_tables.c":{"insertions":3,"deletions":3},"net/netfilter/x_tables.c":{"insertions":2,"deletions":2}}},"d6a2ba07c31b0497fc82a8c175400ea8747da2ef":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2007-12-18 06:26:54 UTC","message":"[NETFILTER]: arp_tables: add compat support\n\nSigned-off-by: Patrick McHardy <kaber@trash.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":58,"deletions":721,"filepaths":{"include/linux/netfilter_arp/arp_tables.h":{"insertions":0,"deletions":31},"net/ipv4/netfilter/arp_tables.c":{"insertions":58,"deletions":690}}},"8dddd32756f6fe8e4e82a63361119b7e2384e02f":{"author":"Florian Westphal","email":"fw@strlen.de","date":"2016-04-01 12:17:32 UTC","message":"netfilter: arp_tables: simplify translate_compat_table args\n\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":46,"deletions":36,"filepaths":{"net/ipv4/netfilter/arp_tables.c":{"insertions":46,"deletions":36}}},"17a49cd549d9dc8707dc9262210166455c612dde":{"author":"Hongxu Jia","email":"hongxu.jia@windriver.com","date":"2016-11-30 02:56:26 UTC","message":"netfilter: arp_tables: fix invoking 32bit \"iptable -P INPUT ACCEPT\" failed in 64bit kernel\n\nSince 09d9686047db (\"netfilter: x_tables: do compat validation via\ntranslate_table\"), it used compatr structure to assign newinfo\nstructure.  In translate_compat_table of ip_tables.c and ip6_tables.c,\nit used compatr->hook_entry to replace info->hook_entry and\ncompatr->underflow to replace info->underflow, but not do the same\nreplacement in arp_tables.c.\n\nIt caused invoking 32-bit \"arptbale -P INPUT ACCEPT\" failed in 64bit\nkernel.\n--------------------------------------\nroot@qemux86-64:~# arptables -P INPUT ACCEPT\nroot@qemux86-64:~# arptables -P INPUT ACCEPT\nERROR: Policy for `INPUT' offset 448 != underflow 0\narptables: Incompatible with this kernel\n--------------------------------------\n\nFixes: 09d9686047db (\"netfilter: x_tables: do compat validation via translate_table\")\nSigned-off-by: Hongxu Jia <hongxu.jia@windriver.com>\nAcked-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayus","insertions":2,"deletions":2,"filepaths":{"net/ipv4/netfilter/arp_tables.c":{"insertions":2,"deletions":2}}},"7d3f843eed29222254c9feab481f55175a1afcc9":{"author":"Florian Westphal","email":"fw@strlen.de","date":"2016-04-01 12:17:30 UTC","message":"netfilter: ip_tables: simplify translate_compat_table args\n\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":35,"deletions":24,"filepaths":{"net/ipv4/netfilter/ip_tables.c":{"insertions":35,"deletions":24}}},"6e23ae2a48750bda407a4a58f52a4865d7308bf5":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2007-11-20 02:53:30 UTC","message":"[NETFILTER]: Introduce NF_INET_ hook values\n\nThe IPv4 and IPv6 hook values are identical, yet some code tries to figure\nout the \"correct\" value by looking at the address family. Introduce NF_INET_*\nvalues for both IPv4 and IPv6. The old values are kept in a #ifndef __KERNEL__\nsection for userspace compatibility.\n\nSigned-off-by: Patrick McHardy <kaber@trash.net>\nAcked-by: Herbert Xu <herbert@gondor.apana.org.au>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":302,"deletions":321,"filepaths":{"include/linux/netfilter.h":{"insertions":0,"deletions":9},"include/linux/netfilter/x_tables.h":{"insertions":2,"deletions":2},"include/linux/netfilter_ipv4.h":{"insertions":1,"deletions":1},"include/linux/netfilter_ipv4/ip_tables.h":{"insertions":4,"deletions":4},"include/linux/netfilter_ipv6.h":{"insertions":2,"deletions":1},"include/linux/netfilter_ipv6/ip6_tables.h":{"insertions":4,"deletions":4},"include/net/netfilter/nf_nat.h":{"insertions":1,"deletions":2},"net/bridge/br_netfilter.c":{"insertions":6,"deletions":6},"net/compat.c":{"insertions":3,"deletions":3},"net/ipv4/ip_forward.c":{"insertions":1,"deletions":1},"net/ipv4/ip_input.c":{"insertions":2,"deletions":2},"net/ipv4/ip_output.c":{"insertions":6,"deletions":6},"net/ipv4/ipmr.c":{"insertions":1,"deletions":1},"net/ipv4/ipvs/ip_vs_core.c":{"insertions":9,"deletions":9},"net/ipv4/ipvs/ip_vs_xmit.c":{"insertions":1,"deletions":1},"net/ipv4/netfilter.c":{"insertions":4,"deletions":4},"net/ipv4/netfilter/ip_tables.c":{"insertions":22,"deletions":22},"net/ipv4/netfilter/ipt_MASQUERADE.c":{"insertions":2,"deletions":2},"net/ipv4/netfilter/ipt_NETMAP.c":{"insertions":6,"deletions":7},"net/ipv4/netfilter/ipt_REDIRECT.c":{"insertions":4,"deletions":4},"net/ipv4/netfilter/ipt_REJECT.c":{"insertions":3,"deletions":3},"net/ipv4/netfilter/ipt_SAME.c":{"insertions":3,"deletions":4},"net/ipv4/netfilter/ipt_owner.c":{"insertions":1,"deletions":2},"net/ipv4/netfilter/iptable_filter.c":{"insertions":10,"deletions":12},"net/ipv4/netfilter/iptable_mangle.c":{"insertions":20,"deletions":20},"net/ipv4/netfilter/iptable_raw.c":{"insertions":7,"deletions":7},"net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c":{"insertions":9,"deletions":9},"net/ipv4/netfilter/nf_conntrack_proto_icmp.c":{"insertions":1,"deletions":1},"net/ipv4/netfilter/nf_nat_core.c":{"insertions":7,"deletions":7},"net/ipv4/netfilter/nf_nat_h323.c":{"insertions":4,"deletions":4},"net/ipv4/netfilter/nf_nat_helper.c":{"insertions":2,"deletions":2},"net/ipv4/netfilter/nf_nat_pptp.c":{"insertions":2,"deletions":2},"net/ipv4/netfilter/nf_nat_rule.c":{"insertions":13,"deletions":15},"net/ipv4/netfilter/nf_nat_sip.c":{"insertions":2,"deletions":2},"net/ipv4/netfilter/nf_nat_standalone.c":{"insertions":7,"deletions":7},"net/ipv4/raw.c":{"insertions":1,"deletions":1},"net/ipv4/xfrm4_input.c":{"insertions":1,"deletions":1},"net/ipv4/xfrm4_output.c":{"insertions":2,"deletions":2},"net/ipv4/xfrm4_state.c":{"insertions":1,"deletions":1},"net/ipv6/ip6_input.c":{"insertions":2,"deletions":4},"net/ipv6/ip6_output.c":{"insertions":6,"deletions":8},"net/ipv6/mcast.c":{"insertions":3,"deletions":3},"net/ipv6/ndisc.c":{"insertions":2,"deletions":4},"net/ipv6/netfilter.c":{"insertions":3,"deletions":3},"net/ipv6/netfilter/ip6_tables.c":{"insertions":13,"deletions":13},"net/ipv6/netfilter/ip6t_REJECT.c":{"insertions":3,"deletions":3},"net/ipv6/netfilter/ip6t_eui64.c":{"insertions":2,"deletions":2},"net/ipv6/netfilter/ip6t_owner.c":{"insertions":1,"deletions":2},"net/ipv6/netfilter/ip6table_filter.c":{"insertions":10,"deletions":12},"net/ipv6/netfilter/ip6table_mangle.c":{"insertions":20,"deletions":20},"net/ipv6/netfilter/ip6table_raw.c":{"insertions":7,"deletions":7},"net/ipv6/netfilter/nf_conntrack_l3proto_ipv6.c":{"insertions":6,"deletions":6},"net/ipv6/netfilter/nf_conntrack_proto_icmpv6.c":{"insertions":1,"deletions":1},"net/ipv6/raw.c":{"insertions":1,"deletions":1},"net/ipv6/xfrm6_input.c":{"insertions":1,"deletions":1},"net/ipv6/xfrm6_output.c":{"insertions":1,"deletions":1},"net/ipv6/xfrm6_state.c":{"insertions":1,"deletions":1},"net/netfilter/nf_conntrack_netlink.c":{"insertions":4,"deletions":4},"net/netfilter/nf_conntrack_proto_tcp.c":{"insertions":3,"deletions":1},"net/netfilter/nf_conntrack_proto_udp.c":{"insertions":3,"deletions":1},"net/netfilter/nf_conntrack_proto_udplite.c":{"insertions":2,"deletions":1},"net/netfilter/xt_CLASSIFY.c":{"insertions":6,"deletions":6},"net/netfilter/xt_TCPMSS.c":{"insertions":6,"deletions":6},"net/netfilter/xt_mac.c":{"insertions":6,"deletions":6},"net/netfilter/xt_physdev.c":{"insertions":3,"deletions":3},"net/netfilter/xt_policy.c":{"insertions":3,"deletions":2},"net/netfilter/xt_realm.c":{"insertions":2,"deletions":2},"net/sched/sch_ingress.c":{"insertions":2,"deletions":2},"security/selinux/hooks.c":{"insertions":2,"deletions":2}}},"09d9686047dbbe1cf4faa558d3ecc4aae2046054":{"author":"Florian Westphal","email":"fw@strlen.de","date":"2016-04-01 12:17:34 UTC","message":"netfilter: x_tables: do compat validation via translate_table\n\nThis looks like refactoring, but its also a bug fix.\n\nProblem is that the compat path (32bit iptables, 64bit kernel) lacks a few\nsanity tests that are done in the normal path.\n\nFor example, we do not check for underflows and the base chain policies.\n\nWhile its possible to also add such checks to the compat path, its more\ncopy&pastry, for instance we cannot reuse check_underflow() helper as\ne->target_offset differs in the compat case.\n\nOther problem is that it makes auditing for validation errors harder; two\nplaces need to be checked and kept in sync.\n\nAt a high level 32 bit compat works like this:\n1- initial pass over blob:\n   validate match/entry offsets, bounds checking\n   lookup all matches and targets\n   do bookkeeping wrt. size delta of 32/64bit structures\n   assign match/target.u.kernel pointer (points at kernel\n   implementation, needed to access ->compatsize etc.)\n\n2- allocate memory according to the total bookkeepin","insertions":342,"deletions":83,"filepaths":{"net/ipv4/netfilter/arp_tables.c":{"insertions":91,"deletions":23},"net/ipv4/netfilter/ip_tables.c":{"insertions":126,"deletions":29},"net/ipv6/netfilter/ip6_tables.c":{"insertions":125,"deletions":23},"net/netfilter/x_tables.c":{"insertions":0,"deletions":8}}},"3bc3fe5eed5e866c0871db6d745f3bf58af004ef":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2007-12-18 05:50:37 UTC","message":"[NETFILTER]: ip6_tables: add compat support\n\nSigned-off-by: Patrick McHardy <kaber@trash.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":162,"deletions":802,"filepaths":{"include/linux/netfilter_ipv6/ip6_tables.h":{"insertions":0,"deletions":35},"net/compat.c":{"insertions":106,"deletions":0},"net/ipv6/netfilter/ip6_tables.c":{"insertions":56,"deletions":767}}},"329a0807124f12fe1c8032f95d8a8eb47047fb0e":{"author":"Florian Westphal","email":"fw@strlen.de","date":"2016-04-01 12:17:31 UTC","message":"netfilter: ip6_tables: simplify translate_compat_table args\n\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":35,"deletions":24,"filepaths":{"net/ipv6/netfilter/ip6_tables.c":{"insertions":35,"deletions":24}}},"ec6af094ea28f0f2dda1a6a33b14cd57e36a9755":{"author":"Willem de Bruijn","email":"willemb@google.com","date":"2021-12-15 14:39:37 UTC","message":"net/packet: rx_owner_map depends on pg_vec\n\nPacket sockets may switch ring versions. Avoid misinterpreting state\nbetween versions, whose fields share a union. rx_owner_map is only\nallocated with a packet ring (pg_vec) and both are swapped together.\nIf pg_vec is NULL, meaning no packet ring was allocated, then neither\nwas rx_owner_map. And the field may be old state from a tpacket_v3.\n\nFixes: 61fad6816fc1 (\"net/packet: tpacket_rcv: avoid a producer race condition\")\nReported-by: Syzbot <syzbot+1ac0994a0a0c55151121@syzkaller.appspotmail.com>\nSigned-off-by: Willem de Bruijn <willemb@google.com>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nLink: https://lore.kernel.org/r/20211215143937.106178-1-willemdebruijn.kernel@gmail.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>","insertions":3,"deletions":2,"filepaths":{"net/packet/af_packet.c":{"insertions":3,"deletions":2}}},"61fad6816fc10fb8793a925d5c1256d1c3db0cd2":{"author":"Willem de Bruijn","email":"willemb@google.com","date":"2020-03-13 16:18:09 UTC","message":"net/packet: tpacket_rcv: avoid a producer race condition\n\nPACKET_RX_RING can cause multiple writers to access the same slot if a\nfast writer wraps the ring while a slow writer is still copying. This\nis particularly likely with few, large, slots (e.g., GSO packets).\n\nSynchronize kernel thread ownership of rx ring slots with a bitmap.\n\nWriters acquire a slot race-free by testing tp_status TP_STATUS_KERNEL\nwhile holding the sk receive queue lock. They release this lock before\ncopying and set tp_status to TP_STATUS_USER to release to userspace\nwhen done. During copying, another writer may take the lock, also see\nTP_STATUS_KERNEL, and start writing to the same slot.\n\nIntroduce a new rx_owner_map bitmap with a bit per slot. To acquire a\nslot, test and set with the lock held. To release race-free, update\ntp_status and owner bit as a transaction, so take the lock again.\n\nThis is the one of a variety of discussed options (see Link below):\n\n* instead of a shadow ring, embed the data in the slot i","insertions":25,"deletions":1,"filepaths":{"net/packet/af_packet.c":{"insertions":21,"deletions":0},"net/packet/internal.h":{"insertions":4,"deletions":1}}},"3a7ad0634f0986d807772ba74f66f7c3a73612e5":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2018-08-29 18:50:12 UTC","message":"Revert \"packet: switch kvzalloc to allocate memory\"\n\nThis reverts commit 71e41286203c017d24f041a7cd71abea7ca7b1e0.\n\nmmap()/munmap() can not be backed by kmalloced pages :\n\nWe fault in :\n\n    VM_BUG_ON_PAGE(PageSlab(page), page);\n\n    unmap_single_vma+0x8a/0x110\n    unmap_vmas+0x4b/0x90\n    unmap_region+0xc9/0x140\n    do_munmap+0x274/0x360\n    vm_munmap+0x81/0xc0\n    SyS_munmap+0x2b/0x40\n    do_syscall_64+0x13e/0x1c0\n    entry_SYSCALL_64_after_hwframe+0x42/0xb7\n\nFixes: 71e41286203c (\"packet: switch kvzalloc to allocate memory\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: John Sperbeck <jsperbeck@google.com>\nBisected-by: John Sperbeck <jsperbeck@google.com>\nCc: Zhang Yu <zhangyu31@baidu.com>\nCc: Li RongQing <lirongqing@baidu.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":32,"deletions":13,"filepaths":{"net/packet/af_packet.c":{"insertions":31,"deletions":13},"net/packet/internal.h":{"insertions":1,"deletions":0}}},"b166a20b07382b8bc1dcee2a448715c9c2c81b5b":{"author":"Or Cohen","email":"orcohen@paloaltonetworks.com","date":"2021-04-13 18:10:31 UTC","message":"net/sctp: fix race condition in sctp_destroy_sock\n\nIf sctp_destroy_sock is called without sock_net(sk)->sctp.addr_wq_lock\nheld and sp->do_auto_asconf is true, then an element is removed\nfrom the auto_asconf_splist without any proper locking.\n\nThis can happen in the following functions:\n1. In sctp_accept, if sctp_sock_migrate fails.\n2. In inet_create or inet6_create, if there is a bpf program\n   attached to BPF_CGROUP_INET_SOCK_CREATE which denies\n   creation of the sctp socket.\n\nThe bug is fixed by acquiring addr_wq_lock in sctp_destroy_sock\ninstead of sctp_close.\n\nThis addresses CVE-2021-23133.\n\nReported-by: Or Cohen <orcohen@paloaltonetworks.com>\nReviewed-by: Xin Long <lucien.xin@gmail.com>\nFixes: 610236587600 (\"bpf: Add new cgroup attach type to enable sock modifications\")\nSigned-off-by: Or Cohen <orcohen@paloaltonetworks.com>\nAcked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":5,"deletions":8,"filepaths":{"net/sctp/socket.c":{"insertions":5,"deletions":8}}},"2d45a02d0166caf2627fe91897c6ffc3b19514c4":{"author":"Marcelo Ricardo Leitner","email":"marcelo.leitner@gmail.com","date":"2015-06-12 13:16:41 UTC","message":"sctp: fix ASCONF list handling\n\n->auto_asconf_splist is per namespace and mangled by functions like\nsctp_setsockopt_auto_asconf() which doesn't guarantee any serialization.\n\nAlso, the call to inet_sk_copy_descendant() was backuping\n->auto_asconf_list through the copy but was not honoring\n->do_auto_asconf, which could lead to list corruption if it was\ndifferent between both sockets.\n\nThis commit thus fixes the list handling by using ->addr_wq_lock\nspinlock to protect the list. A special handling is done upon socket\ncreation and destruction for that. Error handlig on sctp_init_sock()\nwill never return an error after having initialized asconf, so\nsctp_destroy_sock() can be called without addrq_wq_lock. The lock now\nwill be take on sctp_close_sock(), before locking the socket, so we\ndon't do it in inverse order compared to sctp_addr_wq_timeout_handler().\n\nInstead of taking the lock on sctp_sock_migrate() for copying and\nrestoring the list values, it's preferred to avoid rewritting it by\nimp","insertions":37,"deletions":11,"filepaths":{"include/net/netns/sctp.h":{"insertions":1,"deletions":0},"include/net/sctp/structs.h":{"insertions":4,"deletions":0},"net/sctp/socket.c":{"insertions":32,"deletions":11}}},"9f7d653b67aed2d92540fbb0a8adaf32fcf352ae":{"author":"Michio Honda","email":"micchie@sfc.wide.ad.jp","date":"2011-04-26 10:32:51 UTC","message":"sctp: Add Auto-ASCONF support (core).\n\nSCTP reconfigure the IP addresses in the association by using\nASCONF chunks as mentioned in RFC5061.  For example, we can\nstart to use the newly configured IP address in the existing\nassociation.  This patch implements automatic ASCONF operation\nin the SCTP stack with address events in the host computer,\nwhich is called auto_asconf.\n\nSigned-off-by: Michio Honda <micchie@sfc.wide.ad.jp>\nSigned-off-by: YOSHIFUJI Hideaki <yoshfuji@linux-ipv6.org>\nAcked-by: Wei Yongjun <yjwei@cn.fujitsu.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":223,"deletions":4,"filepaths":{"include/net/sctp/sctp.h":{"insertions":2,"deletions":0},"include/net/sctp/structs.h":{"insertions":15,"deletions":0},"net/sctp/bind_addr.c":{"insertions":15,"deletions":0},"net/sctp/ipv6.c":{"insertions":2,"deletions":0},"net/sctp/protocol.c":{"insertions":147,"deletions":0},"net/sctp/socket.c":{"insertions":42,"deletions":4}}},"6dfe4b97e08ec3d1a593fdaca099f0ef0a3a19e6":{"author":"Xin Long","email":"lucien.xin@gmail.com","date":"2017-06-10 06:56:56 UTC","message":"sctp: fix recursive locking warning in sctp_do_peeloff\n\nDmitry got the following recursive locking report while running syzkaller\nfuzzer, the Call Trace:\n __dump_stack lib/dump_stack.c:16 [inline]\n dump_stack+0x2ee/0x3ef lib/dump_stack.c:52\n print_deadlock_bug kernel/locking/lockdep.c:1729 [inline]\n check_deadlock kernel/locking/lockdep.c:1773 [inline]\n validate_chain kernel/locking/lockdep.c:2251 [inline]\n __lock_acquire+0xef2/0x3430 kernel/locking/lockdep.c:3340\n lock_acquire+0x2a1/0x630 kernel/locking/lockdep.c:3755\n lock_sock_nested+0xcb/0x120 net/core/sock.c:2536\n lock_sock include/net/sock.h:1460 [inline]\n sctp_close+0xcd/0x9d0 net/sctp/socket.c:1497\n inet_release+0xed/0x1c0 net/ipv4/af_inet.c:425\n inet6_release+0x50/0x70 net/ipv6/af_inet6.c:432\n sock_release+0x8d/0x1e0 net/socket.c:597\n __sock_create+0x38b/0x870 net/socket.c:1226\n sock_create+0x7f/0xa0 net/socket.c:1237\n sctp_do_peeloff+0x1a2/0x440 net/sctp/socket.c:4879\n sctp_getsockopt_peeloff net/sctp/socket.c:4914 [inline]\n s","insertions":2,"deletions":2,"filepaths":{"net/sctp/socket.c":{"insertions":2,"deletions":2}}},"1abd165ed757db1afdefaac0a4bc8a70f97d258c":{"author":"Daniel Borkmann","email":"dborkman@redhat.com","date":"2013-06-06 13:53:47 UTC","message":"net: sctp: fix NULL pointer dereference in socket destruction\n\nWhile stress testing sctp sockets, I hit the following panic:\n\nBUG: unable to handle kernel NULL pointer dereference at 0000000000000020\nIP: [<ffffffffa0490c4e>] sctp_endpoint_free+0xe/0x40 [sctp]\nPGD 7cead067 PUD 7ce76067 PMD 0\nOops: 0000 [#1] SMP\nModules linked in: sctp(F) libcrc32c(F) [...]\nCPU: 7 PID: 2950 Comm: acc Tainted: GF            3.10.0-rc2+ #1\nHardware name: Dell Inc. PowerEdge T410/0H19HD, BIOS 1.6.3 02/01/2011\ntask: ffff88007ce0e0c0 ti: ffff88007b568000 task.ti: ffff88007b568000\nRIP: 0010:[<ffffffffa0490c4e>]  [<ffffffffa0490c4e>] sctp_endpoint_free+0xe/0x40 [sctp]\nRSP: 0018:ffff88007b569e08  EFLAGS: 00010292\nRAX: 0000000000000000 RBX: ffff88007db78a00 RCX: dead000000200200\nRDX: ffffffffa049fdb0 RSI: ffff8800379baf38 RDI: 0000000000000000\nRBP: ffff88007b569e18 R08: ffff88007c230da0 R09: 0000000000000001\nR10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000\nR13: ffff880077990d00 R14: 00000000000000","insertions":6,"deletions":0,"filepaths":{"net/sctp/socket.c":{"insertions":6,"deletions":0}}},"5bc0b3bfa758e4ae49c94e31c1edb9a5f10a8060":{"author":"Eric Dumazet","email":"dada1@cosmosbay.com","date":"2008-11-25 21:53:27 UTC","message":"net: Make sure BHs are disabled in sock_prot_inuse_add()\n\nprot->destroy is not called with BH disabled. So we must add\nexplicit BH disable around call to sock_prot_inuse_add()\nin sctp_destroy_sock()\n\nSigned-off-by: Eric Dumazet <dada1@cosmosbay.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":2,"deletions":0,"filepaths":{"net/sctp/socket.c":{"insertions":2,"deletions":0}}},"c518adafa39f37858697ac9309c6cf1805581446":{"author":"Alexander Popov","email":"alex.popov@linux.com","date":"2021-02-01 08:47:19 UTC","message":"vsock: fix the race conditions in multi-transport support\n\nThere are multiple similar bugs implicitly introduced by the\ncommit c0cfa2d8a788fcf4 (\"vsock: add multi-transports support\") and\ncommit 6a2c0962105ae8ce (\"vsock: prevent transport modules unloading\").\n\nThe bug pattern:\n [1] vsock_sock.transport pointer is copied to a local variable,\n [2] lock_sock() is called,\n [3] the local variable is used.\nVSOCK multi-transport support introduced the race condition:\nvsock_sock.transport value may change between [1] and [2].\n\nLet's copy vsock_sock.transport pointer to local variables after\nthe lock_sock() call.\n\nFixes: c0cfa2d8a788fcf4 (\"vsock: add multi-transports support\")\nSigned-off-by: Alexander Popov <alex.popov@linux.com>\nReviewed-by: Stefano Garzarella <sgarzare@redhat.com>\nReviewed-by: Jorgen Hansen <jhansen@vmware.com>\nLink: https://lore.kernel.org/r/20210201084719.2257066-1-alex.popov@linux.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>","insertions":12,"deletions":5,"filepaths":{"net/vmw_vsock/af_vsock.c":{"insertions":12,"deletions":5}}},"d021c344051af91f42c5ba9fdedc176740cbd238":{"author":"Andy King","email":"acking@vmware.com","date":"2013-02-06 14:23:56 UTC","message":"VSOCK: Introduce VM Sockets\n\nVM Sockets allows communication between virtual machines and the hypervisor.\nUser level applications both in a virtual machine and on the host can use the\nVM Sockets API, which facilitates fast and efficient communication between\nguest virtual machines and their host.  A socket address family, designed to be\ncompatible with UDP and TCP at the interface level, is provided.\n\nToday, VM Sockets is used by various VMware Tools components inside the guest\nfor zero-config, network-less access to VMware host services.  In addition to\nthis, VMware's users are using VM Sockets for various applications, where\nnetwork access of the virtual machine is restricted or non-existent.  Examples\nof this are VMs communicating with device proxies for proprietary hardware\nrunning as host applications and automated testing of applications running\nwithin virtual machines.\n\nThe VMware VM Sockets are similar to other socket types, like Berkeley UNIX\nsocket interface.  The VM Sockets m","insertions":6038,"deletions":1,"filepaths":{"include/linux/socket.h":{"insertions":3,"deletions":1},"include/uapi/linux/vm_sockets.h":{"insertions":171,"deletions":0},"net/Kconfig":{"insertions":1,"deletions":0},"net/Makefile":{"insertions":1,"deletions":0},"net/vmw_vsock/Kconfig":{"insertions":28,"deletions":0},"net/vmw_vsock/Makefile":{"insertions":7,"deletions":0},"net/vmw_vsock/af_vsock.c":{"insertions":2015,"deletions":0},"net/vmw_vsock/af_vsock.h":{"insertions":175,"deletions":0},"net/vmw_vsock/vmci_transport.c":{"insertions":2157,"deletions":0},"net/vmw_vsock/vmci_transport.h":{"insertions":139,"deletions":0},"net/vmw_vsock/vmci_transport_notify.c":{"insertions":680,"deletions":0},"net/vmw_vsock/vmci_transport_notify.h":{"insertions":83,"deletions":0},"net/vmw_vsock/vmci_transport_notify_qstate.c":{"insertions":438,"deletions":0},"net/vmw_vsock/vsock_addr.c":{"insertions":86,"deletions":0},"net/vmw_vsock/vsock_addr.h":{"insertions":32,"deletions":0},"net/vmw_vsock/vsock_version.h":{"insertions":22,"deletions":0}}},"fe502c4a38d97e5f8b9d5602af1f07f5abc529d2":{"author":"Stefano Garzarella","email":"sgarzare@redhat.com","date":"2019-11-14 09:57:39 UTC","message":"vsock: add 'transport' member in the struct vsock_sock\n\nAs a preparation to support multiple transports, this patch adds\nthe 'transport' member at the 'struct vsock_sock'.\nThis new field is initialized during the creation in the\n__vsock_create() function.\n\nThis patch also renames the global 'transport' pointer to\n'transport_single', since for now we're only supporting a single\ntransport registered at run-time.\n\nReviewed-by: Stefan Hajnoczi <stefanha@redhat.com>\nReviewed-by: Jorgen Hansen <jhansen@vmware.com>\nSigned-off-by: Stefano Garzarella <sgarzare@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":39,"deletions":18,"filepaths":{"include/net/af_vsock.h":{"insertions":1,"deletions":0},"net/vmw_vsock/af_vsock.c":{"insertions":38,"deletions":18}}},"b3a6dfe8178c5159e54117078134fef806a913ca":{"author":"Asias He","email":"asias@redhat.com","date":"2013-06-20 09:20:30 UTC","message":"VSOCK: Introduce vsock_auto_bind helper\n\nThis peace of code is called three times, let's have a helper for it.\n\nSigned-off-by: Asias He <asias@redhat.com>\nAcked-by: Andy King <acking@vmware.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":21,"deletions":28,"filepaths":{"net/vmw_vsock/af_vsock.c":{"insertions":21,"deletions":28}}},"3b4477d2dcf2709d0be89e2a8dced3d0f4a017f2":{"author":"Stefan Hajnoczi","email":"stefanha@redhat.com","date":"2017-10-05 20:46:52 UTC","message":"VSOCK: use TCP state constants for sk_state\n\nThere are two state fields: socket->state and sock->sk_state.  The\nsocket->state field uses SS_UNCONNECTED, SS_CONNECTED, etc while the\nsock->sk_state typically uses values that match TCP state constants\n(TCP_CLOSE, TCP_ESTABLISHED).  AF_VSOCK does not follow this convention\nand instead uses SS_* constants for both fields.\n\nThe sk_state field will be exposed to userspace through the vsock_diag\ninterface for ss(8), netstat(8), and other programs.\n\nThis patch switches sk_state to TCP state constants so that the meaning\nof this field is consistent with other address families.  Not just\nAF_INET and AF_INET6 use the TCP constants, AF_UNIX and others do too.\n\nThe following mapping was used to convert the code:\n\n  SS_FREE -> TCP_CLOSE\n  SS_UNCONNECTED -> TCP_CLOSE\n  SS_CONNECTING -> TCP_SYN_SENT\n  SS_CONNECTED -> TCP_ESTABLISHED\n  SS_DISCONNECTING -> TCP_CLOSING\n  VSOCK_SS_LISTEN -> TCP_LISTEN\n\nIn __vsock_create() the sk_state initialization was dro","insertions":64,"deletions":59,"filepaths":{"include/net/af_vsock.h":{"insertions":0,"deletions":3},"net/vmw_vsock/af_vsock.c":{"insertions":27,"deletions":19},"net/vmw_vsock/hyperv_transport.c":{"insertions":6,"deletions":6},"net/vmw_vsock/virtio_transport.c":{"insertions":1,"deletions":1},"net/vmw_vsock/virtio_transport_common.c":{"insertions":11,"deletions":11},"net/vmw_vsock/vmci_transport.c":{"insertions":17,"deletions":17},"net/vmw_vsock/vmci_transport_notify.c":{"insertions":1,"deletions":1},"net/vmw_vsock/vmci_transport_notify_qstate.c":{"insertions":1,"deletions":1}}},"c0cfa2d8a788fcf45df5bf4070ab2474c88d543a":{"author":"Stefano Garzarella","email":"sgarzare@redhat.com","date":"2019-11-14 09:57:46 UTC","message":"vsock: add multi-transports support\n\nThis patch adds the support of multiple transports in the\nVSOCK core.\n\nWith the multi-transports support, we can use vsock with nested VMs\n(using also different hypervisors) loading both guest->host and\nhost->guest transports at the same time.\n\nMajor changes:\n- vsock core module can be loaded regardless of the transports\n- vsock_core_init() and vsock_core_exit() are renamed to\n  vsock_core_register() and vsock_core_unregister()\n- vsock_core_register() has a feature parameter (H2G, G2H, DGRAM)\n  to identify which directions the transport can handle and if it's\n  support DGRAM (only vmci)\n- each stream socket is assigned to a transport when the remote CID\n  is set (during the connect() or when we receive a connection request\n  on a listener socket).\n  The remote CID is used to decide which transport to use:\n  - remote CID <= VMADDR_CID_HOST will use guest->host transport;\n  - remote CID == local_cid (guest->host transport) will use guest->host\n    tran","insertions":297,"deletions":97,"filepaths":{"drivers/vhost/vsock.c":{"insertions":3,"deletions":2},"include/net/af_vsock.h":{"insertions":12,"deletions":6},"net/vmw_vsock/af_vsock.c":{"insertions":184,"deletions":59},"net/vmw_vsock/hyperv_transport.c":{"insertions":21,"deletions":5},"net/vmw_vsock/virtio_transport.c":{"insertions":4,"deletions":3},"net/vmw_vsock/virtio_transport_common.c":{"insertions":44,"deletions":19},"net/vmw_vsock/vmci_transport.c":{"insertions":29,"deletions":3}}},"688e8128b7a92df982709a4137ea4588d16f24aa":{"author":"Lee Duncan","email":"lduncan@suse.com","date":"2021-02-23 21:06:24 UTC","message":"scsi: iscsi: Restrict sessions and handles to admin capabilities\n\nProtect the iSCSI transport handle, available in sysfs, by requiring\nCAP_SYS_ADMIN to read it. Also protect the netlink socket by restricting\nreception of messages to ones sent with CAP_SYS_ADMIN. This disables\nnormal users from being able to end arbitrary iSCSI sessions.\n\nCc: stable@vger.kernel.org\nReported-by: Adam Nichols <adam@grimm-co.com>\nReviewed-by: Chris Leech <cleech@redhat.com>\nReviewed-by: Mike Christie <michael.christie@oracle.com>\nSigned-off-by: Lee Duncan <lduncan@suse.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>","insertions":6,"deletions":0,"filepaths":{"drivers/scsi/scsi_transport_iscsi.c":{"insertions":6,"deletions":0}}},"ee959b00c335d7780136c5abda37809191fe52c3":{"author":"Tony Jones","email":"tonyj@suse.de","date":"2008-02-21 23:13:36 UTC","message":"SCSI: convert struct class_device to struct device\n\nIt's big, but there doesn't seem to be a way to split it up smaller...\n\nSigned-off-by: Tony Jones <tonyj@suse.de>\nSigned-off-by: Kay Sievers <kay.sievers@vrfy.org>\nCc: Roland Dreier <rolandd@cisco.com>\nCc: Sean Hefty <sean.hefty@intel.com>\nCc: Hal Rosenstock <hal.rosenstock@gmail.com>\nCc: James Bottomley <James.Bottomley@HansenPartnership.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@suse.de>","insertions":1761,"deletions":1510,"filepaths":{"block/bsg.c":{"insertions":5,"deletions":6},"drivers/ata/ahci.c":{"insertions":2,"deletions":2},"drivers/ata/libata-scsi.c":{"insertions":8,"deletions":7},"drivers/base/attribute_container.c":{"insertions":38,"deletions":39},"drivers/base/transport_class.c":{"insertions":7,"deletions":7},"drivers/infiniband/ulp/srp/ib_srp.c":{"insertions":71,"deletions":61},"drivers/infiniband/ulp/srp/ib_srp.h":{"insertions":1,"deletions":1},"drivers/message/fusion/mptscsih.c":{"insertions":68,"deletions":54},"drivers/message/fusion/mptscsih.h":{"insertions":1,"deletions":1},"drivers/misc/enclosure.c":{"insertions":64,"deletions":54},"drivers/scsi/3w-9xxx.c":{"insertions":5,"deletions":4},"drivers/scsi/3w-xxxx.c":{"insertions":5,"deletions":4},"drivers/scsi/aacraid/aachba.c":{"insertions":1,"deletions":1},"drivers/scsi/aacraid/aacraid.h":{"insertions":2,"deletions":2},"drivers/scsi/aacraid/linit.c":{"insertions":53,"deletions":40},"drivers/scsi/arcmsr/arcmsr.h":{"insertions":2,"deletions":2},"drivers/scsi/arcmsr/arcmsr_attr.c":{"insertions":96,"deletions":67},"drivers/scsi/ch.c":{"insertions":6,"deletions":7},"drivers/scsi/hosts.c":{"insertions":17,"deletions":17},"drivers/scsi/hptiop.c":{"insertions":8,"deletions":6},"drivers/scsi/ibmvscsi/ibmvscsi.c":{"insertions":25,"deletions":19},"drivers/scsi/ibmvscsi/ibmvstgt.c":{"insertions":14,"deletions":11},"drivers/scsi/ipr.c":{"insertions":75,"deletions":65},"drivers/scsi/lpfc/lpfc_attr.c":{"insertions":257,"deletions":227},"drivers/scsi/lpfc/lpfc_crtn.h":{"insertions":2,"deletions":2},"drivers/scsi/megaraid/megaraid_mbox.c":{"insertions":7,"deletions":6},"drivers/scsi/ncr53c8xx.c":{"insertions":4,"deletions":3},"drivers/scsi/osst.c":{"insertions":39,"deletions":37},"drivers/scsi/pcmcia/sym53c500_cs.c":{"insertions":8,"deletions":6},"drivers/scsi/qla2xxx/qla_attr.c":{"insertions":96,"deletions":81},"drivers/scsi/qla2xxx/qla_gbl.h":{"insertions":2,"deletions":2},"drivers/scsi/raid_class.c":{"insertions":37,"deletions":36},"drivers/scsi/scsi_sas_internal.h":{"insertions":12,"deletions":12},"drivers/scsi/scsi_sysfs.c":{"insertions":85,"deletions":65},"drivers/scsi/scsi_transport_fc.c":{"insertions":208,"deletions":177},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":55,"deletions":52},"drivers/scsi/scsi_transport_sas.c":{"insertions":88,"deletions":69},"drivers/scsi/scsi_transport_spi.c":{"insertions":98,"deletions":87},"drivers/scsi/scsi_transport_srp.c":{"insertions":14,"deletions":12},"drivers/scsi/sd.c":{"insertions":44,"deletions":34},"drivers/scsi/ses.c":{"insertions":14,"deletions":14},"drivers/scsi/sg.c":{"insertions":18,"deletions":18},"drivers/scsi/st.c":{"insertions":44,"deletions":38},"include/linux/attribute_container.h":{"insertions":14,"deletions":14},"include/linux/bsg.h":{"insertions":1,"deletions":1},"include/linux/enclosure.h":{"insertions":6,"deletions":5},"include/linux/libata.h":{"insertions":1,"deletions":1},"include/linux/raid_class.h":{"insertions":6,"deletions":6},"include/linux/transport_class.h":{"insertions":3,"deletions":3},"include/scsi/scsi_device.h":{"insertions":5,"deletions":5},"include/scsi/scsi_host.h":{"insertions":3,"deletions":4},"include/scsi/scsi_transport.h":{"insertions":1,"deletions":1},"include/scsi/scsi_transport_fc.h":{"insertions":7,"deletions":7},"include/scsi/scsi_transport_sas.h":{"insertions":6,"deletions":6},"include/scsi/sd.h":{"insertions":2,"deletions":2}}},"0896b752302662909b52895bd7f601136001069d":{"author":"Alex Aizman","email":"itn780@yahoo.com","date":"2005-08-05 02:33:07 UTC","message":"[SCSI] open-iscsi/linux-iscsi-5 Initiator: Transport class update for iSCSI\n\nSigned-off-by: Alex Aizman <itn780@yahoo.com>\nSigned-off-by: Dmitry Yusupov <dmitry_yus@yahoo.com>\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@SteelEye.com>","insertions":1132,"deletions":247,"filepaths":{"drivers/scsi/scsi_transport_iscsi.c":{"insertions":1132,"deletions":247}}},"43514774ff40c4fbe0cbbd3d8293a359f1a9fe71":{"author":"Michael Chan","email":"mchan@broadcom.com","date":"2009-06-09 01:14:41 UTC","message":"[SCSI] iscsi class: Add new NETLINK_ISCSI messages for cnic/bnx2i driver.\n\nAdd ISCSI_NETLINK messages for iSCSI NICs to get information such as\npath from userspace.  Original iscsid messages are now always sent as\nmulticast to group 1.  The new messages are sent to group 2.\n\nThe multicast changes were made by Mike Christie.\n\nSigned-off-by: Michael Chan <mchan@broadcom.com>\nSigned-off-by: Benjamin Li <benli@broadcom.com>\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>","insertions":133,"deletions":36,"filepaths":{"drivers/scsi/scsi_transport_iscsi.c":{"insertions":86,"deletions":36},"include/scsi/iscsi_if.h":{"insertions":42,"deletions":0},"include/scsi/scsi_transport_iscsi.h":{"insertions":5,"deletions":0}}},"762e2bfac7bc5f21b04ff17138aac3c453fb6481":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2005-09-13 02:01:46 UTC","message":"[SCSI] iscsi: add newline to sysfs output\n\nFrom: tomof@acm.org\n\ntrivial cleanup of show_transport_handle()\n\nSigned-off-by: Alex Aizman <itn780@yahoo.com>\nSigned-off-by: Dmitry Yusupov <dmitry_yus@yahoo.com>\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@SteelEye.com>","insertions":1,"deletions":1,"filepaths":{"drivers/scsi/scsi_transport_iscsi.c":{"insertions":1,"deletions":1}}},"7b7232f3fb5ecd7c30cb52df368070cc5f5ca614":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2006-02-02 03:06:49 UTC","message":"[SCSI] iscsi update: cleanup iscsi class interface\n\nFrom:\nmichaelc@cs.wisc.edu\nfujita.tomonori@lab.ntt.co.jp\nda-x@monatomic.org\n\nand err path fixup from:\nogerlitz@voltaire.com\n\nThis patch cleans up that interface by having the lld and class\npass a iscsi_cls_session or iscsi_cls_conn between each other when\nthe function is used by HW and SW iscsi llds. This way the lld\ndoes not have to remember if it has to send a handle or pointer\nand a handle or pointer to connection, session or host.\n\nThis also has the class verify the session handle that gets passed from\nuserspace instead of using the pointer passed into the kernel directly.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: Alex Aizman <itn780@yahoo.com>\nSigned-off-by: Dmitry Yusupov <dmitry_yus@yahoo.com>\nSigned-off-by: James Bottomley <James.Bottomley@SteelEye.com>","insertions":172,"deletions":159,"filepaths":{"drivers/scsi/iscsi_tcp.c":{"insertions":39,"deletions":31},"drivers/scsi/iscsi_tcp.h":{"insertions":3,"deletions":0},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":112,"deletions":109},"include/scsi/iscsi_if.h":{"insertions":0,"deletions":3},"include/scsi/scsi_transport_iscsi.h":{"insertions":18,"deletions":16}}},"d82ff9be733a2e6da4f6c2ab4e9216f3f536503d":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2008-05-21 20:54:13 UTC","message":"[SCSI] iscsi class: add endpoint class\n\nAdd sysfs representation for the endpoint, so userspace can match the\nhost and session to the endpoint. This will allow us to set the host's\nparent correctly at host creation time.\n\nThe next patches will convert tcp and iser, and fix iser's dma_mask\nbug.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>","insertions":172,"deletions":39,"filepaths":{"drivers/scsi/scsi_transport_iscsi.c":{"insertions":157,"deletions":33},"include/scsi/iscsi_if.h":{"insertions":1,"deletions":1},"include/scsi/scsi_transport_iscsi.h":{"insertions":14,"deletions":5}}},"ec98ea7070e94cc25a422ec97d1421e28d97b7ee":{"author":"Chris Leech","email":"cleech@redhat.com","date":"2021-02-24 02:00:17 UTC","message":"scsi: iscsi: Ensure sysfs attributes are limited to PAGE_SIZE\n\nAs the iSCSI parameters are exported back through sysfs, it should be\nenforcing that they never are more than PAGE_SIZE (which should be more\nthan enough) before accepting updates through netlink.\n\nChange all iSCSI sysfs attributes to use sysfs_emit().\n\nCc: stable@vger.kernel.org\nReported-by: Adam Nichols <adam@grimm-co.com>\nReviewed-by: Lee Duncan <lduncan@suse.com>\nReviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nReviewed-by: Mike Christie <michael.christie@oracle.com>\nSigned-off-by: Chris Leech <cleech@redhat.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>","insertions":90,"deletions":83,"filepaths":{"drivers/scsi/libiscsi.c":{"insertions":74,"deletions":74},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":16,"deletions":9}}},"f9dbdf97a5bd92b1a49cee3d591b55b11fd7a6d5":{"author":"Chris Leech","email":"cleech@redhat.com","date":"2021-02-24 05:39:01 UTC","message":"scsi: iscsi: Verify lengths on passthrough PDUs\n\nOpen-iSCSI sends passthrough PDUs over netlink, but the kernel should be\nverifying that the provided PDU header and data lengths fall within the\nnetlink message to prevent accessing beyond that in memory.\n\nCc: stable@vger.kernel.org\nReported-by: Adam Nichols <adam@grimm-co.com>\nReviewed-by: Lee Duncan <lduncan@suse.com>\nReviewed-by: Mike Christie <michael.christie@oracle.com>\nSigned-off-by: Chris Leech <cleech@redhat.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>","insertions":9,"deletions":0,"filepaths":{"drivers/scsi/scsi_transport_iscsi.c":{"insertions":9,"deletions":0}}},"f8525eb4cff0c5df5b513a5f30ffebcda43460bb":{"author":"Adheer Chandravanshi","email":"adheer.chandravanshi@qlogic.com","date":"2013-07-01 09:54:12 UTC","message":"[SCSI] libiscsi: Exporting new attrs for iscsi session and connection in sysfs\n\nSigned-off-by: Adheer Chandravanshi <adheer.chandravanshi@qlogic.com>\nSigned-off-by: Vikas Chaudhary <vikas.chaudhary@qlogic.com>\nReviewed-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <JBottomley@Parallels.com>","insertions":128,"deletions":0,"filepaths":{"drivers/scsi/libiscsi.c":{"insertions":97,"deletions":0},"include/scsi/libiscsi.h":{"insertions":31,"deletions":0}}},"a54a52caad4bd6166cb7fa64e4e93031fa2fda5d":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2006-06-28 17:00:23 UTC","message":"[SCSI] iscsi: fixup set/get param functions\n\nReduce duplication in the software iscsi_transport modules by\nadding a libiscsi function to handle the common grunt work.\n\nThis also has the drivers return specifc -EXXX values for different\nerrors so userspace can finally handle them in a sane way.\n\nAlso just pass the sysfs buffers to the drivers so HW iscsi can\nget/set its string values, like targetname, and initiatorname.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@SteelEye.com>","insertions":246,"deletions":187,"filepaths":{"drivers/scsi/libiscsi.c":{"insertions":179,"deletions":0},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":44,"deletions":166},"include/scsi/libiscsi.h":{"insertions":13,"deletions":2},"include/scsi/scsi_transport_iscsi.h":{"insertions":10,"deletions":19}}},"f6d5180c78780d63b0577edeb3ce41eeb3e93eea":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2007-12-13 18:43:30 UTC","message":"[SCSI] libiscsi: fix nop handling\n\nDuring root boot and shutdown the target could send us nops.\nAt this time iscsid cannot be running, so the target will drop\nthe session and the boot or shutdown will hang.\n\nTo handle this and allow us to better control when to check the network\nthis patch moves the nop handling to the kernel.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>","insertions":294,"deletions":68,"filepaths":{"drivers/infiniband/ulp/iser/iscsi_iser.c":{"insertions":3,"deletions":1},"drivers/scsi/iscsi_tcp.c":{"insertions":3,"deletions":1},"drivers/scsi/libiscsi.c":{"insertions":265,"deletions":66},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":4,"deletions":0},"include/scsi/iscsi_if.h":{"insertions":11,"deletions":0},"include/scsi/libiscsi.h":{"insertions":8,"deletions":0}}},"b2c6416736b847b91950bd43cc5153e11a1f83ee":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2007-05-30 17:57:16 UTC","message":"[SCSI] iscsi class, iscsi_tcp, ib_iser: add sysfs chap file\n\nThe attached patches add sysfs files for the chap settings\nto the iscsi transport class, iscsi_tcp and ib_iser. This is\nneeded for software iscsi because there are times when iscsid\ncan die and it will need to reread the values it was using.\nAnd it is needed by qla4xxx for basic management opertaions.\nThis patch does not hook in qla4xxx yet, because I am not sure\nthe mbx command to use.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nCc: Roland Dreier <rdreier@cisco.com>\nSigned-off-by: James Bottomley <James.Bottomley@SteelEye.com>","insertions":84,"deletions":18,"filepaths":{"drivers/infiniband/ulp/iser/iscsi_iser.c":{"insertions":3,"deletions":2},"drivers/scsi/iscsi_tcp.c":{"insertions":3,"deletions":2},"drivers/scsi/libiscsi.c":{"insertions":40,"deletions":0},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":25,"deletions":14},"include/scsi/iscsi_if.h":{"insertions":9,"deletions":0},"include/scsi/libiscsi.h":{"insertions":4,"deletions":0}}},"00f3708e6ed1698d6aee3901ea991197e31a8007":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2011-02-16 21:04:35 UTC","message":"[SCSI] libiscsi: add helper to convert addr to string\n\nThis adds a helper to convert a addr struct to\na string. This will be used by the drivers in\nthe next patches.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@suse.de>","insertions":43,"deletions":3,"filepaths":{"drivers/scsi/libiscsi.c":{"insertions":41,"deletions":3},"include/scsi/libiscsi.h":{"insertions":2,"deletions":0}}},"3b9373e95a6019cf89abe6c8b17c07828db96ad4":{"author":"Eddie Wai","email":"eddie.wai@broadcom.com","date":"2013-06-20 17:21:26 UTC","message":"[SCSI] libiscsi: Added new boot entries in the session sysfs\n\nThis is the kernel part of the modification to extract the net params\nfrom the ibft sysfs to the iface struct used for the connection\nrequest upon sync_session in the open-iscsi util.\n\nThree new session sysfs params are defined:\nboot_root - holds the name of the /sys/firmware/ibft or iscsi_rootN\nboot_nic  - holds the ethernetN name\nboot_target - holds the targetN name\n\nSigned-off-by: Eddie Wai <eddie.wai@broadcom.com>\nReviewed-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <JBottomley@Parallels.com>","insertions":39,"deletions":0,"filepaths":{"drivers/scsi/libiscsi.c":{"insertions":18,"deletions":0},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":12,"deletions":0},"include/scsi/iscsi_if.h":{"insertions":5,"deletions":0},"include/scsi/libiscsi.h":{"insertions":4,"deletions":0}}},"756135215ec743be6fdce2bdebe8cdb9f8a231f6":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2008-05-21 20:53:59 UTC","message":"[SCSI] iscsi: remove session and host binding in libiscsi\n\nbnx2i allocates a host per netdevice but will use libiscsi,\nso this unbinds the session from the host in that code.\n\nThis will also be useful for the iser parent device dma settings\nfixes.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>","insertions":225,"deletions":216,"filepaths":{"drivers/infiniband/ulp/iser/iscsi_iser.c":{"insertions":54,"deletions":20},"drivers/scsi/iscsi_tcp.c":{"insertions":57,"deletions":45},"drivers/scsi/libiscsi.c":{"insertions":94,"deletions":119},"drivers/scsi/qla4xxx/ql4_os.c":{"insertions":0,"deletions":1},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":1,"deletions":4},"include/scsi/iscsi_if.h":{"insertions":0,"deletions":7},"include/scsi/libiscsi.h":{"insertions":16,"deletions":15},"include/scsi/scsi_transport_iscsi.h":{"insertions":3,"deletions":5}}},"5f09e1f310a57fd500d6a05e3e108c432691e2dc":{"author":"Adheer Chandravanshi","email":"adheer.chandravanshi@qlogic.com","date":"2013-07-22 11:46:10 UTC","message":"[SCSI] libiscsi: Add missing prints for session and connection sysfs attrs\n\nSigned-off-by: Adheer Chandravanshi <adheer.chandravanshi@qlogic.com>\nSigned-off-by: Vikas Chaudhary <vikas.chaudhary@qlogic.com>\nReviewed-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <JBottomley@Parallels.com>","insertions":6,"deletions":0,"filepaths":{"drivers/scsi/libiscsi.c":{"insertions":6,"deletions":0}}},"88dfd340b9dece8fcaa1a2d4c782338926c017f7":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2008-05-21 20:54:16 UTC","message":"[SCSI] iscsi class: Add session initiatorname and ifacename sysfs attrs.\n\nThis adds two new attrs used for creating initiator ports and\nbinding sessions to hardware.\n\nThe session level initiatorname:\n\nSince bnx2i does a scsi_host per host device, we need to add the\niface initiator port settings on the session, so we can create\nmultiple initiator ports (each with different inames) per device/scsi_host.\n\nThe current iname reflects that qla4xxx can have one iname per hba, and we are\nallocating a host per session for software. The iname on the host will\nremain so we can export and set the hba level qla4xxx setting.\n\nThe ifacename attr:\n\nTo bind a session to a some peice of hardware in userspace we maintain\nsome mappings, but during boot or iscsid restart (iscsid contains the user\nspace part of the driver) we need to be able to figure out which of those\nhost mappings abstractions maps to certain sessions. This patch adds\na ifacename attr, which userspace can set to id the host side of the\nen","insertions":74,"deletions":39,"filepaths":{"drivers/infiniband/ulp/iser/iscsi_iser.c":{"insertions":2,"deletions":1},"drivers/scsi/iscsi_tcp.c":{"insertions":2,"deletions":1},"drivers/scsi/libiscsi.c":{"insertions":20,"deletions":0},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":5,"deletions":1},"include/scsi/iscsi_if.h":{"insertions":43,"deletions":36},"include/scsi/libiscsi.h":{"insertions":2,"deletions":0}}},"843c0a8a76078cf961b244b839683d0667313740":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2007-12-13 18:43:20 UTC","message":"[SCSI] libiscsi, iscsi_tcp: add device support\n\nThis patch adds logical unit reset support. This should work for ib_iser,\nbut I have not finished testing that driver so it is not hooked in yet.\n\nThis patch also temporarily reverts the iscsi_tcp r2t write out patch.\nThat code is completely rewritten in this patchset.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>","insertions":396,"deletions":322,"filepaths":{"drivers/infiniband/ulp/iser/iscsi_iser.c":{"insertions":0,"deletions":6},"drivers/scsi/iscsi_tcp.c":{"insertions":76,"deletions":75},"drivers/scsi/iscsi_tcp.h":{"insertions":17,"deletions":17},"drivers/scsi/libiscsi.c":{"insertions":281,"deletions":213},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":3,"deletions":1},"include/scsi/iscsi_if.h":{"insertions":2,"deletions":0},"include/scsi/iscsi_proto.h":{"insertions":2,"deletions":0},"include/scsi/libiscsi.h":{"insertions":15,"deletions":10}}},"3fe5ae8b4c4d3a82c755074878da7ddb9dde381e":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2009-11-11 22:34:33 UTC","message":"[SCSI] libiscsi: add warm target reset tmf support\n\nThis implements warm target reset tmf support for\nthe scsi-ml target reset callback. Previously we would\njust drop the session in that callback. This patch will\nnow try a target reset and if that fails drop the session.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@suse.de>","insertions":190,"deletions":77,"filepaths":{"drivers/scsi/be2iscsi/be_main.c":{"insertions":1,"deletions":1},"drivers/scsi/bnx2i/bnx2i_iscsi.c":{"insertions":1,"deletions":1},"drivers/scsi/cxgb3i/cxgb3i_iscsi.c":{"insertions":1,"deletions":1},"drivers/scsi/iscsi_tcp.c":{"insertions":1,"deletions":1},"drivers/scsi/libiscsi.c":{"insertions":179,"deletions":72},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":3,"deletions":1},"include/scsi/iscsi_if.h":{"insertions":3,"deletions":0},"include/scsi/libiscsi.h":{"insertions":1,"deletions":0}}},"3c5c48011809045881d30e197577ef1dca9a3e72":{"author":"Vikas Chaudhary","email":"vikas.chaudhary@qlogic.com","date":"2012-01-19 11:06:53 UTC","message":"[SCSI] libiscsi: Added support to show targetalias in sysfs\n\nsysfs patch to view target alias:\n  /sys/class/iscsi_session/session*/targetalias\n\nSigned-off-by: Vikas Chaudhary <vikas.chaudhary@qlogic.com>\nReviewed-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <JBottomley@Parallels.com>","insertions":7,"deletions":0,"filepaths":{"drivers/scsi/libiscsi.c":{"insertions":6,"deletions":0},"include/scsi/libiscsi.h":{"insertions":1,"deletions":0}}},"ae56ff4084129c7d8a5bf946d48602f551bff2f5":{"author":"Adheer Chandravanshi","email":"adheer.chandravanshi@qlogic.com","date":"2013-11-22 10:28:21 UTC","message":"[SCSI] libiscsi: Add local_ipaddr parameter in iscsi_conn struct\n\nAdd local_ipaddr param and support get/set operations on it.\n\nSigned-off-by: Adheer Chandravanshi <adheer.chandravanshi@qlogic.com>\nSigned-off-by: Vikas Chaudhary <vikas.chaudhary@qlogic.com>\nReviewed-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <JBottomley@Parallels.com>","insertions":7,"deletions":0,"filepaths":{"drivers/scsi/libiscsi.c":{"insertions":6,"deletions":0},"include/scsi/libiscsi.h":{"insertions":1,"deletions":0}}},"fd7255f51a13ea915099c7e488001dfbbeb05104":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2006-04-07 02:13:36 UTC","message":"[SCSI] iscsi: add sysfs attrs for uspace sync up\n\nFor iscsi boot when going from initramfs to the real root we\nneed to stop the userpsace iscsi daemon. To later restart it\niscsid needs to be able to rebuild itself and part of that\nprocess is matching a session running the kernel with the\niscsid representation. To do this the attached patch\nadds several required iscsi values. If the LLD does not provide\nthem becuase, login is done in userspace, then the transport\nclass and userspace set ths up for the LLD.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@SteelEye.com>","insertions":342,"deletions":76,"filepaths":{"drivers/scsi/iscsi_tcp.c":{"insertions":66,"deletions":2},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":208,"deletions":54},"include/scsi/iscsi_if.h":{"insertions":48,"deletions":16},"include/scsi/scsi_transport_iscsi.h":{"insertions":20,"deletions":4}}},"1d9bf13a9cf91f8faf221e98a64dd1157bcf5fa9":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2007-05-30 17:57:11 UTC","message":"[SCSI] iscsi class: add iscsi host set param event\n\nThe iscsi class uses the set_param event to set session\nand connection params. This patch adds a set_host_param\nso we can set host level values.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@SteelEye.com>","insertions":37,"deletions":1,"filepaths":{"drivers/scsi/scsi_transport_iscsi.c":{"insertions":28,"deletions":1},"include/scsi/iscsi_if.h":{"insertions":6,"deletions":0},"include/scsi/scsi_transport_iscsi.h":{"insertions":3,"deletions":0}}},"21536062d98938dfcfbae593a26c154e359749dc":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2008-09-24 16:46:11 UTC","message":"[SCSI] iscsi class: fix endpoint id handling\n\nSome endpoint code was using unsigned int and some\nwas using uint64_t. This converts it all to uint64_t.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>","insertions":6,"deletions":5,"filepaths":{"drivers/scsi/scsi_transport_iscsi.c":{"insertions":5,"deletions":4},"include/scsi/scsi_transport_iscsi.h":{"insertions":1,"deletions":1}}},"315cb0ad124575e75da2d0e0a95990587fc23485":{"author":"James Smart","email":"James.Smart@Emulex.Com","date":"2008-08-08 00:49:30 UTC","message":"[SCSI] scsi_host_lookup: error returns and NULL pointers\n\nThis patch cleans up the behavior of scsi_host_lookup().\n\nThe original implementation attempted to use the dual role of\neither returning a pointer value, or a negative error code.\nUser's needed to use IS_ERR() to check the result. Additionally,\nthe IS_ERR() macro never checks for when a NULL pointer was\nreturned, so a NULL pointer actually passes with a success case.\nNote: scsi_host_get(), used by scsi_host_lookup(), can return\na NULL pointer.\n\nTalk about a mudhole for the unitiated to step into....\n\nThis patch converts scsi_host_lookup() to return either NULL\nor a valid pointer. The consumers were updated for the change.\n\nSigned-off-by: James Smart <james.smart@emulex.com>\nSigned-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>","insertions":10,"deletions":10,"filepaths":{"drivers/scsi/hosts.c":{"insertions":1,"deletions":1},"drivers/scsi/scsi_proc.c":{"insertions":4,"deletions":4},"drivers/scsi/scsi_tgt_lib.c":{"insertions":3,"deletions":3},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":2,"deletions":2}}},"82b8cf40bfe1077d8d757e223eb7a35c25f650ec":{"author":"Gabriel Krisman Bertazi","email":"krisman@collabora.com","date":"2020-03-17 23:34:22 UTC","message":"scsi: iscsi: Report connection state in sysfs\n\nIf an iSCSI connection happens to fail while the daemon isn't running (due\nto a crash or for another reason), the kernel failure report is not\nreceived.  When the daemon restarts, there is insufficient kernel state in\nsysfs for it to know that this happened.  open-iscsi tries to reopen every\nconnection, but on different initiators, we'd like to know which\nconnections have failed.\n\nThere is session->state, but that has a different lifetime than an iSCSI\nconnection, so it doesn't directly reflect the connection state.\n\n[mkp: typos]\n\nLink: https://lore.kernel.org/r/20200317233422.532961-1-krisman@collabora.com\nCc: Khazhismel Kumykov <khazhy@google.com>\nSuggested-by: Junho Ryu <jayr@google.com>\nReviewed-by: Lee Duncan <lduncan@suse.com>\nSigned-off-by: Gabriel Krisman Bertazi <krisman@collabora.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>","insertions":42,"deletions":2,"filepaths":{"drivers/scsi/libiscsi.c":{"insertions":6,"deletions":1},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":28,"deletions":1},"include/scsi/scsi_transport_iscsi.h":{"insertions":8,"deletions":0}}},"6eabafbe6616266e8de61980a7dac5ecc1ba1113":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2008-01-31 19:36:43 UTC","message":"[SCSI] iscsi class, libiscsi: add iscsi sysfs session state file\n\nThis adds a iscsi session state file which exports the session\nstate for both software and hardware iscsi. It also hooks libiscsi\nin.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>","insertions":161,"deletions":33,"filepaths":{"drivers/scsi/libiscsi.c":{"insertions":26,"deletions":15},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":104,"deletions":3},"include/scsi/libiscsi.h":{"insertions":19,"deletions":0},"include/scsi/scsi_transport_iscsi.h":{"insertions":12,"deletions":15}}},"0c70d84b794c9a99f7395b617ecaef34c00d82ec":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2011-12-05 22:44:01 UTC","message":"[SCSI] iscsi class: export pid of process that created\n\nThere could be multiple userspace entities creating/destroying/\nrecoverying sessions and also the kernel's iscsi drivers could\nbe doing this too. If the userspace apps do try to manage the kernel\nones it can get the driver/fw out of sync and cause the user to\nloose the root disk, oopses or ping ponging becasue userspace\nwants to do one thing but the kernel manager thought we\nare trying to do another.\n\nThis patch fixes the problem by just exporting the pid of\nthe entity that created the session. Userspace programs like\niscsid, iscsiadm, iscsistart, qlogic's tools, etc, can then\nfigure out which sessions they own and only manage them.\n\nSigned-off-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <JBottomley@Parallels.com>","insertions":24,"deletions":2,"filepaths":{"drivers/scsi/scsi_transport_iscsi.c":{"insertions":19,"deletions":2},"include/scsi/scsi_transport_iscsi.h":{"insertions":5,"deletions":0}}},"930a9f046cfc68ae239f7e411179c1f7ced9d987":{"author":"Manish Rangankar","email":"manish.rangankar@qlogic.com","date":"2012-11-23 11:58:41 UTC","message":"[SCSI] scsi_transport_iscsi: export iscsi class session's target_id in sysfs.\n\nSigned-off-by: Manish Rangankar <manish.rangankar@qlogic.com>\nSigned-off-by: Vikas Chaudhary <vikas.chaudhary@qlogic.com>\nSigned-off-by: James Bottomley <JBottomley@Parallels.com>","insertions":12,"deletions":0,"filepaths":{"drivers/scsi/scsi_transport_iscsi.c":{"insertions":12,"deletions":0}}},"fe4f0bdeea788a8ac049c097895cb2e4044f18b1":{"author":"Vikas Chaudhary","email":"vikas.chaudhary@qlogic.com","date":"2010-07-22 11:27:43 UTC","message":"[SCSI] iscsi_transport: Modidify recovery_tmo from sysfs\n\nAdded support to modify session->recovery_tmo from sysfs\n\nSigned-off-by: Vikas Chaudhary <vikas.chaudhary@qlogic.com>\nSigned-off-by: Ravi Anand <ravi.anand@qlogic.com>\nAcked-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: James Bottomley <James.Bottomley@suse.de>","insertions":38,"deletions":5,"filepaths":{"drivers/scsi/scsi_transport_iscsi.c":{"insertions":38,"deletions":5}}},"7e7cd796f2776d055351d80328f45633bbb0aae5":{"author":"Gabriel Krisman Bertazi","email":"krisman@collabora.com","date":"2020-05-20 02:29:59 UTC","message":"scsi: iscsi: Fix deadlock on recovery path during GFP_IO reclaim\n\niSCSI suffers from a deadlock in case a management command submitted via\nthe netlink socket sleeps on an allocation while holding the rx_queue_mutex\nif that allocation causes a memory reclaim that writebacks to a failed\niSCSI device.  The recovery procedure can never make progress to recover\nthe failed disk or abort outstanding IO operations to complete the reclaim\n(since rx_queue_mutex is locked), thus locking the system.\n\nNevertheless, just marking all allocations under rx_queue_mutex as GFP_NOIO\n(or locking the userspace process with something like PF_MEMALLOC_NOIO) is\nnot enough, since the iSCSI command code relies on other subsystems that\ntry to grab locked mutexes, whose threads are GFP_IO, leading to the same\ndeadlock. One instance where this situation can be observed is in the\nbacktraces below, stitched from multiple bugs reports, involving the kobj\nuevent sent when a session is created.\n\nThe root of the problem i","insertions":47,"deletions":17,"filepaths":{"drivers/scsi/scsi_transport_iscsi.c":{"insertions":47,"deletions":17}}},"af17092810a887178195276255b7b31f8fbe7dbe":{"author":"Chris Leech","email":"cleech@redhat.com","date":"2018-04-09 22:15:28 UTC","message":"scsi: iscsi: respond to netlink with unicast when appropriate\n\nInstead of always multicasting responses, send a unicast netlink message\ndirected at the correct pid.  This will be needed if we ever want to\nsupport multiple userspace processes interacting with the kernel over\niSCSI netlink simultaneously.  Limitations can currently be seen if you\nattempt to run multiple iscsistart commands in parallel.\n\nWe've fixed up the userspace issues in iscsistart that prevented\nmultiple instances from running, so now attempts to speed up booting by\nbringing up multiple iscsi sessions at once in the initramfs are just\nrunning into misrouted responses that this fixes.\n\nSigned-off-by: Chris Leech <cleech@redhat.com>\nReviewed-by: Lee Duncan <lduncan@suse.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>","insertions":18,"deletions":11,"filepaths":{"drivers/scsi/scsi_transport_iscsi.c":{"insertions":18,"deletions":11}}},"e07ebea0ccfaf627464460eb57d7f2fdbcccf8ec":{"author":"Hong zhi guo","email":"honkiko@gmail.com","date":"2013-03-27 06:53:15 UTC","message":"scsi: replace obsolete NLMSG_* with type safe nlmsg_*\n\nSigned-off-by: Hong Zhiguo <honkiko@gmail.com>\nReviewed-by: Mike Christie <michaelc@cs.wisc.edu>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":45,"deletions":50,"filepaths":{"drivers/scsi/scsi_netlink.c":{"insertions":2,"deletions":2},"drivers/scsi/scsi_transport_fc.c":{"insertions":8,"deletions":13},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":35,"deletions":35}}},"b5c7a12dc29ae0990d9e867749bdd717a3160325":{"author":"Mike Christie","email":"michaelc@cs.wisc.edu","date":"2006-04-07 02:13:33 UTC","message":"[SCSI] iscsi: rm kernel iscsi handles usage for session and connection\n\nfrom hare@suse.de and michaelc@cs.wisc.edu\n\nhw iscsi like qla4xxx does not allocate a host per session and\nfor userspace it is difficult to restart iscsid using the\n\"iscsi handles\" for the session and connection, so this\npatch just has the class or userspace allocate the id for\nthe session and connection.\n\nNote: this breaks userspace and requires users to upgrade to the newest\nopen-iscsi tools. Sorry about his but open-iscsi is still too new to\nsay we have a stable user-kernel api and we were not good nough\ndesigners to know that other hw iscsi drivers and iscsid itself would\nneed such changes. Actually we sorta did but at the time we did not\nhave the HW available to us so we could only guess.\n\nLuckily, the only tools hooking into the class are the open-iscsi ones\nor other tools like iscsitart hook into the open-iscsi engine from\nuserspace or prgroams like anaconda call our tools so they are not affected.\n\nSigned-of","insertions":105,"deletions":50,"filepaths":{"drivers/scsi/iscsi_tcp.c":{"insertions":3,"deletions":2},"drivers/scsi/scsi_transport_iscsi.c":{"insertions":73,"deletions":33},"include/scsi/iscsi_if.h":{"insertions":23,"deletions":14},"include/scsi/scsi_transport_iscsi.h":{"insertions":6,"deletions":1}}},"20c40794eb85ea29852d7bc37c55713802a543d6":{"author":"Dmitry Baryshkov","email":"dmitry.baryshkov@linaro.org","date":"2021-02-12 19:26:58 UTC","message":"misc: fastrpc: restrict user apps from sending kernel RPC messages\n\nVerify that user applications are not using the kernel RPC message\nhandle to restrict them from directly attaching to guest OS on the\nremote subsystem. This is a port of CVE-2019-2308 fix.\n\nFixes: c68cfb718c8f (\"misc: fastrpc: Add support for context Invoke method\")\nCc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>\nCc: Jonathan Marek <jonathan@marek.ca>\nCc: stable@vger.kernel.org\nSigned-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>\nLink: https://lore.kernel.org/r/20210212192658.3476137-1-dmitry.baryshkov@linaro.org\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":5,"deletions":0,"filepaths":{"drivers/misc/fastrpc.c":{"insertions":5,"deletions":0}}},"2e369878bd4399283f2950dc4947cf44c857dd74":{"author":"Bjorn Andersson","email":"bjorn.andersson@linaro.org","date":"2019-08-29 09:29:23 UTC","message":"misc: fastrpc: Don't reference rpmsg_device after remove\n\nAs fastrpc_rpmsg_remove() returns the rpdev of the channel context is no\nlonger a valid object, so ensure to update the channel context to no\nlonger reference the old object and guard in the invoke code path\nagainst dereferencing it.\n\nSigned-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>\nSigned-off-by: Mayank Chopra <mak.chopra@codeaurora.org>\nSigned-off-by: Abhinav Asati <asatiabhi@codeaurora.org>\nSigned-off-by: Vamsi Singamsetty <vamssi@codeaurora.org>\nSigned-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>\nLink: https://lore.kernel.org/r/20190829092926.12037-3-srinivas.kandagatla@linaro.org\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":4,"deletions":0,"filepaths":{"drivers/misc/fastrpc.c":{"insertions":4,"deletions":0}}},"c68cfb718c8f97b7f7a50ed66be5feb42d0c8988":{"author":"Srinivas Kandagatla","email":"srinivas.kandagatla@linaro.org","date":"2019-02-08 17:11:25 UTC","message":"misc: fastrpc: Add support for context Invoke method\n\nThis patch adds support to compute context invoke method on the\nremote processor (DSP).\nThis involves setting up the functions input and output arguments,\ninput and output handles and mapping the dmabuf fd for the\nargument/handle buffers.\n\nThe below diagram depicts invocation of a single method where the\nclient and objects reside on different processors. An object could\nexpose multiple methods which can be grouped together and referred\nto as an interface.\n\n,--------,        ,------,  ,-----------,  ,------,        ,--------,\n|        | method |      |  |           |  |      | method |        |\n| Client |------->| Stub |->| Transport |->| Skel |------->| Object |\n|        |        |      |  |           |  |      |        |        |\n`--------`        `------`  `-----------`  `------`        `--------`\n\nClient:    Linux user mode process that initiates the remote invocation\nStub:      Auto generated code linked in with the user mode pro","insertions":753,"deletions":0,"filepaths":{"drivers/misc/fastrpc.c":{"insertions":730,"deletions":0},"include/uapi/misc/fastrpc.h":{"insertions":23,"deletions":0}}},"74b6b20df8cfe90ada777d621b54c32e69e27cd7":{"author":"Dan Carpenter","email":"dan.carpenter@oracle.com","date":"2021-03-05 08:58:03 UTC","message":"staging: rtl8188eu: prevent ->ssid overflow in rtw_wx_set_scan()\n\nThis code has a check to prevent read overflow but it needs another\ncheck to prevent writing beyond the end of the ->ssid[] array.\n\nFixes: a2c60d42d97c (\"staging: r8188eu: Add files for new driver - part 16\")\nSigned-off-by: Dan Carpenter <dan.carpenter@oracle.com>\nCc: stable <stable@vger.kernel.org>\nLink: https://lore.kernel.org/r/YEHymwsnHewzoam7@mwanda\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":4,"deletions":2,"filepaths":{"drivers/staging/rtl8188eu/os_dep/ioctl_linux.c":{"insertions":4,"deletions":2}}},"a2c60d42d97cdbeee3c7371cd3502fca77f07d39":{"author":"Larry Finger","email":"Larry.Finger@lwfinger.net","date":"2013-08-22 03:33:58 UTC","message":"staging: r8188eu: Add files for new driver - part 16\n\nThis commit adds files os_dep/ioctl_linux.c, os_dep/mlme_linux.c, and\nos_dep/osdep_service.c.\n\nSigned-off-by: Larry Finger <Larry.Finger@lwfinger.net>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":9285,"deletions":0,"filepaths":{"drivers/staging/rtl8188eu/os_dep/ioctl_linux.c":{"insertions":8224,"deletions":0},"drivers/staging/rtl8188eu/os_dep/mlme_linux.c":{"insertions":246,"deletions":0},"drivers/staging/rtl8188eu/os_dep/osdep_service.c":{"insertions":815,"deletions":0}}},"82f1cebe64ea097a5851386ddee02b4ef45a2ad9":{"author":"Florian Büstgens","email":"flbue@gmx.de","date":"2019-01-15 16:16:19 UTC","message":"staging: rtl8188eu: Refactoring struct ndis_802_11_ssid from CamelCase to correct code style.\n\nrtl8188eu uses CamelCase for many struct members.\nRefactors the ndis_802_11_ssid members Ssid and SsidLength to keep correct code style.\nIssue found by checkpatch.\n\nSigned-off-by: Florian Büstgens <flbue@gmx.de>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":96,"deletions":96,"filepaths":{"drivers/staging/rtl8188eu/core/rtw_ap.c":{"insertions":4,"deletions":4},"drivers/staging/rtl8188eu/core/rtw_cmd.c":{"insertions":6,"deletions":6},"drivers/staging/rtl8188eu/core/rtw_ieee80211.c":{"insertions":3,"deletions":3},"drivers/staging/rtl8188eu/core/rtw_ioctl_set.c":{"insertions":6,"deletions":6},"drivers/staging/rtl8188eu/core/rtw_mlme.c":{"insertions":22,"deletions":22},"drivers/staging/rtl8188eu/core/rtw_mlme_ext.c":{"insertions":19,"deletions":19},"drivers/staging/rtl8188eu/core/rtw_wlan_util.c":{"insertions":9,"deletions":9},"drivers/staging/rtl8188eu/hal/rtl8188e_cmd.c":{"insertions":1,"deletions":1},"drivers/staging/rtl8188eu/include/wlan_bssdef.h":{"insertions":3,"deletions":3},"drivers/staging/rtl8188eu/os_dep/ioctl_linux.c":{"insertions":17,"deletions":17},"drivers/staging/rtl8188eu/os_dep/os_intfs.c":{"insertions":2,"deletions":2},"drivers/staging/rtl8188eu/os_dep/rtw_android.c":{"insertions":1,"deletions":1},"drivers/staging/rtl8188eu/os_dep/usb_intf.c":{"insertions":3,"deletions":3}}},"775c5033a0d164622d9d10dd0f0a5531639ed3ed":{"author":"Amir Goldstein","email":"amir73il@gmail.com","date":"2021-03-04 09:09:12 UTC","message":"fuse: fix live lock in fuse_iget()\n\nCommit 5d069dbe8aaf (\"fuse: fix bad inode\") replaced make_bad_inode()\nin fuse_iget() with a private implementation fuse_make_bad().\n\nThe private implementation fails to remove the bad inode from inode\ncache, so the retry loop with iget5_locked() finds the same bad inode\nand marks it bad forever.\n\nkmsg snip:\n\n[ ] rcu: INFO: rcu_sched self-detected stall on CPU\n...\n[ ]  ? bit_wait_io+0x50/0x50\n[ ]  ? fuse_init_file_inode+0x70/0x70\n[ ]  ? find_inode.isra.32+0x60/0xb0\n[ ]  ? fuse_init_file_inode+0x70/0x70\n[ ]  ilookup5_nowait+0x65/0x90\n[ ]  ? fuse_init_file_inode+0x70/0x70\n[ ]  ilookup5.part.36+0x2e/0x80\n[ ]  ? fuse_init_file_inode+0x70/0x70\n[ ]  ? fuse_inode_eq+0x20/0x20\n[ ]  iget5_locked+0x21/0x80\n[ ]  ? fuse_inode_eq+0x20/0x20\n[ ]  fuse_iget+0x96/0x1b0\n\nFixes: 5d069dbe8aaf (\"fuse: fix bad inode\")\nCc: stable@vger.kernel.org # 5.10+\nSigned-off-by: Amir Goldstein <amir73il@gmail.com>\nSigned-off-by: Miklos Szeredi <mszeredi@redhat.com>","insertions":1,"deletions":0,"filepaths":{"fs/fuse/fuse_i.h":{"insertions":1,"deletions":0}}},"3ebba796fa251d042be42b929a2d916ee5c34a49":{"author":"Jens Axboe","email":"axboe@kernel.dk","date":"2021-02-28 22:32:18 UTC","message":"io_uring: ensure that SQPOLL thread is started for exit\n\nIf we create it in a disabled state because IORING_SETUP_R_DISABLED is\nset on ring creation, we need to ensure that we've kicked the thread if\nwe're exiting before it's been explicitly disabled. Otherwise we can run\ninto a deadlock where exit is waiting go park the SQPOLL thread, but the\nSQPOLL thread itself is waiting to get a signal to start.\n\nThat results in the below trace of both tasks hung, waiting on each other:\n\nINFO: task syz-executor458:8401 blocked for more than 143 seconds.\n      Not tainted 5.11.0-next-20210226-syzkaller #0\n\"echo 0 > /proc/sys/kernel/hung_task_timeout_secs\" disables this message.\ntask:syz-executor458 state:D stack:27536 pid: 8401 ppid:  8400 flags:0x00004004\nCall Trace:\n context_switch kernel/sched/core.c:4324 [inline]\n __schedule+0x90c/0x21a0 kernel/sched/core.c:5075\n schedule+0xcf/0x270 kernel/sched/core.c:5154\n schedule_timeout+0x1db/0x250 kernel/time/timer.c:1868\n do_wait_for_common kernel/sched/c","insertions":3,"deletions":3,"filepaths":{"fs/io_uring.c":{"insertions":3,"deletions":3}}},"d9d05217cb6990b9a56e13b56e7a1b71e2551f6c":{"author":"Pavel Begunkov","email":"asml.silence@gmail.com","date":"2021-01-08 20:57:25 UTC","message":"io_uring: stop SQPOLL submit on creator's death\n\nWhen the creator of SQPOLL io_uring dies (i.e. sqo_task), we don't want\nits internals like ->files and ->mm to be poked by the SQPOLL task, it\nhave never been nice and recently got racy. That can happen when the\nowner undergoes destruction and SQPOLL tasks tries to submit new\nrequests in parallel, and so calls io_sq_thread_acquire*().\n\nThat patch halts SQPOLL submissions when sqo_task dies by introducing\nsqo_dead flag. Once set, the SQPOLL task must not do any submission,\nwhich is synchronised by uring_lock as well as the new flag.\n\nThe tricky part is to make sure that disabling always happens, that\nmeans either the ring is discovered by creator's do_exit() -> cancel,\nor if the final close() happens before it's done by the creator. The\nlast is guaranteed by the fact that for SQPOLL the creator task and only\nit holds exactly one file note, so either it pins up to do_exit() or\nremoved by the creator on the final put in flush. (see comments ","insertions":53,"deletions":9,"filepaths":{"fs/io_uring.c":{"insertions":53,"deletions":9}}},"7e84e1c7566a1df470a9e1f49d3db2ce311261a4":{"author":"Stefano Garzarella","email":"sgarzare@redhat.com","date":"2020-08-27 14:58:31 UTC","message":"io_uring: allow disabling rings during the creation\n\nThis patch adds a new IORING_SETUP_R_DISABLED flag to start the\nrings disabled, allowing the user to register restrictions,\nbuffers, files, before to start processing SQEs.\n\nWhen IORING_SETUP_R_DISABLED is set, SQE are not processed and\nSQPOLL kthread is not started.\n\nThe restrictions registration are allowed only when the rings\nare disable to prevent concurrency issue while processing SQEs.\n\nThe rings can be enabled using IORING_REGISTER_ENABLE_RINGS\nopcode with io_uring_register(2).\n\nSuggested-by: Jens Axboe <axboe@kernel.dk>\nSigned-off-by: Stefano Garzarella <sgarzare@redhat.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>","insertions":56,"deletions":7,"filepaths":{"fs/io_uring.c":{"insertions":54,"deletions":7},"include/uapi/linux/io_uring.h":{"insertions":2,"deletions":0}}},"534ca6d684f1feaf2edd90e641129725cba7e86d":{"author":"Jens Axboe","email":"axboe@kernel.dk","date":"2020-09-02 19:52:19 UTC","message":"io_uring: split SQPOLL data into separate structure\n\nMove all the necessary state out of io_ring_ctx, and into a new\nstructure, io_sq_data. The latter now deals with any state or\nvariables associated with the SQPOLL thread itself.\n\nIn preparation for supporting more than one io_ring_ctx per SQPOLL\nthread.\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>","insertions":41,"deletions":86,"filepaths":{"fs/io_uring.c":{"insertions":41,"deletions":86}}},"eb85890b29e4d7ae1accdcfba35ed8b16ba9fb97":{"author":"Jens Axboe","email":"axboe@kernel.dk","date":"2021-02-25 17:13:29 UTC","message":"io_uring: ensure SQPOLL startup is triggered before error shutdown\n\nsyzbot reports the following hang:\n\nINFO: task syz-executor.0:12538 can't die for more than 143 seconds.\ntask:syz-executor.0  state:D stack:28352 pid:12538 ppid:  8423 flags:0x00004004\nCall Trace:\n context_switch kernel/sched/core.c:4324 [inline]\n __schedule+0x90c/0x21a0 kernel/sched/core.c:5075\n schedule+0xcf/0x270 kernel/sched/core.c:5154\n schedule_timeout+0x1db/0x250 kernel/time/timer.c:1868\n do_wait_for_common kernel/sched/completion.c:85 [inline]\n __wait_for_common kernel/sched/completion.c:106 [inline]\n wait_for_common kernel/sched/completion.c:117 [inline]\n wait_for_completion+0x168/0x270 kernel/sched/completion.c:138\n io_sq_thread_finish+0x96/0x580 fs/io_uring.c:7152\n io_sq_offload_create fs/io_uring.c:7929 [inline]\n io_uring_create fs/io_uring.c:9465 [inline]\n io_uring_setup+0x1fb2/0x2c20 fs/io_uring.c:9550\n do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46\n entry_SYSCALL_64_after_hwframe+0x44/0xae\n\nwhich is d","insertions":2,"deletions":1,"filepaths":{"fs/io_uring.c":{"insertions":2,"deletions":1}}},"37d1e2e3642e2380750d7f35279180826f29660e":{"author":"Jens Axboe","email":"axboe@kernel.dk","date":"2021-02-18 04:03:43 UTC","message":"io_uring: move SQPOLL thread io-wq forked worker\n\nDon't use a kthread for SQPOLL, use a forked worker just like the io-wq\nworkers. With that done, we can drop the various context grabbing we do\nfor SQPOLL, it already has everything it needs.\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>","insertions":181,"deletions":292,"filepaths":{"fs/io_uring.c":{"insertions":181,"deletions":292}}},"1c668e1c0a0f74472469cd514f40c9012b324c31":{"author":"Srinivas Kandagatla","email":"srinivas.kandagatla@linaro.org","date":"2021-03-09 14:21:27 UTC","message":" iQEzBAABCgAdFiEEreZoqmdXGLWf4p/qJNaLcl1Uh9AFAmBIwL0ACgkQJNaLcl1U\n h9DjsAf/VKDgyUYgHOWoi1MIx3D9jSfaupEL7OoKJA8Oua41IQ6pKDl6+gyHsZsm\n 2udJg6eTr6oUU1OkLEnOy8ATeVzUBPEndQXMfwKHLr3lHDMq87YIYn6w/px31zrE\n +JgzdDu5zCLTwEC9ULfImls9kAffmyQRb0puyVi5lLK8+YqFtTyp4ZW3psRTjsZj\n I9T8k+B0IBsGNLoKeEXRFiKn5qG5E4TbaVRD2LulnCvBmKBdQAOtMi1KSOMWwCl0\n QiUfBOijDLDZrFIptVdH2wzdwlyk4yFksLkZwf/WCm+Onmxb9IvMq1NR6U3R+QAN\n 6srZ++OqnWnK4kFyIYIzYXFqaNgGGw==\n =itd4\n -----END PGP SIGNATURE-----\n\nASoC: qcom: sdm845: Fix array out of bounds access\n\nStatic analysis Coverity had detected a potential array out-of-bounds\nwrite issue due to the fact that MAX AFE port Id was set to 16 instead\nof using AFE_PORT_MAX macro.\n\nFix this by properly using AFE_PORT_MAX macro.\n\nFixes: 1b93a8843147 (\"ASoC: qcom: sdm845: handle soundwire stream\")\nReported-by: John Stultz <john.stultz@linaro.org>\nSigned-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>\nLink: https://lore.kernel.org/r/20210309142129.14182-2-srinivas.kandagatla@li","insertions":2,"deletions":2,"filepaths":{"sound/soc/qcom/sdm845.c":{"insertions":2,"deletions":2}}},"1b93a88431470ea0b943157999084d9c7e6e3bd3":{"author":"Srinivas Kandagatla","email":"srinivas.kandagatla@linaro.org","date":"2020-03-17 15:12:32 UTC","message":" iQFHBAABCgAxFiEEreZoqmdXGLWf4p/qJNaLcl1Uh9AFAl5ykeETHGJyb29uaWVA\n a2VybmVsLm9yZwAKCRAk1otyXVSH0KPAB/4wKYclM1PU88S10+1vstS2/W5vyeyR\n sGJRSXbg7Hmw4lQBUR5r6OdoIPvDq/C+2sW9hsxSL4jvU+4GJkdQzOel3nhWeD/7\n 6I3IlWBVddxL/7t0To7IobjORUH9+1PxGov6bwujupd5ijuiyLC/gmd0e8zG/zLm\n 8QVDiUzD81lr7hzruKTXtMEC2AiBUmkAxcjsqvrOdU3B9iOnFzFiYyipV1eSpHtq\n NU9Dbq0ZseTahd3Eb2FbsoROJx/NG7GpZYan/Ivhwut4znrqNP/fAf6SyXNZ7XOP\n dWKFcttTMaRXAAHdscHX/NOLklb8TcsmvFp1mvZqvsMGnumvw09PhunH\n =KkME\n -----END PGP SIGNATURE-----\n\nASoC: qcom: sdm845: handle soundwire stream\n\nIn existing setup WSA881x codec handles soundwire stream,\nhowever DB845c and other machines based on SDM845c have 2\ninstances for WSA881x codec. This will force soundwire stream\nto be prepared/enabled twice or multiple times.\nHandling SoundWire Stream in machine driver would fix this issue.\n\nSigned-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>\nReviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>\nLink: https://lore.kernel.org/r","insertions":68,"deletions":1,"filepaths":{"sound/soc/qcom/Kconfig":{"insertions":1,"deletions":1},"sound/soc/qcom/sdm845.c":{"insertions":67,"deletions":0}}},"dbcc7d57bffc0c8cac9dac11bec548597d59a6a5":{"author":"Filipe Manana","email":"fdmanana@suse.com","date":"2021-03-11 14:31:05 UTC","message":"btrfs: fix race when cloning extent buffer during rewind of an old root\n\nWhile resolving backreferences, as part of a logical ino ioctl call or\nfiemap, we can end up hitting a BUG_ON() when replaying tree mod log\noperations of a root, triggering a stack trace like the following:\n\n  ------------[ cut here ]------------\n  kernel BUG at fs/btrfs/ctree.c:1210!\n  invalid opcode: 0000 [#1] SMP KASAN PTI\n  CPU: 1 PID: 19054 Comm: crawl_335 Tainted: G        W         5.11.0-2d11c0084b02-misc-next+ #89\n  Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014\n  RIP: 0010:__tree_mod_log_rewind+0x3b1/0x3c0\n  Code: 05 48 8d 74 10 (...)\n  RSP: 0018:ffffc90001eb70b8 EFLAGS: 00010297\n  RAX: 0000000000000000 RBX: ffff88812344e400 RCX: ffffffffb28933b6\n  RDX: 0000000000000007 RSI: dffffc0000000000 RDI: ffff88812344e42c\n  RBP: ffffc90001eb7108 R08: 1ffff11020b60a20 R09: ffffed1020b60a20\n  R10: ffff888105b050f9 R11: ffffed1020b60a1f R12: 00000000000000ee\n  R13: ffff8880195520c0 R1","insertions":2,"deletions":0,"filepaths":{"fs/btrfs/ctree.c":{"insertions":2,"deletions":0}}},"834328a8493079d15f30866ace42489463f52571":{"author":"Jan Schmidt","email":"list.btrfs@jan-o-sch.net","date":"2012-10-23 09:27:33 UTC","message":"Btrfs: tree mod log's old roots could still be part of the tree\n\nTree mod log treated old root buffers as always empty buffers when starting\nthe rewind operations. However, the old root may still be part of the\ncurrent tree at a lower level, with still some valid entries.\n\nSigned-off-by: Jan Schmidt <list.btrfs@jan-o-sch.net>","insertions":21,"deletions":4,"filepaths":{"fs/btrfs/ctree.c":{"insertions":21,"deletions":4}}},"0b246afa62b0cf5b09d078121f543135f28492ad":{"author":"Jeff Mahoney","email":"jeffm@suse.com","date":"2016-06-22 22:54:23 UTC","message":"btrfs: root->fs_info cleanup, add fs_info convenience variables\n\nIn routines where someptr->fs_info is referenced multiple times, we\nintroduce a convenience variable.  This makes the code considerably\nmore readable.\n\nSigned-off-by: Jeff Mahoney <jeffm@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>","insertions":2251,"deletions":2016,"filepaths":{"fs/btrfs/check-integrity.c":{"insertions":33,"deletions":30},"fs/btrfs/compression.c":{"insertions":15,"deletions":13},"fs/btrfs/ctree.c":{"insertions":140,"deletions":115},"fs/btrfs/ctree.h":{"insertions":9,"deletions":5},"fs/btrfs/delayed-inode.c":{"insertions":21,"deletions":16},"fs/btrfs/dev-replace.c":{"insertions":23,"deletions":23},"fs/btrfs/dir-item.c":{"insertions":6,"deletions":6},"fs/btrfs/disk-io.c":{"insertions":143,"deletions":125},"fs/btrfs/export.c":{"insertions":6,"deletions":4},"fs/btrfs/extent-tree.c":{"insertions":393,"deletions":358},"fs/btrfs/extent_io.c":{"insertions":15,"deletions":10},"fs/btrfs/file-item.c":{"insertions":60,"deletions":54},"fs/btrfs/file.c":{"insertions":70,"deletions":62},"fs/btrfs/free-space-cache.c":{"insertions":51,"deletions":38},"fs/btrfs/free-space-tree.c":{"insertions":14,"deletions":15},"fs/btrfs/inode-item.c":{"insertions":2,"deletions":1},"fs/btrfs/inode-map.c":{"insertions":10,"deletions":10},"fs/btrfs/inode.c":{"insertions":267,"deletions":227},"fs/btrfs/ioctl.c":{"insertions":231,"deletions":193},"fs/btrfs/ordered-data.c":{"insertions":18,"deletions":16},"fs/btrfs/print-tree.c":{"insertions":5,"deletions":3},"fs/btrfs/qgroup.c":{"insertions":24,"deletions":18},"fs/btrfs/raid56.c":{"insertions":18,"deletions":24},"fs/btrfs/reada.c":{"insertions":4,"deletions":5},"fs/btrfs/relocation.c":{"insertions":71,"deletions":57},"fs/btrfs/root-tree.c":{"insertions":7,"deletions":8},"fs/btrfs/scrub.c":{"insertions":39,"deletions":41},"fs/btrfs/send.c":{"insertions":7,"deletions":10},"fs/btrfs/super.c":{"insertions":50,"deletions":62},"fs/btrfs/transaction.c":{"insertions":175,"deletions":156},"fs/btrfs/tree-log.c":{"insertions":64,"deletions":53},"fs/btrfs/uuid-tree.c":{"insertions":3,"deletions":4},"fs/btrfs/volumes.c":{"insertions":257,"deletions":254}}},"7bfdcf7fbad56c0f1fc3e2d26431bed72bdcce2d":{"author":"Liu Bo","email":"bo.li.liu@oracle.com","date":"2012-10-25 13:30:19 UTC","message":"Btrfs: fix memory leak when cloning root's node\n\nAfter cloning root's node, we forgot to dec the src's ref\nwhich can lead to a memory leak.\n\nSigned-off-by: Liu Bo <bo.li.liu@oracle.com>\nSigned-off-by: Chris Mason <chris.mason@fusionio.com>","insertions":5,"deletions":3,"filepaths":{"fs/btrfs/ctree.c":{"insertions":5,"deletions":3}}},"d88d05a9e0b6d9356e97129d4ff9942d765f46ea":{"author":"Kan Liang","email":"kan.liang@linux.intel.com","date":"2021-03-12 13:21:37 UTC","message":"perf/x86/intel: Fix a crash caused by zero PEBS status\n\nA repeatable crash can be triggered by the perf_fuzzer on some Haswell\nsystem.\nhttps://lore.kernel.org/lkml/7170d3b-c17f-1ded-52aa-cc6d9ae999f4@maine.edu/\n\nFor some old CPUs (HSW and earlier), the PEBS status in a PEBS record\nmay be mistakenly set to 0. To minimize the impact of the defect, the\ncommit was introduced to try to avoid dropping the PEBS record for some\ncases. It adds a check in the intel_pmu_drain_pebs_nhm(), and updates\nthe local pebs_status accordingly. However, it doesn't correct the PEBS\nstatus in the PEBS record, which may trigger the crash, especially for\nthe large PEBS.\n\nIt's possible that all the PEBS records in a large PEBS have the PEBS\nstatus 0. If so, the first get_next_pebs_record_by_bit() in the\n__intel_pmu_pebs_event() returns NULL. The at = NULL. Since it's a large\nPEBS, the 'count' parameter must > 1. The second\nget_next_pebs_record_by_bit() will crash.\n\nBesides the local pebs_status, correct the PEBS ","insertions":1,"deletions":1,"filepaths":{"arch/x86/events/intel/ds.c":{"insertions":1,"deletions":1}}},"01330d7288e0050c5aaabc558059ff91589e67cd":{"author":"Andi Kleen","email":"ak@linux.intel.com","date":"2015-12-03 21:22:20 UTC","message":"perf/x86: Allow zero PEBS status with only single active event\n\nNormally we drop PEBS events with a zero status field. But when\nthere is only a single PEBS event active we can assume the\nPEBS record is for that event. The PEBS buffer is always flushed\nwhen PEBS events are disabled, so there is no risk of mishandling\nstate PEBS records this way.\n\nSigned-off-by: Andi Kleen <ak@linux.intel.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: Arnaldo Carvalho de Melo <acme@redhat.com>\nCc: Jiri Olsa <jolsa@redhat.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Stephane Eranian <eranian@google.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Vince Weaver <vincent.weaver@maine.edu>\nLink: http://lkml.kernel.org/r/1449177740-5422-2-git-send-email-andi@firstfloor.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>","insertions":12,"deletions":0,"filepaths":{"arch/x86/kernel/cpu/perf_event_intel_ds.c":{"insertions":12,"deletions":0}}},"cc7a0bb058b85ea03db87169c60c7cfdd5d34678":{"author":"Tyrel Datwyler","email":"tyreld@linux.ibm.com","date":"2021-03-15 21:48:21 UTC","message":"PCI: rpadlpar: Fix potential drc_name corruption in store functions\n\nBoth add_slot_store() and remove_slot_store() try to fix up the\ndrc_name copied from the store buffer by placing a NUL terminator at\nnbyte + 1 or in place of a '\\n' if present. However, the static buffer\nthat we copy the drc_name data into is not zeroed and can contain\nanything past the n-th byte.\n\nThis is problematic if a '\\n' byte appears in that buffer after nbytes\nand the string copied into the store buffer was not NUL terminated to\nstart with as the strchr() search for a '\\n' byte will mark this\nincorrectly as the end of the drc_name string resulting in a drc_name\nstring that contains garbage data after the n-th byte.\n\nAdditionally it will cause us to overwrite that '\\n' byte on the stack\nwith NUL, potentially corrupting data on the stack.\n\nThe following debugging shows an example of the drmgr utility writing\n\"PHB 4543\" to the add_slot sysfs attribute, but add_slot_store()\nlogging a corrupted string value.\n\n  drmg","insertions":6,"deletions":8,"filepaths":{"drivers/pci/hotplug/rpadlpar_sysfs.c":{"insertions":6,"deletions":8}}},"d8861bab48b6c1fc3cdbcab8ff9d1eaea43afe7f":{"author":"Michael Braun","email":"michael-dev@fami-braun.de","date":"2021-03-04 19:52:52 UTC","message":"gianfar: fix jumbo packets+napi+rx overrun crash\n\nWhen using jumbo packets and overrunning rx queue with napi enabled,\nthe following sequence is observed in gfar_add_rx_frag:\n\n   | lstatus                              |       | skb                   |\nt  | lstatus,  size, flags                | first | len, data_len, *ptr   |\n---+--------------------------------------+-------+-----------------------+\n13 | 18002348, 9032, INTERRUPT LAST       | 0     | 9600, 8000,  f554c12e |\n12 | 10000640, 1600, INTERRUPT            | 0     | 8000, 6400,  f554c12e |\n11 | 10000640, 1600, INTERRUPT            | 0     | 6400, 4800,  f554c12e |\n10 | 10000640, 1600, INTERRUPT            | 0     | 4800, 3200,  f554c12e |\n09 | 10000640, 1600, INTERRUPT            | 0     | 3200, 1600,  f554c12e |\n08 | 14000640, 1600, INTERRUPT FIRST      | 0     | 1600, 0,     f554c12e |\n07 | 14000640, 1600, INTERRUPT FIRST      | 1     | 0,    0,     f554c12e |\n06 | 1c000080, 128,  INTERRUPT LAST FIRST | 1     | 0,    0,     ","insertions":15,"deletions":0,"filepaths":{"drivers/net/ethernet/freescale/gianfar.c":{"insertions":15,"deletions":0}}},"75354148ce697266b57c13d051ddffa3bb75fc9e":{"author":"Claudiu Manoil","email":"claudiu.manoil@freescale.com","date":"2015-07-13 13:22:06 UTC","message":"gianfar: Add paged allocation and Rx S/G\n\nThe eTSEC h/w is capable of scatter/gather on the receive side\ntoo if MAXFRM > MRBLR, when the allowed maximum Rx frame size\nis set to be greater than the maximum Rx buffer size (MRBLR).\nIt's about time the driver makes use of this h/w capability,\nby supporting fixed buffer sizes and Rx S/G.\n\nThe buffer size given to eTSEC for reception is fixed to\n1536B (must be multiple of 64), which is the same default\nbuffer size as before, used to accommodate standard MTU\n(1500B) size frames.  As before, eTSEC can receive frames of\nup to 9600B.  Individual Rx buffers are mapped to page halves\n(page size for eTSEC systems is 4KB).  The skb is built around\nthe first buffer of a frame (using build_skb()).  In case the\nframe spans multiple buffers, the trailing buffers are added\nas Rx fragments to the skb.  The last buffer in frame is marked\nby the L status flag.  A mechanism is in place to reuse the pages\nowned by the driver (for Rx) for subsequent receptions.","insertions":208,"deletions":144,"filepaths":{"drivers/net/ethernet/freescale/gianfar.c":{"insertions":190,"deletions":130},"drivers/net/ethernet/freescale/gianfar.h":{"insertions":18,"deletions":13},"drivers/net/ethernet/freescale/gianfar_ethtool.c":{"insertions":0,"deletions":1}}},"76f31e8b0911e620ac9191c8d3775cc91ed65c4c":{"author":"Claudiu Manoil","email":"claudiu.manoil@freescale.com","date":"2015-07-13 13:22:03 UTC","message":"gianfar: Bundle Rx allocation, cleanup\n\nUse a more common consumer/ producer index design to improve\nrx buffer allocation.  Instead of allocating a single new buffer\n(skb) on each iteration, bundle the allocation of several rx\nbuffers at a time.  This also opens the path for further memory\noptimizations.\n\nRemove useless check of rxq->rfbptr, since this patch touches\nrx pause frame handling code as well.  rxq->rfbptr is always\ninitialized as part of Rx BD ring init.\nRemove redundant (and misleading) 'amount_pull' parameter.\n\nSigned-off-by: Claudiu Manoil <claudiu.manoil@freescale.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":136,"deletions":107,"filepaths":{"drivers/net/ethernet/freescale/gianfar.c":{"insertions":104,"deletions":97},"drivers/net/ethernet/freescale/gianfar.h":{"insertions":29,"deletions":10},"drivers/net/ethernet/freescale/gianfar_ethtool.c":{"insertions":3,"deletions":0}}},"6c389fc931bcda88940c809f752ada6d7799482c":{"author":"Zefir Kurtisi","email":"zefir.kurtisi@neratec.com","date":"2016-08-22 13:58:12 UTC","message":"gianfar: fix size of scatter-gathered frames\n\nThe current scatter-gather logic in gianfar is flawed, since\nit does not consider the eTSEC's RxBD 'Data Length' field is\ncontext depening: for the last fragment it contains the full\nframe size, while fragments contain the fragment size, which\nequals the value written to register MRBLR.\n\nThis causes data corruption as soon as the hardware starts\nto fragment receiving frames. As a result, the size of\nfragmented frames is increased by\n(nr_frags - 1) * MRBLR\n\nWe first noticed this issue working with DSA, where an ICMP\nrequest sized 1472 bytes causes the scatter-gather logic to\nkick in. The full Ethernet frame (1518) gets increased by\nDSA (4), GMAC_FCB_LEN (8), and FSL_GIANFAR_DEV_HAS_TIMER\n(priv->padding=8) to a total of 1538 octets, which is\nfragmented by the hardware and reconstructed by the driver\nto a 3074 octet frame.\n\nThis patch fixes the problem by adjusting the size of\nthe last fragment.\n\nIt was tested by setting MRBLR to different mult","insertions":14,"deletions":6,"filepaths":{"drivers/net/ethernet/freescale/gianfar.c":{"insertions":14,"deletions":6}}},"815b97c6b8861f2e539c9ecb44c02b7b8ac11ca4":{"author":"Andy Fleming","email":"afleming@freescale.com","date":"2008-04-22 22:18:29 UTC","message":"gianfar: Fix skb allocation strategy\n\ngianfar was unable to handle failed skb allocation for rx buffers, so\nwe were spinning until it succeeded.  Actually, it was worse--we were\nspinning for a long time, and then silently failing.  Instead, we take\nStephen Hemminger's suggestion to try the allocation earlier, and drop the\npacket if it failed.\n\nWe also make a couple of tweaks to how buffer descriptors are set up.\n\nSigned-off-by: Andy Fleming <afleming@freescale.com>\nSigned-off-by: Jeff Garzik <jgarzik@redhat.com>","insertions":65,"deletions":35,"filepaths":{"drivers/net/gianfar.c":{"insertions":65,"deletions":35}}},"d903ec77118c09f93a610b384d83a6df33a64fe6":{"author":"Andy Spencer","email":"aspencer@spacex.com","date":"2018-02-22 19:05:33 UTC","message":"gianfar: simplify FCS handling and fix memory leak\n\nPreviously, buffer descriptors containing only the frame check sequence\n(FCS) were skipped and not added to the skb. However, the page reference\ncount was still incremented, leading to a memory leak.\n\nFixing this inside gfar_add_rx_frag() is difficult due to reserved\nmemory handling and page reuse. Instead, move the FCS handling to\ngfar_process_frame() and trim off the FCS before passing the skb up the\nnetworking stack.\n\nSigned-off-by: Andy Spencer <aspencer@spacex.com>\nSigned-off-by: Jim Gruen <jgruen@spacex.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":7,"deletions":16,"filepaths":{"drivers/net/ethernet/freescale/gianfar.c":{"insertions":7,"deletions":16}}},"f966082e2065d223942cc40e0bc4841f84f0604d":{"author":"Claudiu Manoil","email":"claudiu.manoil@freescale.com","date":"2015-07-13 13:22:04 UTC","message":"gianfar: Fix and cleanup rxbd status handling\n\nThere are several (long standing) problems about how the status\nfield of the rx buffer descriptor (rxbd) is currently handled on\nthe error path:\n- too many unnecessary 16bit reads of the two halves of the rxbd\nstatus field (32bit), also resulting in overuse of endianness\nconvesion macros;\n- \"bdp->status = RXBD_LARGE\" makes no sense, since the \"large\"\nflag is read only (only eTSEC can write it), and trying to clear\nthe other status bits is also error prone in this context\n(most of the rx status bits are read only anyway).\n\nThis is fixed with a single 32bit read of the \"status\" field,\nand then the appropriate 16bit shifting is applied to access\nthe various status bits or the rx frame length. Also corrected\nthe use of the RXBD_LARGE flag.\n\nAdditional fix:\n\"rx_over_errors\" stat is incremented instead of \"rx_crc_errors\"\nin case of RXBD_OVERRUN occurrence.\n\nSigned-off-by: Claudiu Manoil <claudiu.manoil@freescale.com>\nSigned-off-by: David S. Mille","insertions":18,"deletions":16,"filepaths":{"drivers/net/ethernet/freescale/gianfar.c":{"insertions":18,"deletions":16}}},"9380afd6df70e24eacbdbde33afc6a3950965d22":{"author":"Shuah Khan","email":"skhan@linuxfoundation.org","date":"2021-03-08 03:53:29 UTC","message":"usbip: fix stub_dev usbip_sockfd_store() races leading to gpf\n\nusbip_sockfd_store() is invoked when user requests attach (import)\ndetach (unimport) usb device from usbip host. vhci_hcd sends import\nrequest and usbip_sockfd_store() exports the device if it is free\nfor export.\n\nExport and unexport are governed by local state and shared state\n- Shared state (usbip device status, sockfd) - sockfd and Device\n  status are used to determine if stub should be brought up or shut\n  down.\n- Local state (tcp_socket, rx and tx thread task_struct ptrs)\n  A valid tcp_socket controls rx and tx thread operations while the\n  device is in exported state.\n- While the device is exported, device status is marked used and socket,\n  sockfd, and thread pointers are valid.\n\nExport sequence (stub-up) includes validating the socket and creating\nreceive (rx) and transmit (tx) threads to talk to the client to provide\naccess to the exported device. rx and tx threads depends on local and\nshared state to be correct and","insertions":25,"deletions":7,"filepaths":{"drivers/usb/usbip/stub_dev.c":{"insertions":25,"deletions":7}}},"4d7b5c7f8ad49b7f01fb8aed83c560ac43cfbda8":{"author":"Takahiro Hirofuchi","email":"hirofuchi@users.sourceforge.net","date":"2008-07-09 20:56:51 UTC","message":"Staging: USB/IP: add host driver\n\nThis adds the USB IP client driver\n\nBrian Merrell cleaned up a lot of this code and submitted it for\ninclusion.  Greg also did a lot of cleanup.\n\nSigned-off-by: Brian G. Merrell <bgmerrell@novell.com>\nCc: Takahiro Hirofuchi <hirofuchi@users.sourceforge.net>\nSigned-off-by: Greg Kroah-Hartman <gregkh@suse.de>","insertions":1878,"deletions":0,"filepaths":{"drivers/staging/usbip/Kconfig":{"insertions":11,"deletions":0},"drivers/staging/usbip/Makefile":{"insertions":3,"deletions":0},"drivers/staging/usbip/stub.h":{"insertions":95,"deletions":0},"drivers/staging/usbip/stub_dev.c":{"insertions":483,"deletions":0},"drivers/staging/usbip/stub_main.c":{"insertions":300,"deletions":0},"drivers/staging/usbip/stub_rx.c":{"insertions":615,"deletions":0},"drivers/staging/usbip/stub_tx.c":{"insertions":371,"deletions":0}}},"8c4e58348b79d826076b7062ead4b9d828773a7f":{"author":"Kurt Kanzenbach","email":"ly80toro@cip.cs.fau.de","date":"2013-02-22 11:13:34 UTC","message":"staging: usbip: removed lines over 80 characters\n\nThis patch fixes the following checkpatch warning:\n-WARNING: line over 80 characters\n\nSigned-off-by: Kurt Kanzenbach <ly80toro@cip.cs.fau.de>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":4,"deletions":2,"filepaths":{"drivers/staging/usbip/stub_dev.c":{"insertions":4,"deletions":2}}},"dcf14779280215d1765141ce04c675df3e4301c5":{"author":"Harvey Yang","email":"harvey.huawei.yang@gmail.com","date":"2013-01-22 05:31:30 UTC","message":"staging: usbip: use interrupt safe spinlock to avoid potential deadlock.\n\nThe function 'usbip_event_add()' may be called in interrupt context on\nthe stub side:\n'stub_complete'->'stub_enqueue_ret_unlink'->'usbip_event_add'.\nIn this function it tries to get the lock 'ud->lock', so we should\ndisable irq when we get this lock in process context.\n\nSigned-off-by: Harvey Yang <harvey.huawei.yang@gmail.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":23,"deletions":21,"filepaths":{"drivers/staging/usbip/stub_dev.c":{"insertions":17,"deletions":17},"drivers/staging/usbip/stub_rx.c":{"insertions":2,"deletions":2},"drivers/staging/usbip/usbip_event.c":{"insertions":4,"deletions":2}}},"f8cfc0230909077d2e378c829ffeb7bdf71a890e":{"author":"Elena Oat","email":"oat.elena@gmail.com","date":"2014-02-27 10:26:52 UTC","message":"Staging: usbip: Fix the warning of unchecked sscanf return value.\n\nThe return value of sscanf in stub_dev.c is not checked. This patch\nadds the checking of the return value.\n\nSigned-off-by: Elena Oat <oat.elena@gmail.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":4,"deletions":1,"filepaths":{"drivers/staging/usbip/stub_dev.c":{"insertions":4,"deletions":1}}},"009f41aed4b3e11e6dc1e3c07377a10c20f1a5ed":{"author":"Shuah Khan","email":"shuahkh@osg.samsung.com","date":"2018-01-26 18:56:50 UTC","message":"usbip: keep usbip_device sockfd state in sync with tcp_socket\n\nKeep usbip_device sockfd state in sync with tcp_socket. When tcp_socket\nis reset to null, reset sockfd to -1 to keep it in sync.\n\nSigned-off-by: Shuah Khan <shuahkh@osg.samsung.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":5,"deletions":0,"filepaths":{"drivers/usb/usbip/stub_dev.c":{"insertions":3,"deletions":0},"drivers/usb/usbip/vhci_hcd.c":{"insertions":2,"deletions":0}}},"f6bbf0010ba004f5e90c7aefdebc0ee4bd3283b9":{"author":"Stefano Garzarella","email":"sgarzare@redhat.com","date":"2021-03-11 13:52:56 UTC","message":"vhost-vdpa: fix use-after-free of v->config_ctx\n\nWhen the 'v->config_ctx' eventfd_ctx reference is released we didn't\nset it to NULL. So if the same character device (e.g. /dev/vhost-vdpa-0)\nis re-opened, the 'v->config_ctx' is invalid and calling again\nvhost_vdpa_config_put() causes use-after-free issues like the\nfollowing refcount_t underflow:\n\n    refcount_t: underflow; use-after-free.\n    WARNING: CPU: 2 PID: 872 at lib/refcount.c:28 refcount_warn_saturate+0xae/0xf0\n    RIP: 0010:refcount_warn_saturate+0xae/0xf0\n    Call Trace:\n     eventfd_ctx_put+0x5b/0x70\n     vhost_vdpa_release+0xcd/0x150 [vhost_vdpa]\n     __fput+0x8e/0x240\n     ____fput+0xe/0x10\n     task_work_run+0x66/0xa0\n     exit_to_user_mode_prepare+0x118/0x120\n     syscall_exit_to_user_mode+0x21/0x50\n     ? __x64_sys_close+0x12/0x40\n     do_syscall_64+0x45/0x50\n     entry_SYSCALL_64_after_hwframe+0x44/0xae\n\nFixes: 776f395004d8 (\"vhost_vdpa: Support config interrupt in vdpa\")\nCc: lingshan.zhu@intel.com\nCc: stable@vger.kern","insertions":3,"deletions":1,"filepaths":{"drivers/vhost/vdpa.c":{"insertions":3,"deletions":1}}},"776f395004d829bbbf18c159ed9beb517a208c71":{"author":"Zhu Lingshan","email":"lingshan.zhu@intel.com","date":"2020-06-05 10:27:13 UTC","message":"vhost_vdpa: Support config interrupt in vdpa\n\nThis commit implements config interrupt support in\nvhost_vdpa layer.\n\nSigned-off-by: Zhu Lingshan <lingshan.zhu@intel.com>\nAcked-by: Jason Wang <jasowang@redhat.com>\nLink: https://lore.kernel.org/r/1591352835-22441-4-git-send-email-lingshan.zhu@intel.com\nSigned-off-by: Michael S. Tsirkin <mst@redhat.com>","insertions":51,"deletions":0,"filepaths":{"drivers/vhost/vdpa.c":{"insertions":47,"deletions":0},"include/uapi/linux/vhost.h":{"insertions":4,"deletions":0}}},"0217ed2848e8538bcf9172d97ed2eeb4a26041bb":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2021-03-15 10:06:58 UTC","message":"tipc: better validate user input in tipc_nl_retrieve_key()\n\nBefore calling tipc_aead_key_size(ptr), we need to ensure\nwe have enough data to dereference ptr->keylen.\n\nWe probably also want to make sure tipc_aead_key_size()\nwont overflow with malicious ptr->keylen values.\n\nSyzbot reported:\n\nBUG: KMSAN: uninit-value in __tipc_nl_node_set_key net/tipc/node.c:2971 [inline]\nBUG: KMSAN: uninit-value in tipc_nl_node_set_key+0x9bf/0x13b0 net/tipc/node.c:3023\nCPU: 0 PID: 21060 Comm: syz-executor.5 Not tainted 5.11.0-rc7-syzkaller #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\nCall Trace:\n __dump_stack lib/dump_stack.c:79 [inline]\n dump_stack+0x21c/0x280 lib/dump_stack.c:120\n kmsan_report+0xfb/0x1e0 mm/kmsan/kmsan_report.c:118\n __msan_warning+0x5f/0xa0 mm/kmsan/kmsan_instr.c:197\n __tipc_nl_node_set_key net/tipc/node.c:2971 [inline]\n tipc_nl_node_set_key+0x9bf/0x13b0 net/tipc/node.c:3023\n genl_family_rcv_msg_doit net/netlink/genetlink.c:739 [inline]\n g","insertions":8,"deletions":3,"filepaths":{"net/tipc/node.c":{"insertions":8,"deletions":3}}},"e1f32190cf7ddd55778b460e7d44af3f76529698":{"author":"Tuong Lien","email":"tuong.t.lien@dektech.com.au","date":"2019-11-08 05:05:12 UTC","message":"tipc: add support for AEAD key setting via netlink\n\nThis commit adds two netlink commands to TIPC in order for user to be\nable to set or remove AEAD keys:\n- TIPC_NL_KEY_SET\n- TIPC_NL_KEY_FLUSH\n\nWhen the 'KEY_SET' is given along with the key data, the key will be\ninitiated and attached to TIPC crypto. On the other hand, the\n'KEY_FLUSH' command will remove all existing keys if any.\n\nAcked-by: Ying Xue <ying.xue@windreiver.com>\nAcked-by: Jon Maloy <jon.maloy@ericsson.com>\nSigned-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":160,"deletions":1,"filepaths":{"include/uapi/linux/tipc_netlink.h":{"insertions":4,"deletions":0},"net/tipc/netlink.c":{"insertions":17,"deletions":1},"net/tipc/node.c":{"insertions":135,"deletions":0},"net/tipc/node.h":{"insertions":4,"deletions":0}}},"50535249f624d0072cd885bcdce4e4b6fb770160":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2021-03-12 16:59:48 UTC","message":"net: qrtr: fix a kernel-infoleak in qrtr_recvmsg()\n\nstruct sockaddr_qrtr has a 2-byte hole, and qrtr_recvmsg() currently\ndoes not clear it before copying kernel data to user space.\n\nIt might be too late to name the hole since sockaddr_qrtr structure is uapi.\n\nBUG: KMSAN: kernel-infoleak in kmsan_copy_to_user+0x9c/0xb0 mm/kmsan/kmsan_hooks.c:249\nCPU: 0 PID: 29705 Comm: syz-executor.3 Not tainted 5.11.0-rc7-syzkaller #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\nCall Trace:\n __dump_stack lib/dump_stack.c:79 [inline]\n dump_stack+0x21c/0x280 lib/dump_stack.c:120\n kmsan_report+0xfb/0x1e0 mm/kmsan/kmsan_report.c:118\n kmsan_internal_check_memory+0x202/0x520 mm/kmsan/kmsan.c:402\n kmsan_copy_to_user+0x9c/0xb0 mm/kmsan/kmsan_hooks.c:249\n instrument_copy_to_user include/linux/instrumented.h:121 [inline]\n _copy_to_user+0x1ac/0x270 lib/usercopy.c:33\n copy_to_user include/linux/uaccess.h:209 [inline]\n move_addr_to_user+0x3a2/0x640 net/socket.c:237\n ____s","insertions":5,"deletions":0,"filepaths":{"net/qrtr/qrtr.c":{"insertions":5,"deletions":0}}},"bdabad3e363d825ddf9679dd431cca0b2c30f881":{"author":"Courtney Cavin","email":"courtney.cavin@sonymobile.com","date":"2016-05-06 14:09:08 UTC","message":"net: Add Qualcomm IPC router\n\nAdd an implementation of Qualcomm's IPC router protocol, used to\ncommunicate with service providing remote processors.\n\nSigned-off-by: Courtney Cavin <courtney.cavin@sonymobile.com>\nSigned-off-by: Bjorn Andersson <bjorn.andersson@sonymobile.com>\n[bjorn: Cope with 0 being a valid node id and implement RTM_NEWADDR]\nSigned-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":1198,"deletions":1,"filepaths":{"include/linux/socket.h":{"insertions":3,"deletions":1},"include/uapi/linux/qrtr.h":{"insertions":12,"deletions":0},"net/Kconfig":{"insertions":1,"deletions":0},"net/Makefile":{"insertions":1,"deletions":0},"net/qrtr/Kconfig":{"insertions":24,"deletions":0},"net/qrtr/Makefile":{"insertions":2,"deletions":0},"net/qrtr/qrtr.c":{"insertions":1007,"deletions":0},"net/qrtr/qrtr.h":{"insertions":31,"deletions":0},"net/qrtr/smd.c":{"insertions":117,"deletions":0}}},"f507a9b6e63b9f41b61d199c36ae046d17b5fe4b":{"author":"Bjorn Andersson","email":"bjorn.andersson@linaro.org","date":"2017-10-11 06:45:22 UTC","message":"net: qrtr: Use sk_buff->cb in receive path\n\nRather than parsing the header of incoming messages throughout the\nimplementation do it once when we retrieve the message and store the\nrelevant information in the \"cb\" member of the sk_buff.\n\nThis allows us to, in a later commit, decode version 2 messages into\nthis same structure.\n\nSigned-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":40,"deletions":30,"filepaths":{"net/qrtr/qrtr.c":{"insertions":40,"deletions":30}}},"350a5c4dd2452ea999cc5e1d4a8dbf12de2f97ef":{"author":"Alexei Starovoitov","email":"ast@kernel.org","date":"2021-03-07 22:52:48 UTC","message":"bpf: Dont allow vmlinux BTF to be used in map_create and prog_load.\n\nThe syzbot got FD of vmlinux BTF and passed it into map_create which caused\ncrash in btf_type_id_size() when it tried to access resolved_ids. The vmlinux\nBTF doesn't have 'resolved_ids' and 'resolved_sizes' initialized to save\nmemory. To avoid such issues disallow using vmlinux BTF in prog_load and\nmap_create commands.\n\nFixes: 5329722057d4 (\"bpf: Assign ID to vmlinux BTF and return extra info for BTF in GET_OBJ_INFO\")\nReported-by: syzbot+8bab8ed346746e7540e8@syzkaller.appspotmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Yonghong Song <yhs@fb.com>\nLink: https://lore.kernel.org/bpf/20210307225248.79031-1-alexei.starovoitov@gmail.com","insertions":9,"deletions":0,"filepaths":{"kernel/bpf/syscall.c":{"insertions":5,"deletions":0},"kernel/bpf/verifier.c":{"insertions":4,"deletions":0}}},"a26ca7c982cb576749cbdd01e8ecde4bf010d60a":{"author":"Martin KaFai Lau","email":"kafai@fb.com","date":"2018-04-18 22:56:03 UTC","message":"bpf: btf: Add pretty print support to the basic arraymap\n\nThis patch adds pretty print support to the basic arraymap.\nSupport for other bpf maps can be added later.\n\nThis patch adds new attrs to the BPF_MAP_CREATE command to allow\nspecifying the btf_fd, btf_key_id and btf_value_id.  The\nBPF_MAP_CREATE can then associate the btf to the map if\nthe creating map supports BTF.\n\nA BTF supported map needs to implement two new map ops,\nmap_seq_show_elem() and map_check_btf().  This patch has\nimplemented these new map ops for the basic arraymap.\n\nIt also adds file_operations, bpffs_map_fops, to the pinned\nmap such that the pinned map can be opened and read.\nAfter that, the user has an intuitive way to do\n\"cat bpffs/pathto/a-pinned-map\" instead of getting\nan error.\n\nbpffs_map_fops should not be extended further to support\nother operations.  Other operations (e.g. write/key-lookup...)\nshould be realized by the userspace tools (e.g. bpftool) through\nthe BPF_OBJ_GET_INFO_BY_FD, map's lookup/update i","insertions":254,"deletions":7,"filepaths":{"include/linux/bpf.h":{"insertions":17,"deletions":3},"include/uapi/linux/bpf.h":{"insertions":3,"deletions":0},"kernel/bpf/arraymap.c":{"insertions":50,"deletions":0},"kernel/bpf/inode.c":{"insertions":153,"deletions":3},"kernel/bpf/syscall.c":{"insertions":31,"deletions":1}}},"85d33df357b634649ddbe0a20fd2d0fc5732c3cb":{"author":"Martin KaFai Lau","email":"kafai@fb.com","date":"2020-01-09 00:35:05 UTC","message":"bpf: Introduce BPF_MAP_TYPE_STRUCT_OPS\n\nThe patch introduces BPF_MAP_TYPE_STRUCT_OPS.  The map value\nis a kernel struct with its func ptr implemented in bpf prog.\nThis new map is the interface to register/unregister/introspect\na bpf implemented kernel struct.\n\nThe kernel struct is actually embedded inside another new struct\n(or called the \"value\" struct in the code).  For example,\n\"struct tcp_congestion_ops\" is embbeded in:\nstruct bpf_struct_ops_tcp_congestion_ops {\n\trefcount_t refcnt;\n\tenum bpf_struct_ops_state state;\n\tstruct tcp_congestion_ops data;  /* <-- kernel subsystem struct here */\n}\nThe map value is \"struct bpf_struct_ops_tcp_congestion_ops\".\nThe \"bpftool map dump\" will then be able to show the\nstate (\"inuse\"/\"tobefree\") and the number of subsystem's refcnt (e.g.\nnumber of tcp_sock in the tcp_congestion_ops case).  This \"value\" struct\nis created automatically by a macro.  Having a separate \"value\" struct\nwill also make extending \"struct bpf_struct_ops_XYZ\" easier (e.g. adding\n","insertions":642,"deletions":47,"filepaths":{"arch/x86/net/bpf_jit_comp.c":{"insertions":8,"deletions":10},"include/linux/bpf.h":{"insertions":47,"deletions":2},"include/linux/bpf_types.h":{"insertions":3,"deletions":0},"include/linux/btf.h":{"insertions":13,"deletions":0},"include/uapi/linux/bpf.h":{"insertions":6,"deletions":1},"kernel/bpf/bpf_struct_ops.c":{"insertions":509,"deletions":2},"kernel/bpf/btf.c":{"insertions":9,"deletions":11},"kernel/bpf/map_in_map.c":{"insertions":2,"deletions":1},"kernel/bpf/syscall.c":{"insertions":35,"deletions":17},"kernel/bpf/trampoline.c":{"insertions":5,"deletions":3},"kernel/bpf/verifier.c":{"insertions":5,"deletions":0}}},"b936ca643ade11f265fa10e5fb71c20d9c5243f1":{"author":"Roman Gushchin","email":"guro@fb.com","date":"2019-05-30 01:03:58 UTC","message":"bpf: rework memlock-based memory accounting for maps\n\nIn order to unify the existing memlock charging code with the\nmemcg-based memory accounting, which will be added later, let's\nrework the current scheme.\n\nCurrently the following design is used:\n  1) .alloc() callback optionally checks if the allocation will likely\n     succeed using bpf_map_precharge_memlock()\n  2) .alloc() performs actual allocations\n  3) .alloc() callback calculates map cost and sets map.memory.pages\n  4) map_create() calls bpf_map_init_memlock() which sets map.memory.user\n     and performs actual charging; in case of failure the map is\n     destroyed\n  <map is in use>\n  1) bpf_map_free_deferred() calls bpf_map_release_memlock(), which\n     performs uncharge and releases the user\n  2) .map_free() callback releases the memory\n\nThe scheme can be simplified and made more robust:\n  1) .alloc() calculates map cost and calls bpf_map_charge_init()\n  2) bpf_map_charge_init() sets map.memory.user and performs actual\n    cha","insertions":112,"deletions":88,"filepaths":{"include/linux/bpf.h":{"insertions":4,"deletions":1},"kernel/bpf/arraymap.c":{"insertions":7,"deletions":3},"kernel/bpf/cpumap.c":{"insertions":5,"deletions":3},"kernel/bpf/devmap.c":{"insertions":7,"deletions":6},"kernel/bpf/hashtab.c":{"insertions":6,"deletions":5},"kernel/bpf/local_storage.c":{"insertions":6,"deletions":3},"kernel/bpf/lpm_trie.c":{"insertions":2,"deletions":3},"kernel/bpf/queue_stack_maps.c":{"insertions":6,"deletions":3},"kernel/bpf/reuseport_array.c":{"insertions":6,"deletions":3},"kernel/bpf/stackmap.c":{"insertions":17,"deletions":13},"kernel/bpf/syscall.c":{"insertions":33,"deletions":36},"kernel/bpf/xskmap.c":{"insertions":5,"deletions":4},"net/core/bpf_sk_storage.c":{"insertions":5,"deletions":3},"net/core/sock_map.c":{"insertions":3,"deletions":2}}},"c454a46b5efd8eff8880e88ece2976e60a26bf35":{"author":"Martin KaFai Lau","email":"kafai@fb.com","date":"2018-12-08 00:42:25 UTC","message":"bpf: Add bpf_line_info support\n\nThis patch adds bpf_line_info support.\n\nIt accepts an array of bpf_line_info objects during BPF_PROG_LOAD.\nThe \"line_info\", \"line_info_cnt\" and \"line_info_rec_size\" are added\nto the \"union bpf_attr\".  The \"line_info_rec_size\" makes\nbpf_line_info extensible in the future.\n\nThe new \"check_btf_line()\" ensures the userspace line_info is valid\nfor the kernel to use.\n\nWhen the verifier is translating/patching the bpf_prog (through\n\"bpf_patch_insn_single()\"), the line_infos' insn_off is also\nadjusted by the newly added \"bpf_adj_linfo()\".\n\nIf the bpf_prog is jited, this patch also provides the jited addrs (in\naux->jited_linfo) for the corresponding line_info.insn_off.\n\"bpf_prog_fill_jited_linfo()\" is added to fill the aux->jited_linfo.\nIt is currently called by the x86 jit.  Other jits can also use\n\"bpf_prog_fill_jited_linfo()\" and it will be done in the followup patches.\nIn the future, if it deemed necessary, a particular jit could also provide\nits own \"bpf_prog","insertions":419,"deletions":33,"filepaths":{"arch/x86/net/bpf_jit_comp.c":{"insertions":2,"deletions":0},"include/linux/bpf.h":{"insertions":21,"deletions":0},"include/linux/bpf_verifier.h":{"insertions":1,"deletions":0},"include/linux/btf.h":{"insertions":1,"deletions":0},"include/linux/filter.h":{"insertions":7,"deletions":0},"include/uapi/linux/bpf.h":{"insertions":19,"deletions":0},"kernel/bpf/btf.c":{"insertions":1,"deletions":1},"kernel/bpf/core.c":{"insertions":116,"deletions":2},"kernel/bpf/syscall.c":{"insertions":77,"deletions":6},"kernel/bpf/verifier.c":{"insertions":174,"deletions":24}}},"f60a85cad677c4f9bb4cadd764f1d106c38c7cf8":{"author":"Zqiang","email":"qiang.zhang@windriver.com","date":"2021-03-17 03:09:15 UTC","message":"bpf: Fix umd memory leak in copy_process()\n\nThe syzbot reported a memleak as follows:\n\nBUG: memory leak\nunreferenced object 0xffff888101b41d00 (size 120):\n  comm \"kworker/u4:0\", pid 8, jiffies 4294944270 (age 12.780s)\n  backtrace:\n    [<ffffffff8125dc56>] alloc_pid+0x66/0x560\n    [<ffffffff81226405>] copy_process+0x1465/0x25e0\n    [<ffffffff81227943>] kernel_clone+0xf3/0x670\n    [<ffffffff812281a1>] kernel_thread+0x61/0x80\n    [<ffffffff81253464>] call_usermodehelper_exec_work\n    [<ffffffff81253464>] call_usermodehelper_exec_work+0xc4/0x120\n    [<ffffffff812591c9>] process_one_work+0x2c9/0x600\n    [<ffffffff81259ab9>] worker_thread+0x59/0x5d0\n    [<ffffffff812611c8>] kthread+0x178/0x1b0\n    [<ffffffff8100227f>] ret_from_fork+0x1f/0x30\n\nunreferenced object 0xffff888110ef5c00 (size 232):\n  comm \"kworker/u4:0\", pid 8414, jiffies 4294944270 (age 12.780s)\n  backtrace:\n    [<ffffffff8154a0cf>] kmem_cache_zalloc\n    [<ffffffff8154a0cf>] __alloc_file+0x1f/0xf0\n    [<ffffffff8154a809>] alloc_em","insertions":31,"deletions":10,"filepaths":{"include/linux/usermode_driver.h":{"insertions":1,"deletions":0},"kernel/bpf/preload/bpf_preload_kern.c":{"insertions":15,"deletions":4},"kernel/usermode_driver.c":{"insertions":15,"deletions":6}}},"e2dc9bf3f5275ca372001541e5f26af572976e65":{"author":"Eric W. Biederman","email":"ebiederm@xmission.com","date":"2020-06-25 18:12:59 UTC","message":"umd: Transform fork_usermode_blob into fork_usermode_driver\n\nInstead of loading a binary blob into a temporary file with\nshmem_kernel_file_setup load a binary blob into a temporary tmpfs\nfilesystem.  This means that the blob can be stored in an init section\nand discared, and it means the binary blob will have a filename so can\nbe executed normally.\n\nThe only tricky thing about this code is that in the helper function\nblob_to_mnt __fput_sync is used.  That is because a file can not be\nexecuted if it is still open for write, and the ordinary delayed close\nfor kernel threads does not happen soon enough, which causes the\nfollowing exec to fail.  The function umd_load_blob is not called with\nany locks so this should be safe.\n\nExecuting the blob normally winds up correcting several problems with\nthe user mode driver code discovered by Tetsuo Handa[1].  By passing\nan ordinary filename into the exec, it is no longer necessary to\nfigure out how to turn a O_RDWR file descriptor into a properly\nre","insertions":113,"deletions":33,"filepaths":{"include/linux/usermode_driver.h":{"insertions":5,"deletions":1},"kernel/usermode_driver.c":{"insertions":97,"deletions":29},"net/bpfilter/bpfilter_kern.c":{"insertions":11,"deletions":3}}},"884c5e683b67dbc52892e24c29eed864f330ec08":{"author":"Eric W. Biederman","email":"ebiederm@xmission.com","date":"2020-06-26 17:23:00 UTC","message":"umh: Separate the user mode driver and the user mode helper support\n\nThis makes it clear which code is part of the core user mode\nhelper support and which code is needed to implement user mode\ndrivers.\n\nThis makes the kernel smaller for everyone who does not use a usermode\ndriver.\n\nv1: https://lkml.kernel.org/r/87tuyyf0ln.fsf_-_@x220.int.ebiederm.org\nv2: https://lkml.kernel.org/r/87imf963s6.fsf_-_@x220.int.ebiederm.org\nLink: https://lkml.kernel.org/r/20200702164140.4468-5-ebiederm@xmission.com\nReviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nTested-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>","insertions":179,"deletions":158,"filepaths":{"include/linux/bpfilter.h":{"insertions":1,"deletions":1},"include/linux/sched.h":{"insertions":0,"deletions":8},"include/linux/umh.h":{"insertions":0,"deletions":10},"include/linux/usermode_driver.h":{"insertions":30,"deletions":0},"kernel/Makefile":{"insertions":1,"deletions":0},"kernel/exit.c":{"insertions":1,"deletions":0},"kernel/umh.c":{"insertions":0,"deletions":139},"kernel/usermode_driver.c":{"insertions":146,"deletions":0}}},"d71fa5c9763c24dd997a2fa4feb7a13a95bab42c":{"author":"Alexei Starovoitov","email":"ast@kernel.org","date":"2020-08-19 04:27:58 UTC","message":"bpf: Add kernel module with user mode driver that populates bpffs.\n\nAdd kernel module with user mode driver that populates bpffs with\nBPF iterators.\n\n$ mount bpffs /my/bpffs/ -t bpf\n$ ls -la /my/bpffs/\ntotal 4\ndrwxrwxrwt  2 root root    0 Jul  2 00:27 .\ndrwxr-xr-x 19 root root 4096 Jul  2 00:09 ..\n-rw-------  1 root root    0 Jul  2 00:27 maps.debug\n-rw-------  1 root root    0 Jul  2 00:27 progs.debug\n\nThe user mode driver will load BPF Type Formats, create BPF maps, populate BPF\nmaps, load two BPF programs, attach them to BPF iterators, and finally send two\nbpf_link IDs back to the kernel.\nThe kernel will pin two bpf_links into newly mounted bpffs instance under\nnames \"progs.debug\" and \"maps.debug\". These two files become human readable.\n\n$ cat /my/bpffs/progs.debug\n  id name            attached\n  11 dump_bpf_map    bpf_iter_bpf_map\n  12 dump_bpf_prog   bpf_iter_bpf_prog\n  27 test_pkt_access\n  32 test_main       test_pkt_access test_pkt_access\n  33 test_subprog1   test_pkt_access_subp","insertions":390,"deletions":6,"filepaths":{"init/Kconfig":{"insertions":2,"deletions":0},"kernel/Makefile":{"insertions":1,"deletions":1},"kernel/bpf/Makefile":{"insertions":1,"deletions":0},"kernel/bpf/inode.c":{"insertions":113,"deletions":3},"kernel/bpf/preload/Kconfig":{"insertions":23,"deletions":0},"kernel/bpf/preload/Makefile":{"insertions":23,"deletions":0},"kernel/bpf/preload/bpf_preload.h":{"insertions":16,"deletions":0},"kernel/bpf/preload/bpf_preload_kern.c":{"insertions":91,"deletions":0},"kernel/bpf/preload/bpf_preload_umd_blob.S":{"insertions":7,"deletions":0},"kernel/bpf/preload/iterators/bpf_preload_common.h":{"insertions":13,"deletions":0},"kernel/bpf/preload/iterators/iterators.c":{"insertions":94,"deletions":0},"net/bpfilter/Kconfig":{"insertions":1,"deletions":0},"tools/lib/bpf/Makefile":{"insertions":5,"deletions":2}}},"74be2d3b80af1bb264c3b9905b52c15efc03c0fe":{"author":"Eric W. Biederman","email":"ebiederm@xmission.com","date":"2020-06-26 16:16:06 UTC","message":"umd: For clarity rename umh_info umd_info\n\nThis structure is only used for user mode drivers so change\nthe prefix from umh to umd to make that clear.\n\nv1: https://lkml.kernel.org/r/87o8p6f0kw.fsf_-_@x220.int.ebiederm.org\nv2: https://lkml.kernel.org/r/878sg563po.fsf_-_@x220.int.ebiederm.org\nLink: https://lkml.kernel.org/r/20200702164140.4468-6-ebiederm@xmission.com\nReviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nTested-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>","insertions":15,"deletions":15,"filepaths":{"include/linux/bpfilter.h":{"insertions":1,"deletions":1},"include/linux/usermode_driver.h":{"insertions":3,"deletions":3},"kernel/usermode_driver.c":{"insertions":10,"deletions":10},"net/ipv4/bpfilter/sockopt.c":{"insertions":1,"deletions":1}}},"1c340ead18ee4b4a84357abdef6d4f39ee08328b":{"author":"Eric W. Biederman","email":"ebiederm@xmission.com","date":"2020-06-25 21:48:26 UTC","message":"umd: Track user space drivers with struct pid\n\nUse struct pid instead of user space pid values that are prone to wrap\naraound.\n\nIn addition track the entire thread group instead of just the first\nthread that is started by exec.  There are no multi-threaded user mode\ndrivers today but there is nothing preclucing user drivers from being\nmulti-threaded, so it is just a good idea to track the entire process.\n\nTake a reference count on the tgid's in question to make it possible\nto remove exit_umh in a future change.\n\nAs a struct pid is available directly use kill_pid_info.\n\nThe prior process signalling code was iffy in using a userspace pid\nknown to be in the initial pid namespace and then looking up it's task\nin whatever the current pid namespace is.  It worked only because\nkernel threads always run in the initial pid namespace.\n\nAs the tgid is now refcounted verify the tgid is NULL at the start of\nfork_usermode_driver to avoid the possibility of silent pid leaks.\n\nv1: https://lkml.kernel.o","insertions":20,"deletions":16,"filepaths":{"include/linux/usermode_driver.h":{"insertions":1,"deletions":1},"kernel/exit.c":{"insertions":2,"deletions":1},"kernel/usermode_driver.c":{"insertions":10,"deletions":5},"net/bpfilter/bpfilter_kern.c":{"insertions":5,"deletions":8},"net/ipv4/bpfilter/sockopt.c":{"insertions":2,"deletions":1}}},"175e476b8cdf2a4de7432583b49c871345e4f8a1":{"author":"Mark Tomlinson","email":"mark.tomlinson@alliedtelesis.co.nz","date":"2021-03-08 01:24:13 UTC","message":"netfilter: x_tables: Use correct memory barriers.\n\nWhen a new table value was assigned, it was followed by a write memory\nbarrier. This ensured that all writes before this point would complete\nbefore any writes after this point. However, to determine whether the\nrules are unused, the sequence counter is read. To ensure that all\nwrites have been done before these reads, a full memory barrier is\nneeded, not just a write memory barrier. The same argument applies when\nincrementing the counter, before the rules are read.\n\nChanging to using smp_mb() instead of smp_wmb() fixes the kernel panic\nreported in cc00bcaa5899 (which is still present), while still\nmaintaining the same speed of replacing tables.\n\nThe smb_mb() barriers potentially slow the packet path, however testing\nhas shown no measurable change in performance on a 4-core MIPS64\nplatform.\n\nFixes: 7f5c6d4f665b (\"netfilter: get rid of atomic ops in fast path\")\nSigned-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>\nSigned-off","insertions":2,"deletions":2,"filepaths":{"include/linux/netfilter/x_tables.h":{"insertions":1,"deletions":1},"net/netfilter/x_tables.c":{"insertions":1,"deletions":1}}},"7f5c6d4f665bb57a19a34ce1fb16cc708c04f219":{"author":"Eric Dumazet","email":"eric.dumazet@gmail.com","date":"2011-04-04 15:04:03 UTC","message":"netfilter: get rid of atomic ops in fast path\n\nWe currently use a percpu spinlock to 'protect' rule bytes/packets\ncounters, after various attempts to use RCU instead.\n\nLately we added a seqlock so that get_counters() can run without\nblocking BH or 'writers'. But we really only need the seqcount in it.\n\nSpinlock itself is only locked by the current/owner cpu, so we can\nremove it completely.\n\nThis cleanups api, using correct 'writer' vs 'reader' semantic.\n\nAt replace time, the get_counters() call makes sure all cpus are done\nusing the old table.\n\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nCc: Jan Engelhardt <jengelh@medozas.de>\nSigned-off-by: Patrick McHardy <kaber@trash.net>","insertions":80,"deletions":90,"filepaths":{"include/linux/netfilter/x_tables.h":{"insertions":42,"deletions":54},"net/ipv4/netfilter/arp_tables.c":{"insertions":11,"deletions":7},"net/ipv4/netfilter/ip_tables.c":{"insertions":12,"deletions":16},"net/ipv6/netfilter/ip6_tables.c":{"insertions":12,"deletions":7},"net/netfilter/x_tables.c":{"insertions":3,"deletions":6}}},"d3d40f237480abf3268956daf18cdc56edd32834":{"author":"Mark Tomlinson","email":"mark.tomlinson@alliedtelesis.co.nz","date":"2021-03-08 01:24:12 UTC","message":"Revert \"netfilter: x_tables: Switch synchronization to RCU\"\n\nThis reverts commit cc00bcaa589914096edef7fb87ca5cee4a166b5c.\n\nThis (and the preceding) patch basically re-implemented the RCU\nmechanisms of patch 784544739a25. That patch was replaced because of the\nperformance problems that it created when replacing tables. Now, we have\nthe same issue: the call to synchronize_rcu() makes replacing tables\nslower by as much as an order of magnitude.\n\nPrior to using RCU a script calling \"iptables\" approx. 200 times was\ntaking 1.16s. With RCU this increased to 11.59s.\n\nRevert these patches and fix the issue in a different way.\n\nSigned-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":56,"deletions":40,"filepaths":{"include/linux/netfilter/x_tables.h":{"insertions":1,"deletions":4},"net/ipv4/netfilter/arp_tables.c":{"insertions":7,"deletions":7},"net/ipv4/netfilter/ip_tables.c":{"insertions":7,"deletions":7},"net/ipv6/netfilter/ip6_tables.c":{"insertions":7,"deletions":7},"net/netfilter/x_tables.c":{"insertions":34,"deletions":15}}},"a58d9166a756a0f4a6618e4f593232593d6df134":{"author":"Paolo Bonzini","email":"pbonzini@redhat.com","date":"2021-03-31 10:24:43 UTC","message":"KVM: SVM: load control fields from VMCB12 before checking them\n\nAvoid races between check and use of the nested VMCB controls.  This\nfor example ensures that the VMRUN intercept is always reflected to the\nnested hypervisor, instead of being processed by the host.  Without this\npatch, it is possible to end up with svm->nested.hsave pointing to\nthe MSR permission bitmap for nested guests.\n\nThis bug is CVE-2021-29657.\n\nReported-by: Felix Wilhelm <fwilhelm@google.com>\nCc: stable@vger.kernel.org\nFixes: 2fcf4876ada (\"KVM: nSVM: implement on demand allocation of the nested state\")\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":6,"deletions":4,"filepaths":{"arch/x86/kvm/svm/nested.c":{"insertions":6,"deletions":4}}},"0dd16b5b0c9bd62fbff3ea375cdd5125e19317c6":{"author":"Maxim Levitsky","email":"mlevitsk@redhat.com","date":"2020-08-27 17:11:39 UTC","message":"KVM: nSVM: rename nested vmcb to vmcb12\n\nThis is to be more consistient with VMX, and to support\nupcoming addition of vmcb02\n\nHopefully no functional changes.\n\nSigned-off-by: Maxim Levitsky <mlevitsk@redhat.com>\nMessage-Id: <20200827171145.374620-3-mlevitsk@redhat.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":117,"deletions":119,"filepaths":{"arch/x86/kvm/svm/nested.c":{"insertions":111,"deletions":113},"arch/x86/kvm/svm/svm.c":{"insertions":5,"deletions":5},"arch/x86/kvm/svm/svm.h":{"insertions":1,"deletions":1}}},"fb18802a338b36f675a388fc03d2aa504a0d0899":{"author":"Sakari Ailus","email":"sakari.ailus@linux.intel.com","date":"2020-12-19 22:29:58 UTC","message":"media: v4l: ioctl: Fix memory leak in video_usercopy\n\nWhen an IOCTL with argument size larger than 128 that also used array\narguments were handled, two memory allocations were made but alas, only\nthe latter one of them was released. This happened because there was only\na single local variable to hold such a temporary allocation.\n\nFix this by adding separate variables to hold the pointers to the\ntemporary allocations.\n\nReported-by: Arnd Bergmann <arnd@kernel.org>\nReported-by: syzbot+1115e79c8df6472c612b@syzkaller.appspotmail.com\nFixes: d14e6d76ebf7 (\"[media] v4l: Add multi-planar ioctl handling code\")\nCc: stable@vger.kernel.org\nSigned-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>\nAcked-by: Arnd Bergmann <arnd@arndb.de>\nAcked-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>\nReviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>\nSigned-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>","insertions":14,"deletions":18,"filepaths":{"drivers/media/v4l2-core/v4l2-ioctl.c":{"insertions":14,"deletions":18}}},"8dbcc3fa387c16abfc88a628cf528c439c91b332":{"author":"Arnd Bergmann","email":"arnd@arndb.de","date":"2020-10-30 16:55:22 UTC","message":"media: v4l2: prepare compat-ioctl rework\n\nThe v4l2-compat-ioctl32() currently takes an extra round trip through user\nspace pointers when converting the data structure formats. In particular,\nthis involves using the compat_alloc_user_space() and copy_in_user()\nhelpers that often lead to worse compat handlers compared to using\nin_compat_syscall() checks when copying the data.\n\nThe native implementation already gained a simpler method to deal with\nthe conversion for the time32 conversion.  Hook into the same places to\nprovide a location for reading and writing user space data from inside\nof the generic video_usercopy() helper.\n\nHans Verkuil rewrote the video_get_user() function here to simplify\nthe zeroing of the extra input fields and fixed a couple of bugs in\nthe original implementation.\n\n[hverkuil: fix: CHECK: Please don't use multiple blank lines]\n\nCo-developed-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>\nSigned-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>\nSigned-off-by: Arnd Bergman","insertions":155,"deletions":67,"filepaths":{"drivers/media/v4l2-core/v4l2-compat-ioctl32.c":{"insertions":53,"deletions":0},"drivers/media/v4l2-core/v4l2-ioctl.c":{"insertions":92,"deletions":67},"include/media/v4l2-ioctl.h":{"insertions":10,"deletions":0}}},"d14e6d76ebf740fd0d0bd296933993a555938896":{"author":"Pawel Osciak","email":"p.osciak@samsung.com","date":"2010-12-23 07:15:27 UTC","message":"[media] v4l: Add multi-planar ioctl handling code\n\nAdd multi-planar API core ioctl handling and conversion functions.\n\n[mchehab@redhat.com: CondingStyle fixup]\nSigned-off-by: Pawel Osciak <p.osciak@samsung.com>\nSigned-off-by: Kyungmin Park <kyungmin.park@samsung.com>\nReviewed-by: Marek Szyprowski <m.szyprowski@samsung.com>\nSigned-off-by: Marek Szyprowski <m.szyprowski@samsung.com>\nReviewed-by: Hans Verkuil <hverkuil@xs4all.nl>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>","insertions":425,"deletions":44,"filepaths":{"drivers/media/video/v4l2-ioctl.c":{"insertions":409,"deletions":44},"include/media/v4l2-ioctl.h":{"insertions":16,"deletions":0}}},"35ea11ff84719b1bfab2909903a9640a86552fd1":{"author":"Hans Verkuil","email":"hverkuil@xs4all.nl","date":"2008-07-20 11:12:02 UTC","message":"V4L/DVB (8430): videodev: move some functions from v4l2-dev.h to v4l2-common.h or v4l2-ioctl.h\n\nThe functions in a header should not belong to another module. The prio functions\nbelong to v4l2-common.c, so move them to v4l2-common.h.\n\nThe ioctl functions belong to v4l2-ioctl.c, so create a new v4l2-ioctl.h header\nand move those functions to it.\n\nSigned-off-by: Hans Verkuil <hverkuil@xs4all.nl>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>","insertions":1999,"deletions":45,"filepaths":{"drivers/media/radio/dsbr100.c":{"insertions":1,"deletions":0},"drivers/media/radio/miropcm20-radio.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-aimslab.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-aztech.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-cadet.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-gemtek-pci.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-gemtek.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-maestro.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-maxiradio.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-rtrack2.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-sf16fmi.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-sf16fmr2.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-si470x.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-terratec.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-trust.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-typhoon.c":{"insertions":1,"deletions":0},"drivers/media/radio/radio-zoltrix.c":{"insertions":1,"deletions":0},"drivers/media/video/bt8xx/bttv-driver.c":{"insertions":1,"deletions":0},"drivers/media/video/bt8xx/bttv-risc.c":{"insertions":1,"deletions":0},"drivers/media/video/bt8xx/bttv-vbi.c":{"insertions":1,"deletions":0},"drivers/media/video/bw-qcam.c":{"insertions":1,"deletions":0},"drivers/media/video/c-qcam.c":{"insertions":1,"deletions":0},"drivers/media/video/cafe_ccic.c":{"insertions":1,"deletions":0},"drivers/media/video/cpia.h":{"insertions":1,"deletions":0},"drivers/media/video/cpia2/cpia2_v4l.c":{"insertions":1,"deletions":0},"drivers/media/video/cx18/cx18-driver.h":{"insertions":1,"deletions":0},"drivers/media/video/cx23885/cx23885-417.c":{"insertions":1,"deletions":0},"drivers/media/video/cx23885/cx23885-video.c":{"insertions":1,"deletions":0},"drivers/media/video/cx88/cx88-blackbird.c":{"insertions":1,"deletions":0},"drivers/media/video/cx88/cx88-core.c":{"insertions":1,"deletions":0},"drivers/media/video/cx88/cx88-video.c":{"insertions":1,"deletions":0},"drivers/media/video/em28xx/em28xx-video.c":{"insertions":1,"deletions":0},"drivers/media/video/et61x251/et61x251_core.c":{"insertions":1,"deletions":0},"drivers/media/video/gspca/gspca.c":{"insertions":1,"deletions":0},"drivers/media/video/ivtv/ivtv-driver.h":{"insertions":1,"deletions":0},"drivers/media/video/meye.c":{"insertions":1,"deletions":0},"drivers/media/video/msp3400-driver.c":{"insertions":1,"deletions":0},"drivers/media/video/ov511.h":{"insertions":1,"deletions":0},"drivers/media/video/pms.c":{"insertions":1,"deletions":0},"drivers/media/video/pvrusb2/pvrusb2-v4l2.c":{"insertions":1,"deletions":0},"drivers/media/video/pwc/pwc.h":{"insertions":1,"deletions":0},"drivers/media/video/s2255drv.c":{"insertions":1,"deletions":0},"drivers/media/video/saa5246a.c":{"insertions":1,"deletions":0},"drivers/media/video/saa5249.c":{"insertions":1,"deletions":0},"drivers/media/video/saa7134/saa7134.h":{"insertions":1,"deletions":0},"drivers/media/video/se401.h":{"insertions":1,"deletions":0},"drivers/media/video/sn9c102/sn9c102.h":{"insertions":1,"deletions":0},"drivers/media/video/soc_camera.c":{"insertions":1,"deletions":0},"drivers/media/video/stk-webcam.c":{"insertions":1,"deletions":0},"drivers/media/video/stv680.c":{"insertions":1,"deletions":0},"drivers/media/video/tda7432.c":{"insertions":1,"deletions":0},"drivers/media/video/tuner-core.c":{"insertions":1,"deletions":0},"drivers/media/video/usbvideo/usbvideo.h":{"insertions":1,"deletions":0},"drivers/media/video/usbvision/usbvision-video.c":{"insertions":1,"deletions":0},"drivers/media/video/uvc/uvc_v4l2.c":{"insertions":1,"deletions":0},"drivers/media/video/v4l1-compat.c":{"insertions":1,"deletions":0},"drivers/media/video/v4l2-ioctl.c":{"insertions":1865,"deletions":0},"drivers/media/video/vivi.c":{"insertions":1,"deletions":0},"drivers/media/video/w9966.c":{"insertions":1,"deletions":0},"drivers/media/video/zc0301/zc0301.h":{"insertions":1,"deletions":0},"drivers/media/video/zoran_driver.c":{"insertions":1,"deletions":0},"drivers/media/video/zr364xx.c":{"insertions":1,"deletions":0},"include/media/saa7146_vv.h":{"insertions":1,"deletions":0},"include/media/v4l2-common.h":{"insertions":15,"deletions":0},"include/media/v4l2-dev.h":{"insertions":0,"deletions":45},"include/media/v4l2-ioctl.h":{"insertions":57,"deletions":0}}},"758d90e161382c134b7cbd5f724df4de02f3c67e":{"author":"Tomasz Figa","email":"tfiga@chromium.org","date":"2017-06-19 03:53:43 UTC","message":"[media] v4l2-core: Use kvmalloc() for potentially big allocations\n\nThere are multiple places where arrays or otherwise variable sized\nbuffer are allocated through V4L2 core code, including things like\ncontrols, memory pages, staging buffers for ioctls and so on. Such\nallocations can potentially require an order > 0 allocation from the\npage allocator, which is not guaranteed to be fulfilled and is likely to\nfail on a system with severe memory fragmentation (e.g. a system with\nvery long uptime).\n\nSince the memory being allocated is intended to be used by the CPU\nexclusively, we can consider using vmalloc() as a fallback and this is\nexactly what the recently merged kvmalloc() helpers do. A kmalloc() call\nis still attempted, even for order > 0 allocations, but it is done\nwith __GFP_NORETRY and __GFP_NOWARN, with expectation of failing if\nrequested memory is not available instantly. Only then the vmalloc()\nfallback is used. This should give us fast and more reliable allocations\neven on syste","insertions":35,"deletions":27,"filepaths":{"drivers/media/v4l2-core/v4l2-async.c":{"insertions":3,"deletions":2},"drivers/media/v4l2-core/v4l2-ctrls.c":{"insertions":14,"deletions":12},"drivers/media/v4l2-core/v4l2-event.c":{"insertions":5,"deletions":3},"drivers/media/v4l2-core/v4l2-ioctl.c":{"insertions":4,"deletions":3},"drivers/media/v4l2-core/v4l2-subdev.c":{"insertions":5,"deletions":3},"drivers/media/v4l2-core/videobuf2-dma-sg.c":{"insertions":4,"deletions":4}}},"919f4ebc598701670e80e31573a58f1f2d2bf918":{"author":"Wanpeng Li","email":"wanpengli@tencent.com","date":"2021-02-26 07:59:59 UTC","message":"KVM: x86: hyper-v: Fix Hyper-V context null-ptr-deref\n\nReported by syzkaller:\n\n    KASAN: null-ptr-deref in range [0x0000000000000140-0x0000000000000147]\n    CPU: 1 PID: 8370 Comm: syz-executor859 Not tainted 5.11.0-syzkaller #0\n    RIP: 0010:synic_get arch/x86/kvm/hyperv.c:165 [inline]\n    RIP: 0010:kvm_hv_set_sint_gsi arch/x86/kvm/hyperv.c:475 [inline]\n    RIP: 0010:kvm_hv_irq_routing_update+0x230/0x460 arch/x86/kvm/hyperv.c:498\n    Call Trace:\n     kvm_set_irq_routing+0x69b/0x940 arch/x86/kvm/../../../virt/kvm/irqchip.c:223\n     kvm_vm_ioctl+0x12d0/0x2800 arch/x86/kvm/../../../virt/kvm/kvm_main.c:3959\n     vfs_ioctl fs/ioctl.c:48 [inline]\n     __do_sys_ioctl fs/ioctl.c:753 [inline]\n     __se_sys_ioctl fs/ioctl.c:739 [inline]\n     __x64_sys_ioctl+0x193/0x200 fs/ioctl.c:739\n     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46\n     entry_SYSCALL_64_after_hwframe+0x44/0xae\n\nHyper-V context is lazily allocated until Hyper-V specific MSRs are accessed\nor SynIC is enabled. However, the s","insertions":1,"deletions":1,"filepaths":{"arch/x86/kvm/hyperv.c":{"insertions":1,"deletions":1}}},"5c919412fe61c35947816fdbd5f7bd09fe0dd073":{"author":"Andrey Smetanin","email":"asmetanin@virtuozzo.com","date":"2015-11-10 12:36:34 UTC","message":"kvm/x86: Hyper-V synthetic interrupt controller\n\nSynIC (synthetic interrupt controller) is a lapic extension,\nwhich is controlled via MSRs and maintains for each vCPU\n - 16 synthetic interrupt \"lines\" (SINT's); each can be configured to\n   trigger a specific interrupt vector optionally with auto-EOI\n   semantics\n - a message page in the guest memory with 16 256-byte per-SINT message\n   slots\n - an event flag page in the guest memory with 16 2048-bit per-SINT\n   event flag areas\n\nThe host triggers a SINT whenever it delivers a new message to the\ncorresponding slot or flips an event flag bit in the corresponding area.\nThe guest informs the host that it can try delivering a message by\nexplicitly asserting EOI in lapic or writing to End-Of-Message (EOM)\nMSR.\n\nThe userspace (qemu) triggers interrupts and receives EOM notifications\nvia irqfd with resampler; for that, a GSI is allocated for each\nconfigured SINT, and irq_routing api is extended to support GSI-SINT\nmapping.\n\nChanges v4:\n* added ","insertions":467,"deletions":7,"filepaths":{"Documentation/virtual/kvm/api.txt":{"insertions":19,"deletions":0},"arch/x86/include/asm/kvm_host.h":{"insertions":15,"deletions":0},"arch/x86/kvm/hyperv.c":{"insertions":315,"deletions":0},"arch/x86/kvm/hyperv.h":{"insertions":23,"deletions":0},"arch/x86/kvm/irq_comm.c":{"insertions":34,"deletions":0},"arch/x86/kvm/lapic.c":{"insertions":10,"deletions":5},"arch/x86/kvm/lapic.h":{"insertions":5,"deletions":0},"arch/x86/kvm/x86.c":{"insertions":32,"deletions":2},"include/linux/kvm_host.h":{"insertions":6,"deletions":0},"include/uapi/linux/kvm.h":{"insertions":8,"deletions":0}}},"10bf4e83167cc68595b85fd73bb91e8f2c086e36":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-04-23 13:59:55 UTC","message":"bpf: Fix propagation of 32 bit unsigned bounds from 64 bit bounds\n\nSimilarly as b02709587ea3 (\"bpf: Fix propagation of 32-bit signed bounds\nfrom 64-bit bounds.\"), we also need to fix the propagation of 32 bit\nunsigned bounds from 64 bit counterparts. That is, really only set the\nu32_{min,max}_value when /both/ {umin,umax}_value safely fit in 32 bit\nspace. For example, the register with a umin_value == 1 does /not/ imply\nthat u32_min_value is also equal to 1, since umax_value could be much\nlarger than 32 bit subregister can hold, and thus u32_min_value is in\nthe interval [0,1] instead.\n\nBefore fix, invalid tracking result of R2_w=inv1:\n\n  [...]\n  5: R0_w=inv1337 R1=ctx(id=0,off=0,imm=0) R2_w=inv(id=0) R10=fp0\n  5: (35) if r2 >= 0x1 goto pc+1\n  [...] // goto path\n  7: R0=inv1337 R1=ctx(id=0,off=0,imm=0) R2=inv(id=0,umin_value=1) R10=fp0\n  7: (b6) if w2 <= 0x1 goto pc+1\n  [...] // goto path\n  9: R0=inv1337 R1=ctx(id=0,off=0,imm=0) R2=inv(id=0,smin_value=-9223372036854775807,smax_value=9223","insertions":4,"deletions":6,"filepaths":{"kernel/bpf/verifier.c":{"insertions":3,"deletions":5},"tools/testing/selftests/bpf/verifier/array_access.c":{"insertions":1,"deletions":1}}},"40f2fbd5a5e9c6d0799632fcba174a7b45c471da":{"author":"Jakub Kicinski","email":"jakub.kicinski@netronome.com","date":"2019-01-25 23:24:43 UTC","message":"selftests: bpf: break up test_verifier\n\nBreak up the first 10 kLoC of test verifier test cases\nout into smaller files.  Looks like git line counting\ngets a little flismy above 16 bit integers, so we need\ntwo commits to break up test_verifier.\n\nSigned-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>\nAcked-by: Jiong Wang <jiong.wang@netronome.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>","insertions":9902,"deletions":10136,"filepaths":{"tools/testing/selftests/bpf/test_verifier.c":{"insertions":0,"deletions":10136},"tools/testing/selftests/bpf/verifier/and.c":{"insertions":50,"deletions":0},"tools/testing/selftests/bpf/verifier/array_access.c":{"insertions":219,"deletions":0},"tools/testing/selftests/bpf/verifier/basic.c":{"insertions":23,"deletions":0},"tools/testing/selftests/bpf/verifier/basic_call.c":{"insertions":50,"deletions":0},"tools/testing/selftests/bpf/verifier/basic_instr.c":{"insertions":92,"deletions":0},"tools/testing/selftests/bpf/verifier/basic_stack.c":{"insertions":64,"deletions":0},"tools/testing/selftests/bpf/verifier/basic_stx_ldx.c":{"insertions":45,"deletions":0},"tools/testing/selftests/bpf/verifier/bounds.c":{"insertions":508,"deletions":0},"tools/testing/selftests/bpf/verifier/bounds_mix_sign_unsign.c":{"insertions":406,"deletions":0},"tools/testing/selftests/bpf/verifier/cfg.c":{"insertions":70,"deletions":0},"tools/testing/selftests/bpf/verifier/cgroup_skb.c":{"insertions":197,"deletions":0},"tools/testing/selftests/bpf/verifier/cgroup_storage.c":{"insertions":220,"deletions":0},"tools/testing/selftests/bpf/verifier/const_or.c":{"insertions":60,"deletions":0},"tools/testing/selftests/bpf/verifier/ctx.c":{"insertions":23,"deletions":0},"tools/testing/selftests/bpf/verifier/ctx_sk_msg.c":{"insertions":180,"deletions":0},"tools/testing/selftests/bpf/verifier/ctx_skb.c":{"insertions":1001,"deletions":0},"tools/testing/selftests/bpf/verifier/direct_packet_access.c":{"insertions":619,"deletions":0},"tools/testing/selftests/bpf/verifier/direct_stack_access_wraparound.c":{"insertions":40,"deletions":0},"tools/testing/selftests/bpf/verifier/div0.c":{"insertions":184,"deletions":0},"tools/testing/selftests/bpf/verifier/div_overflow.c":{"insertions":104,"deletions":0},"tools/testing/selftests/bpf/verifier/helper_access_var_len.c":{"insertions":614,"deletions":0},"tools/testing/selftests/bpf/verifier/helper_packet_access.c":{"insertions":460,"deletions":0},"tools/testing/selftests/bpf/verifier/helper_value_access.c":{"insertions":953,"deletions":0},"tools/testing/selftests/bpf/verifier/jump.c":{"insertions":180,"deletions":0},"tools/testing/selftests/bpf/verifier/junk_insn.c":{"insertions":45,"deletions":0},"tools/testing/selftests/bpf/verifier/ld_abs.c":{"insertions":95,"deletions":0},"tools/testing/selftests/bpf/verifier/ld_imm64.c":{"insertions":141,"deletions":0},"tools/testing/selftests/bpf/verifier/ld_ind.c":{"insertions":72,"deletions":0},"tools/testing/selftests/bpf/verifier/leak_ptr.c":{"insertions":67,"deletions":0},"tools/testing/selftests/bpf/verifier/lwt.c":{"insertions":189,"deletions":0},"tools/testing/selftests/bpf/verifier/map_in_map.c":{"insertions":62,"deletions":0},"tools/testing/selftests/bpf/verifier/map_ret_val.c":{"insertions":65,"deletions":0},"tools/testing/selftests/bpf/verifier/perf_event_sample_period.c":{"insertions":59,"deletions":0},"tools/testing/selftests/bpf/verifier/prevent_map_lookup.c":{"insertions":74,"deletions":0},"tools/testing/selftests/bpf/verifier/raw_stack.c":{"insertions":305,"deletions":0},"tools/testing/selftests/bpf/verifier/runtime_jit.c":{"insertions":80,"deletions":0},"tools/testing/selftests/bpf/verifier/search_pruning.c":{"insertions":83,"deletions":0},"tools/testing/selftests/bpf/verifier/spill_fill.c":{"insertions":75,"deletions":0},"tools/testing/selftests/bpf/verifier/stack_ptr.c":{"insertions":317,"deletions":0},"tools/testing/selftests/bpf/verifier/uninit.c":{"insertions":39,"deletions":0},"tools/testing/selftests/bpf/verifier/unpriv.c":{"insertions":521,"deletions":0},"tools/testing/selftests/bpf/verifier/value.c":{"insertions":104,"deletions":0},"tools/testing/selftests/bpf/verifier/value_adj_spill.c":{"insertions":43,"deletions":0},"tools/testing/selftests/bpf/verifier/value_illegal_alu.c":{"insertions":94,"deletions":0},"tools/testing/selftests/bpf/verifier/value_or_null.c":{"insertions":152,"deletions":0},"tools/testing/selftests/bpf/verifier/value_ptr_arith.c":{"insertions":792,"deletions":0},"tools/testing/selftests/bpf/verifier/var_off.c":{"insertions":66,"deletions":0}}},"51b2ee7d006a736a9126e8111d1f24e4fd0afaa6":{"author":"J. Bruce Fields","email":"bfields@redhat.com","date":"2021-01-11 21:01:29 UTC","message":"nfsd4: readdirplus shouldn't return parent of export\n\nIf you export a subdirectory of a filesystem, a READDIRPLUS on the root\nof that export will return the filehandle of the parent with the \"..\"\nentry.\n\nThe filehandle is optional, so let's just not return the filehandle for\n\"..\" if we're at the root of an export.\n\nNote that once the client learns one filehandle outside of the export,\nthey can trivially access the rest of the export using further lookups.\n\nHowever, it is also not very difficult to guess filehandles outside of\nthe export.  So exporting a subdirectory of a filesystem should\nconsidered equivalent to providing access to the entire filesystem.  To\navoid confusion, we recommend only exporting entire filesystems.\n\nReported-by: Youjipeng <wangzhibei1999@gmail.com>\nSigned-off-by: J. Bruce Fields <bfields@redhat.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Chuck Lever <chuck.lever@oracle.com>","insertions":6,"deletions":1,"filepaths":{"fs/nfsd/nfs3xdr.c":{"insertions":6,"deletions":1}}},"efe39651f08813180f37dc508d950fc7d92b29a8":{"author":"Al Viro","email":"viro@zeniv.linux.org.uk","date":"2012-04-13 04:32:14 UTC","message":"nfsd: fix compose_entry_fh() failure exits\n\nRestore the original logics (\"fail on mountpoints, negatives and in\ncase of fh_compose() failures\").  Since commit 8177e (nfsd: clean up\nreaddirplus encoding) that got broken -\n\trv = fh_compose(fhp, exp, dchild, &cd->fh);\n\tif (rv)\n\t       goto out;\n\tif (!dchild->d_inode)\n\t\tgoto out;\n\trv = 0;\nout:\nis equivalent to\n\trv = fh_compose(fhp, exp, dchild, &cd->fh);\nout:\nand the second check has no effect whatsoever...\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>","insertions":8,"deletions":14,"filepaths":{"fs/nfsd/nfs3xdr.c":{"insertions":8,"deletions":14}}},"801c6058d14a82179a7ee17a4b532cac6fad067f":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-04-29 15:19:37 UTC","message":"bpf: Fix leakage of uninitialized bpf stack under speculation\n\nThe current implemented mechanisms to mitigate data disclosure under\nspeculation mainly address stack and map value oob access from the\nspeculative domain. However, Piotr discovered that uninitialized BPF\nstack is not protected yet, and thus old data from the kernel stack,\npotentially including addresses of kernel structures, could still be\nextracted from that 512 bytes large window. The BPF stack is special\ncompared to map values since it's not zero initialized for every\nprogram invocation, whereas map values /are/ zero initialized upon\ntheir initial allocation and thus cannot leak any prior data in either\ndomain. In the non-speculative domain, the verifier ensures that every\nstack slot read must have a prior stack slot write by the BPF program\nto avoid such data leaking issue.\n\nHowever, this is not enough: for example, when the pointer arithmetic\noperation moves the stack pointer from the last valid stack offset to\nthe fir","insertions":20,"deletions":12,"filepaths":{"include/linux/bpf_verifier.h":{"insertions":3,"deletions":2},"kernel/bpf/verifier.c":{"insertions":17,"deletions":10}}},"7fedb63a8307dda0ec3b8969a3b233a1dd7ea8e0":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-03-24 09:38:26 UTC","message":"bpf: Tighten speculative pointer arithmetic mask\n\nThis work tightens the offset mask we use for unprivileged pointer arithmetic\nin order to mitigate a corner case reported by Piotr and Benedict where in\nthe speculative domain it is possible to advance, for example, the map value\npointer by up to value_size-1 out-of-bounds in order to leak kernel memory\nvia side-channel to user space.\n\nBefore this change, the computed ptr_limit for retrieve_ptr_limit() helper\nrepresents largest valid distance when moving pointer to the right or left\nwhich is then fed as aux->alu_limit to generate masking instructions against\nthe offset register. After the change, the derived aux->alu_limit represents\nthe largest potential value of the offset register which we mask against which\nis just a narrower subset of the former limit.\n\nFor minimal complexity, we call sanitize_ptr_alu() from 2 observation points\nin adjust_ptr_min_max_vals(), that is, before and after the simulated alu\noperation. In the first step, w","insertions":44,"deletions":29,"filepaths":{"kernel/bpf/verifier.c":{"insertions":44,"deletions":29}}},"6f55b2f2a1178856c19bbce2f71449926e731914":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-03-22 14:45:52 UTC","message":"bpf: Move off_reg into sanitize_ptr_alu\n\nSmall refactor to drag off_reg into sanitize_ptr_alu(), so we later on can\nuse off_reg for generalizing some of the checks for all pointer types.\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: John Fastabend <john.fastabend@gmail.com>\nAcked-by: Alexei Starovoitov <ast@kernel.org>","insertions":4,"deletions":5,"filepaths":{"kernel/bpf/verifier.c":{"insertions":4,"deletions":5}}},"b5871dca250cd391885218b99cc015aca1a51aea":{"author":"Piotr Krysiuk","email":"piotras@gmail.com","date":"2021-03-16 07:26:25 UTC","message":"bpf: Simplify alu_limit masking for pointer arithmetic\n\nInstead of having the mov32 with aux->alu_limit - 1 immediate, move this\noperation to retrieve_ptr_limit() instead to simplify the logic and to\nallow for subsequent sanity boundary checks inside retrieve_ptr_limit().\nThis avoids in future that at the time of the verifier masking rewrite\nwe'd run into an underflow which would not sign extend due to the nature\nof mov32 instruction.\n\nSigned-off-by: Piotr Krysiuk <piotras@gmail.com>\nCo-developed-by: Daniel Borkmann <daniel@iogearbox.net>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Alexei Starovoitov <ast@kernel.org>","insertions":5,"deletions":5,"filepaths":{"kernel/bpf/verifier.c":{"insertions":5,"deletions":5}}},"b9b34ddbe2076ade359cd5ce7537d5ed019e9807":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-04-30 14:21:46 UTC","message":"bpf: Fix masking negation logic upon negative dst register\n\nThe negation logic for the case where the off_reg is sitting in the\ndst register is not correct given then we cannot just invert the add\nto a sub or vice versa. As a fix, perform the final bitwise and-op\nunconditionally into AX from the off_reg, then move the pointer from\nthe src to dst and finally use AX as the source for the original\npointer arithmetic operation such that the inversion yields a correct\nresult. The single non-AX mov in between is possible given constant\nblinding is retaining it as it's not an immediate based operation.\n\nFixes: 979d63d50c0c (\"bpf: prevent out of bounds speculation on pointer arithmetic\")\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nTested-by: Piotr Krysiuk <piotras@gmail.com>\nReviewed-by: Piotr Krysiuk <piotras@gmail.com>\nReviewed-by: John Fastabend <john.fastabend@gmail.com>\nAcked-by: Alexei Starovoitov <ast@kernel.org>","insertions":4,"deletions":8,"filepaths":{"kernel/bpf/verifier.c":{"insertions":4,"deletions":8}}},"4edbe1d7bcffcd6269f3b5eb63f710393ff2ec7a":{"author":"Mikulas Patocka","email":"mpatocka@redhat.com","date":"2021-03-26 18:32:32 UTC","message":"dm ioctl: fix out of bounds array access when no devices\n\nIf there are not any dm devices, we need to zero the \"dev\" argument in\nthe first structure dm_name_list. However, this can cause out of\nbounds write, because the \"needed\" variable is zero and len may be\nless than eight.\n\nFix this bug by reporting DM_BUFFER_FULL_FLAG if the result buffer is\ntoo small to hold the \"nl->dev\" value.\n\nSigned-off-by: Mikulas Patocka <mpatocka@redhat.com>\nReported-by: Dan Carpenter <dan.carpenter@oracle.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Mike Snitzer <snitzer@redhat.com>","insertions":1,"deletions":1,"filepaths":{"drivers/md/dm-ioctl.c":{"insertions":1,"deletions":1}}},"298a58e165e447ccfaae35fe9f651f9d7e15166f":{"author":"Russell King","email":"rmk+kernel@armlinux.org.uk","date":"2021-05-05 10:23:50 UTC","message":"ARM: footbridge: remove personal server platform\n\nRemove the personal server platform, as that has had an array overrun\nissue identified. It is believed that no one is using this code.\n\nSigned-off-by: Russell King <rmk+kernel@armlinux.org.uk>","insertions":0,"deletions":107,"filepaths":{"arch/arm/configs/footbridge_defconfig":{"insertions":0,"deletions":1},"arch/arm/mach-footbridge/Kconfig":{"insertions":0,"deletions":21},"arch/arm/mach-footbridge/Makefile":{"insertions":0,"deletions":2},"arch/arm/mach-footbridge/personal-pci.c":{"insertions":0,"deletions":58},"arch/arm/mach-footbridge/personal.c":{"insertions":0,"deletions":25}}},"f7e68bbf405a45d6e7c5b8fc384ff1ba20dd7aa4":{"author":"Russell King","email":"rmk@dyn-67.arm.linux.org.uk","date":"2005-05-05 13:49:01 UTC","message":"[PATCH] ARM: select PCI, ISA and ISA_DMA\n\nRather than using a long \"depends on...\" and \"default y\" lines for\nthese options, use select instead.\n\nSigned-off-by: Russell King <rmk@arm.linux.org.uk>","insertions":28,"deletions":8,"filepaths":{"arch/arm/Kconfig":{"insertions":12,"deletions":8},"arch/arm/mach-clps711x/Kconfig":{"insertions":3,"deletions":0},"arch/arm/mach-footbridge/Kconfig":{"insertions":12,"deletions":0},"arch/arm/mach-imx/Kconfig":{"insertions":1,"deletions":0}}},"eb01d42a77785ff96b6e66a2a2e7027fc6d78e4a":{"author":"Christoph Hellwig","email":"hch@lst.de","date":"2018-11-15 19:05:32 UTC","message":"PCI: consolidate PCI config entry in drivers/pci\n\nThere is no good reason to duplicate the PCI menu in every architecture.\nInstead provide a selectable HAVE_PCI symbol that indicates availability\nof PCI support, and a FORCE_PCI symbol to for PCI on and the handle the\nrest in drivers/pci.\n\nSigned-off-by: Christoph Hellwig <hch@lst.de>\nReviewed-by: Palmer Dabbelt <palmer@sifive.com>\nAcked-by: Max Filippov <jcmvbkbc@gmail.com>\nAcked-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Bjorn Helgaas <bhelgaas@google.com>\nAcked-by: Geert Uytterhoeven <geert@linux-m68k.org>\nAcked-by: Paul Burton <paul.burton@mips.com>\nSigned-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>","insertions":195,"deletions":377,"filepaths":{"arch/alpha/Kconfig":{"insertions":2,"deletions":12},"arch/arc/Kconfig":{"insertions":0,"deletions":20},"arch/arc/plat-axs10x/Kconfig":{"insertions":1,"deletions":1},"arch/arc/plat-hsdk/Kconfig":{"insertions":1,"deletions":1},"arch/arm/Kconfig":{"insertions":6,"deletions":19},"arch/arm/mach-alpine/Kconfig":{"insertions":1,"deletions":1},"arch/arm/mach-footbridge/Kconfig":{"insertions":4,"deletions":4},"arch/arm/mach-ixp4xx/Kconfig":{"insertions":11,"deletions":11},"arch/arm/mach-ks8695/Kconfig":{"insertions":5,"deletions":5},"arch/arm/mach-mv78xx0/Kconfig":{"insertions":1,"deletions":1},"arch/arm/mach-mvebu/Kconfig":{"insertions":1,"deletions":1},"arch/arm/mach-orion5x/Kconfig":{"insertions":1,"deletions":1},"arch/arm/mach-pxa/Kconfig":{"insertions":1,"deletions":1},"arch/arm/mach-sa1100/Kconfig":{"insertions":1,"deletions":1},"arch/arm64/Kconfig":{"insertions":1,"deletions":13},"arch/hexagon/Kconfig":{"insertions":0,"deletions":3},"arch/ia64/Kconfig":{"insertions":1,"deletions":9},"arch/m68k/Kconfig.bus":{"insertions":0,"deletions":11},"arch/m68k/Kconfig.cpu":{"insertions":1,"deletions":0},"arch/microblaze/Kconfig":{"insertions":1,"deletions":5},"arch/mips/Kconfig":{"insertions":15,"deletions":29},"arch/mips/alchemy/Kconfig":{"insertions":3,"deletions":3},"arch/mips/ath25/Kconfig":{"insertions":1,"deletions":2},"arch/mips/ath79/Kconfig":{"insertions":4,"deletions":4},"arch/mips/bcm63xx/Kconfig":{"insertions":7,"deletions":7},"arch/mips/lantiq/Kconfig":{"insertions":1,"deletions":1},"arch/mips/loongson64/Kconfig":{"insertions":3,"deletions":4},"arch/mips/pmcs-msp71xx/Kconfig":{"insertions":5,"deletions":5},"arch/mips/ralink/Kconfig":{"insertions":4,"deletions":4},"arch/mips/sibyte/Kconfig":{"insertions":5,"deletions":5},"arch/mips/txx9/Kconfig":{"insertions":4,"deletions":4},"arch/mips/vr41xx/Kconfig":{"insertions":4,"deletions":4},"arch/parisc/Kconfig":{"insertions":1,"deletions":0},"arch/powerpc/Kconfig":{"insertions":1,"deletions":19},"arch/powerpc/platforms/40x/Kconfig":{"insertions":5,"deletions":5},"arch/powerpc/platforms/44x/Kconfig":{"insertions":16,"deletions":16},"arch/powerpc/platforms/512x/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/platforms/52xx/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/platforms/83xx/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/platforms/85xx/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/platforms/86xx/Kconfig":{"insertions":2,"deletions":2},"arch/powerpc/platforms/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/platforms/Kconfig.cputype":{"insertions":2,"deletions":2},"arch/powerpc/platforms/amigaone/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/platforms/cell/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/platforms/chrp/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/platforms/embedded6xx/Kconfig":{"insertions":2,"deletions":2},"arch/powerpc/platforms/maple/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/platforms/pasemi/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/platforms/powermac/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/platforms/powernv/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/platforms/ps3/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/platforms/pseries/Kconfig":{"insertions":1,"deletions":1},"arch/riscv/Kconfig":{"insertions":2,"deletions":16},"arch/s390/Kconfig":{"insertions":6,"deletions":13},"arch/sh/Kconfig":{"insertions":3,"deletions":16},"arch/sh/boards/Kconfig":{"insertions":15,"deletions":15},"arch/sparc/Kconfig":{"insertions":1,"deletions":14},"arch/um/Kconfig":{"insertions":0,"deletions":3},"arch/unicore32/Kconfig":{"insertions":1,"deletions":10},"arch/x86/Kconfig":{"insertions":1,"deletions":11},"arch/x86/configs/i386_defconfig":{"insertions":1,"deletions":0},"arch/x86/configs/x86_64_defconfig":{"insertions":1,"deletions":0},"arch/xtensa/Kconfig":{"insertions":1,"deletions":15},"arch/xtensa/configs/common_defconfig":{"insertions":1,"deletions":0},"drivers/Kconfig":{"insertions":4,"deletions":0},"drivers/parisc/Kconfig":{"insertions":0,"deletions":11},"drivers/pci/Kconfig":{"insertions":18,"deletions":0},"drivers/pci/endpoint/Kconfig":{"insertions":1,"deletions":1}}},"c23bfc3835173f5229b2503e3b616001a28affad":{"author":"Russell King","email":"rmk+kernel@arm.linux.org.uk","date":"2012-03-10 12:49:16 UTC","message":"ARM: PCI: provide a default bus scan implementation\n\nMost PCI implementations perform simple root bus scanning.  Rather than\nhaving each group of platforms provide a duplicated bus scan function,\nprovide the PCI configuration ops structure via the hw_pci structure,\nand call the root bus scanning function from core ARM PCI code.\n\nAcked-by: Krzysztof Hałasa <khc@pm.waw.pl>\nSigned-off-by: Russell King <rmk+kernel@arm.linux.org.uk>","insertions":135,"deletions":61,"filepaths":{"arch/arm/common/it8152.c":{"insertions":6,"deletions":1},"arch/arm/common/via82c505.c":{"insertions":10,"deletions":1},"arch/arm/include/asm/hardware/it8152.h":{"insertions":1,"deletions":1},"arch/arm/include/asm/mach/pci.h":{"insertions":4,"deletions":6},"arch/arm/kernel/bios32.c":{"insertions":1,"deletions":5},"arch/arm/mach-cns3xxx/pcie.c":{"insertions":8,"deletions":2},"arch/arm/mach-footbridge/cats-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-footbridge/dc21285.c":{"insertions":6,"deletions":1},"arch/arm/mach-footbridge/ebsa285-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-footbridge/netwinder-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-footbridge/personal-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-integrator/pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-integrator/pci_v3.c":{"insertions":7,"deletions":1},"arch/arm/mach-iop32x/em7210.c":{"insertions":1,"deletions":1},"arch/arm/mach-iop32x/glantank.c":{"insertions":1,"deletions":1},"arch/arm/mach-iop32x/iq31244.c":{"insertions":2,"deletions":2},"arch/arm/mach-iop32x/iq80321.c":{"insertions":1,"deletions":1},"arch/arm/mach-iop32x/n2100.c":{"insertions":1,"deletions":1},"arch/arm/mach-iop33x/iq80331.c":{"insertions":1,"deletions":1},"arch/arm/mach-iop33x/iq80332.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp2000/enp2611.c":{"insertions":8,"deletions":1},"arch/arm/mach-ixp2000/include/mach/platform.h":{"insertions":1,"deletions":1},"arch/arm/mach-ixp2000/ixdp2400.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp2000/ixdp2800.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp2000/ixdp2x01.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp2000/pci.c":{"insertions":7,"deletions":1},"arch/arm/mach-ixp23xx/include/mach/platform.h":{"insertions":1,"deletions":1},"arch/arm/mach-ixp23xx/ixdp2351.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp23xx/pci.c":{"insertions":6,"deletions":0},"arch/arm/mach-ixp23xx/roadrunner.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/avila-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/common-pci.c":{"insertions":6,"deletions":0},"arch/arm/mach-ixp4xx/coyote-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/dsmg600-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/fsg-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/gateway7001-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/goramo_mlr.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/gtwx5715-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/include/mach/platform.h":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/ixdp425-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/ixdpg425-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/miccpt-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/nas100d-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/nslu2-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/vulcan-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-ixp4xx/wg302v2-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-ks8695/pci.c":{"insertions":7,"deletions":1},"arch/arm/mach-pxa/cm-x2xx-pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-sa1100/pci-nanoengine.c":{"insertions":7,"deletions":1},"arch/arm/mach-shark/pci.c":{"insertions":1,"deletions":1},"arch/arm/mach-versatile/pci.c":{"insertions":7,"deletions":1},"arch/arm/plat-iop/pci.c":{"insertions":7,"deletions":1}}},"e9dea0c65d2de6981356c055781fb99d7191b14e":{"author":"Russell King","email":"rmk@dyn-67.arm.linux.org.uk","date":"2005-07-03 16:38:58 UTC","message":"[PATCH] ARM: Remove machine description macros\n\nRemove the pointless machine description macros, favouring C99\ninitialisers instead.\n\nSigned-off-by: Russell King <rmk+kernel@arm.linux.org.uk>","insertions":485,"deletions":607,"filepaths":{"arch/arm/mach-aaec2000/aaed2000.c":{"insertions":4,"deletions":6},"arch/arm/mach-clps711x/autcpu12.c":{"insertions":5,"deletions":7},"arch/arm/mach-clps711x/cdb89712.c":{"insertions":5,"deletions":7},"arch/arm/mach-clps711x/ceiva.c":{"insertions":5,"deletions":7},"arch/arm/mach-clps711x/clep7312.c":{"insertions":6,"deletions":8},"arch/arm/mach-clps711x/edb7211-arch.c":{"insertions":6,"deletions":8},"arch/arm/mach-clps711x/fortunet.c":{"insertions":6,"deletions":8},"arch/arm/mach-clps711x/p720t.c":{"insertions":6,"deletions":8},"arch/arm/mach-clps7500/core.c":{"insertions":6,"deletions":8},"arch/arm/mach-ebsa110/core.c":{"insertions":8,"deletions":10},"arch/arm/mach-epxa10db/arch.c":{"insertions":4,"deletions":6},"arch/arm/mach-footbridge/cats-hw.c":{"insertions":7,"deletions":9},"arch/arm/mach-footbridge/co285.c":{"insertions":5,"deletions":7},"arch/arm/mach-footbridge/ebsa285.c":{"insertions":6,"deletions":9},"arch/arm/mach-footbridge/netwinder-hw.c":{"insertions":9,"deletions":12},"arch/arm/mach-footbridge/personal.c":{"insertions":5,"deletions":7},"arch/arm/mach-h720x/h7201-eval.c":{"insertions":6,"deletions":8},"arch/arm/mach-h720x/h7202-eval.c":{"insertions":7,"deletions":9},"arch/arm/mach-imx/mx1ads.c":{"insertions":6,"deletions":8},"arch/arm/mach-integrator/integrator_ap.c":{"insertions":6,"deletions":8},"arch/arm/mach-integrator/integrator_cp.c":{"insertions":6,"deletions":8},"arch/arm/mach-iop3xx/iop321-setup.c":{"insertions":12,"deletions":16},"arch/arm/mach-iop3xx/iop331-setup.c":{"insertions":14,"deletions":16},"arch/arm/mach-ixp2000/enp2611.c":{"insertions":6,"deletions":8},"arch/arm/mach-ixp2000/ixdp2400.c":{"insertions":6,"deletions":8},"arch/arm/mach-ixp2000/ixdp2800.c":{"insertions":6,"deletions":8},"arch/arm/mach-ixp2000/ixdp2x01.c":{"insertions":12,"deletions":16},"arch/arm/mach-ixp4xx/coyote-setup.c":{"insertions":14,"deletions":16},"arch/arm/mach-ixp4xx/gtwx5715-setup.c":{"insertions":8,"deletions":9},"arch/arm/mach-ixp4xx/ixdp425-setup.c":{"insertions":28,"deletions":32},"arch/arm/mach-l7200/core.c":{"insertions":4,"deletions":6},"arch/arm/mach-lh7a40x/arch-kev7a400.c":{"insertions":5,"deletions":7},"arch/arm/mach-lh7a40x/arch-lpd7a40x.c":{"insertions":12,"deletions":16},"arch/arm/mach-omap/board-generic.c":{"insertions":6,"deletions":8},"arch/arm/mach-omap/board-h2.c":{"insertions":6,"deletions":8},"arch/arm/mach-omap/board-h3.c":{"insertions":6,"deletions":8},"arch/arm/mach-omap/board-innovator.c":{"insertions":6,"deletions":8},"arch/arm/mach-omap/board-netstar.c":{"insertions":7,"deletions":9},"arch/arm/mach-omap/board-osk.c":{"insertions":6,"deletions":8},"arch/arm/mach-omap/board-perseus2.c":{"insertions":6,"deletions":8},"arch/arm/mach-omap/board-voiceblue.c":{"insertions":7,"deletions":9},"arch/arm/mach-omap/usb.c":{"insertions":1,"deletions":0},"arch/arm/mach-pxa/corgi.c":{"insertions":18,"deletions":24},"arch/arm/mach-pxa/idp.c":{"insertions":5,"deletions":7},"arch/arm/mach-pxa/lubbock.c":{"insertions":5,"deletions":7},"arch/arm/mach-pxa/mainstone.c":{"insertions":5,"deletions":7},"arch/arm/mach-pxa/poodle.c":{"insertions":6,"deletions":8},"arch/arm/mach-rpc/riscpc.c":{"insertions":7,"deletions":9},"arch/arm/mach-s3c2410/mach-bast.c":{"insertions":4,"deletions":5},"arch/arm/mach-s3c2410/mach-h1940.c":{"insertions":5,"deletions":7},"arch/arm/mach-s3c2410/mach-n30.c":{"insertions":4,"deletions":5},"arch/arm/mach-s3c2410/mach-nexcoder.c":{"insertions":3,"deletions":5},"arch/arm/mach-s3c2410/mach-otom.c":{"insertions":3,"deletions":5},"arch/arm/mach-s3c2410/mach-rx3715.c":{"insertions":6,"deletions":8},"arch/arm/mach-s3c2410/mach-smdk2410.c":{"insertions":5,"deletions":7},"arch/arm/mach-s3c2410/mach-smdk2440.c":{"insertions":3,"deletions":5},"arch/arm/mach-s3c2410/mach-vr1000.c":{"insertions":3,"deletions":5},"arch/arm/mach-sa1100/assabet.c":{"insertions":5,"deletions":7},"arch/arm/mach-sa1100/badge4.c":{"insertions":4,"deletions":6},"arch/arm/mach-sa1100/cerf.c":{"insertions":4,"deletions":6},"arch/arm/mach-sa1100/collie.c":{"insertions":3,"deletions":5},"arch/arm/mach-sa1100/h3600.c":{"insertions":12,"deletions":18},"arch/arm/mach-sa1100/hackkit.c":{"insertions":4,"deletions":6},"arch/arm/mach-sa1100/jornada720.c":{"insertions":4,"deletions":6},"arch/arm/mach-sa1100/lart.c":{"insertions":4,"deletions":6},"arch/arm/mach-sa1100/pleb.c":{"insertions":3,"deletions":5},"arch/arm/mach-sa1100/shannon.c":{"insertions":4,"deletions":6},"arch/arm/mach-sa1100/simpad.c":{"insertions":5,"deletions":7},"arch/arm/mach-shark/core.c":{"insertions":5,"deletions":7},"arch/arm/mach-versatile/versatile_ab.c":{"insertions":6,"deletions":8},"arch/arm/mach-versatile/versatile_pb.c":{"insertions":6,"deletions":8},"include/asm-arm/mach/arch.h":{"insertions":32,"deletions":0}}},"70d13e083c8589dd3edc2313777655da39cb3568":{"author":"Russell King","email":"rmk@dyn-67.arm.linux.org.uk","date":"2008-12-06 08:25:16 UTC","message":"[ARM] netwinder: clean up GPIO naming\n\nNetwinder was using gpio_xxx names which could clash with the GPIO\nlayer.  Add a 'nw_' prefix to ensure that these remain separate.\n\nSigned-off-by: Russell King <rmk+kernel@arm.linux.org.uk>","insertions":62,"deletions":64,"filepaths":{"arch/arm/mach-footbridge/cats-hw.c":{"insertions":0,"deletions":1},"arch/arm/mach-footbridge/common.c":{"insertions":0,"deletions":1},"arch/arm/mach-footbridge/dc21285-timer.c":{"insertions":0,"deletions":1},"arch/arm/mach-footbridge/dc21285.c":{"insertions":0,"deletions":1},"arch/arm/mach-footbridge/dma.c":{"insertions":0,"deletions":1},"arch/arm/mach-footbridge/ebsa285.c":{"insertions":0,"deletions":1},"arch/arm/mach-footbridge/include/mach/hardware.h":{"insertions":4,"deletions":5},"arch/arm/mach-footbridge/isa-irq.c":{"insertions":0,"deletions":1},"arch/arm/mach-footbridge/netwinder-hw.c":{"insertions":27,"deletions":27},"arch/arm/mach-footbridge/netwinder-leds.c":{"insertions":4,"deletions":3},"arch/arm/mach-footbridge/personal.c":{"insertions":0,"deletions":1},"drivers/char/ds1620.c":{"insertions":13,"deletions":12},"drivers/char/nwflash.c":{"insertions":5,"deletions":3},"drivers/mtd/maps/dc21285.c":{"insertions":4,"deletions":3},"sound/oss/waveartist.c":{"insertions":5,"deletions":3}}},"93ef8883696f3d8de786e176e777481ad8d1b720":{"author":"Nicolas Pitre","email":"nicolas.pitre@linaro.org","date":"2011-07-06 02:38:11 UTC","message":"ARM: mach-footbridge: convert boot_params to atag_offset\n\nSigned-off-by: Nicolas Pitre <nicolas.pitre@linaro.org>\nAcked-by: Arnd Bergmann <arnd@arndb.de>","insertions":4,"deletions":4,"filepaths":{"arch/arm/mach-footbridge/cats-hw.c":{"insertions":1,"deletions":1},"arch/arm/mach-footbridge/ebsa285.c":{"insertions":1,"deletions":1},"arch/arm/mach-footbridge/netwinder-hw.c":{"insertions":1,"deletions":1},"arch/arm/mach-footbridge/personal.c":{"insertions":1,"deletions":1}}},"6fca1e17f64936de2e9c614c0d246e65ae553b68":{"author":"Russell King","email":"rmk+kernel@arm.linux.org.uk","date":"2011-11-03 19:47:54 UTC","message":"ARM: restart: footbridge: use new restart hook\n\nHook these platforms restart code into the new restart hook rather\nthan using arch_reset().\n\nSigned-off-by: Russell King <rmk+kernel@arm.linux.org.uk>","insertions":58,"deletions":52,"filepaths":{"arch/arm/mach-footbridge/cats-hw.c":{"insertions":1,"deletions":0},"arch/arm/mach-footbridge/common.c":{"insertions":27,"deletions":0},"arch/arm/mach-footbridge/common.h":{"insertions":1,"deletions":0},"arch/arm/mach-footbridge/ebsa285.c":{"insertions":1,"deletions":0},"arch/arm/mach-footbridge/include/mach/system.h":{"insertions":0,"deletions":52},"arch/arm/mach-footbridge/netwinder-hw.c":{"insertions":27,"deletions":0},"arch/arm/mach-footbridge/personal.c":{"insertions":1,"deletions":0}}},"e2cb6b891ad2b8caa9131e3be70f45243df82a80":{"author":"Lin Ma","email":"linma@zju.edu.cn","date":"2021-04-12 11:17:57 UTC","message":"bluetooth: eliminate the potential race condition when removing the HCI controller\n\nThere is a possible race condition vulnerability between issuing a HCI\ncommand and removing the cont.  Specifically, functions hci_req_sync()\nand hci_dev_do_close() can race each other like below:\n\nthread-A in hci_req_sync()      |   thread-B in hci_dev_do_close()\n                                |   hci_req_sync_lock(hdev);\ntest_bit(HCI_UP, &hdev->flags); |\n...                             |   test_and_clear_bit(HCI_UP, &hdev->flags)\nhci_req_sync_lock(hdev);        |\n                                |\nIn this commit we alter the sequence in function hci_req_sync(). Hence,\nthe thread-A cannot issue th.\n\nSigned-off-by: Lin Ma <linma@zju.edu.cn>\nCc: Marcel Holtmann <marcel@holtmann.org>\nFixes: 7c6a329e4447 (\"[Bluetooth] Fix regression from using default link policy\")\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":8,"deletions":4,"filepaths":{"net/bluetooth/hci_request.c":{"insertions":8,"deletions":4}}},"be91cd05704d5a547de086d0e61c249ee62d2e13":{"author":"Johan Hedberg","email":"johan.hedberg@intel.com","date":"2015-11-10 07:44:54 UTC","message":"Bluetooth: Move synchronous request handling into hci_request.c\n\nhci_request.c is a more natural place for the synchronous request\nhandling. Furthermore, we will soon need access to some of the\npreviously private-to-hci_core.c functions from hci_request.c.\n\nSigned-off-by: Johan Hedberg <johan.hedberg@intel.com>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>","insertions":195,"deletions":193,"filepaths":{"net/bluetooth/hci_core.c":{"insertions":0,"deletions":193},"net/bluetooth/hci_request.c":{"insertions":184,"deletions":0},"net/bluetooth/hci_request.h":{"insertions":11,"deletions":0}}},"4ebeee2dff9815619be6ff9a845d33716f48468c":{"author":"Johan Hedberg","email":"johan.hedberg@intel.com","date":"2015-11-11 06:11:19 UTC","message":"Bluetooth: Add HCI status return parameter to hci_req_sync()\n\nIn some cases it may be important to get the exact HCI status rather\nthan the converted HCI-to-errno value. Add an optional return\nparameter to the hci_req_sync() API to allow for this. Since there are\nno good HCI translation candidates for cancelation and timeout, use\nthe \"unknown\" status code for those cases.\n\nSigned-off-by: Johan Hedberg <johan.hedberg@intel.com>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>","insertions":19,"deletions":26,"filepaths":{"include/net/bluetooth/hci.h":{"insertions":1,"deletions":2},"net/bluetooth/hci_core.c":{"insertions":13,"deletions":13},"net/bluetooth/hci_request.c":{"insertions":3,"deletions":9},"net/bluetooth/hci_request.h":{"insertions":2,"deletions":2}}},"1165affd484889d4986cf3b724318935a0b120d8":{"author":"Pavel Skripkin","email":"paskripkin@gmail.com","date":"2021-03-04 15:21:25 UTC","message":"net: mac802154: Fix general protection fault\n\nsyzbot found general protection fault in crypto_destroy_tfm()[1].\nIt was caused by wrong clean up loop in llsec_key_alloc().\nIf one of the tfm array members is in IS_ERR() range it will\ncause general protection fault in clean up function [1].\n\nCall Trace:\n crypto_free_aead include/crypto/aead.h:191 [inline] [1]\n llsec_key_alloc net/mac802154/llsec.c:156 [inline]\n mac802154_llsec_key_add+0x9e0/0xcc0 net/mac802154/llsec.c:249\n ieee802154_add_llsec_key+0x56/0x80 net/mac802154/cfg.c:338\n rdev_add_llsec_key net/ieee802154/rdev-ops.h:260 [inline]\n nl802154_add_llsec_key+0x3d3/0x560 net/ieee802154/nl802154.c:1584\n genl_family_rcv_msg_doit+0x228/0x320 net/netlink/genetlink.c:739\n genl_family_rcv_msg net/netlink/genetlink.c:783 [inline]\n genl_rcv_msg+0x328/0x580 net/netlink/genetlink.c:800\n netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2502\n genl_rcv+0x24/0x40 net/netlink/genetlink.c:811\n netlink_unicast_kernel net/netlink/af_netlink.c:1312 [i","insertions":1,"deletions":1,"filepaths":{"net/mac802154/llsec.c":{"insertions":1,"deletions":1}}},"ad5d07f4a9cd671233ae20983848874731102c08":{"author":"Paul Moore","email":"paul@paul-moore.com","date":"2021-03-04 21:29:51 UTC","message":"cipso,calipso: resolve a number of problems with the DOI refcounts\n\nThe current CIPSO and CALIPSO refcounting scheme for the DOI\ndefinitions is a bit flawed in that we:\n\n1. Don't correctly match gets/puts in netlbl_cipsov4_list().\n2. Decrement the refcount on each attempt to remove the DOI from the\n   DOI list, only removing it from the list once the refcount drops\n   to zero.\n\nThis patch fixes these problems by adding the missing \"puts\" to\nnetlbl_cipsov4_list() and introduces a more conventional, i.e.\nnot-buggy, refcounting mechanism to the DOI definitions.  Upon the\naddition of a DOI to the DOI list, it is initialized with a refcount\nof one, removing a DOI from the list removes it from the list and\ndrops the refcount by one; \"gets\" and \"puts\" behave as expected with\nrespect to refcounts, increasing and decreasing the DOI's refcount by\none.\n\nFixes: b1edeb102397 (\"netlabel: Replace protocol/NetLabel linking with refrerence counts\")\nFixes: d7cce01504a0 (\"netlabel: Add support for removin","insertions":9,"deletions":19,"filepaths":{"net/ipv4/cipso_ipv4.c":{"insertions":1,"deletions":10},"net/ipv6/calipso.c":{"insertions":5,"deletions":9},"net/netlabel/netlabel_cipso_v4.c":{"insertions":3,"deletions":0}}},"5d637d5aabd85132bd85779677d8acb708e0ed90":{"author":"Phoebe Buckheister","email":"phoebe.buckheister@itwm.fraunhofer.de","date":"2014-05-16 15:46:37 UTC","message":"mac802154: add llsec structures and mutators\n\nThis patch adds containers and mutators for the major ieee802154_llsec\nstructures to mac802154. Most of the (rather simple) ieee802154_llsec\nstructs are wrapped only to provide an rcu_head for orderly disposal,\nbut some structs - llsec keys notably - require more complex\nbookkeeping.\n\nSince each llsec key may be referenced by a number of llsec key table\nentries (with differing key ids, but the same actual key), we want to\nsave memory and not allocate crypto transforms for each entry in the\ntable. Thus, the mac802154 llsec key is reference-counted instead.\nFurther, each key will have four associated crypto transforms - three\nCCM transforms for the authsizes 4/8/16 and one CTR transform for\nunauthenticated encryption. If we had a CCM* transform that allowed\nauthsize 0, and authsize as part of requests instead of transforms, this\nwould not be necessary.\n\nSigned-off-by: Phoebe Buckheister <phoebe.buckheister@itwm.fraunhofer.de>\nSigned-off-by: Da","insertions":637,"deletions":1,"filepaths":{"net/mac802154/Makefile":{"insertions":2,"deletions":1},"net/mac802154/llsec.c":{"insertions":529,"deletions":0},"net/mac802154/llsec.h":{"insertions":105,"deletions":0},"net/mac802154/mac802154.h":{"insertions":1,"deletions":0}}},"b1edeb102397546438ab4624489c6ccd7b410d97":{"author":"Paul Moore","email":"paul.moore@hp.com","date":"2008-10-10 14:16:31 UTC","message":"netlabel: Replace protocol/NetLabel linking with refrerence counts\n\nNetLabel has always had a list of backpointers in the CIPSO DOI definition\nstructure which pointed to the NetLabel LSM domain mapping structures which\nreferenced the CIPSO DOI struct.  The rationale for this was that when an\nadministrator removed a CIPSO DOI from the system all of the associated\nNetLabel LSM domain mappings should be removed as well; a list of\nbackpointers made this a simple operation.\n\nUnfortunately, while the backpointers did make the removal easier they were\na bit of a mess from an implementation point of view which was making\nfurther development difficult.  Since the removal of a CIPSO DOI is a\nrealtively rare event it seems to make sense to remove this backpointer\nlist as the optimization was hurting us more then it was helping.  However,\nwe still need to be able to track when a CIPSO DOI definition is being used\nso replace the backpointer list with a reference count.  In order to\npreserve the curr","insertions":235,"deletions":266,"filepaths":{"include/net/cipso_ipv4.h":{"insertions":11,"deletions":10},"net/ipv4/cipso_ipv4.c":{"insertions":98,"deletions":137},"net/netlabel/netlabel_cipso_v4.c":{"insertions":44,"deletions":33},"net/netlabel/netlabel_domainhash.c":{"insertions":47,"deletions":48},"net/netlabel/netlabel_domainhash.h":{"insertions":2,"deletions":0},"net/netlabel/netlabel_kapi.c":{"insertions":24,"deletions":19},"net/netlabel/netlabel_mgmt.c":{"insertions":6,"deletions":18},"security/smack/smackfs.c":{"insertions":3,"deletions":1}}},"6c2e8ac0953fccdd24dc6c4b9e08e8f1cd68cf07":{"author":"Paul Moore","email":"paul.moore@hp.com","date":"2008-12-31 17:54:11 UTC","message":"netlabel: Update kernel configuration API\n\nUpdate the NetLabel kernel API to expose the new features added in kernel\nreleases 2.6.25 and 2.6.28: the static/fallback label functionality and network\naddress based selectors.\n\nSigned-off-by: Paul Moore <paul.moore@hp.com>","insertions":569,"deletions":150,"filepaths":{"include/net/cipso_ipv4.h":{"insertions":4,"deletions":2},"include/net/netlabel.h":{"insertions":80,"deletions":6},"net/ipv4/cipso_ipv4.c":{"insertions":65,"deletions":21},"net/netlabel/netlabel_cipso_v4.c":{"insertions":18,"deletions":43},"net/netlabel/netlabel_domainhash.c":{"insertions":67,"deletions":0},"net/netlabel/netlabel_domainhash.h":{"insertions":4,"deletions":0},"net/netlabel/netlabel_kapi.c":{"insertions":287,"deletions":60},"net/netlabel/netlabel_unlabeled.c":{"insertions":13,"deletions":13},"net/netlabel/netlabel_unlabeled.h":{"insertions":15,"deletions":0},"security/smack/smackfs.c":{"insertions":16,"deletions":5}}},"f6a6fede28e3cc3f9e4669a12839b47011330d95":{"author":"Reshetova, Elena","email":"elena.reshetova@intel.com","date":"2017-07-04 06:35:01 UTC","message":"net, ipv4: convert cipso_v4_doi.refcount from atomic_t to refcount_t\n\nrefcount_t type and corresponding API should be\nused instead of atomic_t when the variable is used as\na reference counter. This allows to avoid accidental\nrefcounter overflows that might lead to use-after-free\nsituations.\n\nSigned-off-by: Elena Reshetova <elena.reshetova@intel.com>\nSigned-off-by: Hans Liljestrand <ishkamiel@gmail.com>\nSigned-off-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: David Windsor <dwindsor@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":8,"deletions":7,"filepaths":{"include/net/cipso_ipv4.h":{"insertions":2,"deletions":1},"net/ipv4/cipso_ipv4.c":{"insertions":6,"deletions":6}}},"a5e34490c3160e09814403d040765b0ae0003121":{"author":"Huw Davies","email":"huw@codeweavers.com","date":"2016-06-27 19:02:47 UTC","message":"netlabel: Add support for querying a CALIPSO DOI.\n\nQuery a specified DOI through the NLBL_CALIPSO_C_LIST command.\nIt requires the attribute:\n NLBL_CALIPSO_A_DOI.\n\nThe reply will contain:\n NLBL_CALIPSO_A_MTYPE\n\nSigned-off-by: Huw Davies <huw@codeweavers.com>\nSigned-off-by: Paul Moore <paul@paul-moore.com>","insertions":193,"deletions":0,"filepaths":{"include/net/netlabel.h":{"insertions":4,"deletions":0},"net/ipv6/calipso.c":{"insertions":68,"deletions":0},"net/netlabel/netlabel_calipso.c":{"insertions":102,"deletions":0},"net/netlabel/netlabel_calipso.h":{"insertions":19,"deletions":0}}},"4fee5242bf41d9ad641d4c1b821e36eb7ba37fbf":{"author":"Huw Davies","email":"huw@codeweavers.com","date":"2016-06-27 19:06:17 UTC","message":"calipso: Add a label cache.\n\nThis works in exactly the same way as the CIPSO label cache.\nThe idea is to allow the lsm to cache the result of a secattr\nlookup so that it doesn't need to perform the lookup for\nevery skbuff.\n\nIt introduces two sysctl controls:\n calipso_cache_enable - enables/disables the cache.\n calipso_cache_bucket_size - sets the size of a cache bucket.\n\nSigned-off-by: Huw Davies <huw@codeweavers.com>\nSigned-off-by: Paul Moore <paul@paul-moore.com>","insertions":360,"deletions":12,"filepaths":{"include/net/calipso.h":{"insertions":6,"deletions":0},"include/net/netlabel.h":{"insertions":7,"deletions":2},"net/ipv6/calipso.c":{"insertions":262,"deletions":2},"net/ipv6/sysctl_net_ipv6.c":{"insertions":19,"deletions":0},"net/netlabel/netlabel_calipso.c":{"insertions":38,"deletions":0},"net/netlabel/netlabel_calipso.h":{"insertions":3,"deletions":0},"net/netlabel/netlabel_kapi.c":{"insertions":19,"deletions":5},"security/selinux/netlabel.c":{"insertions":6,"deletions":3}}},"d7cce01504a0ccb95b5007d846560cfccbc1947f":{"author":"Huw Davies","email":"huw@codeweavers.com","date":"2016-06-27 19:02:49 UTC","message":"netlabel: Add support for removing a CALIPSO DOI.\n\nRemove a specified DOI through the NLBL_CALIPSO_C_REMOVE command.\nIt requires the attribute:\n NLBL_CALIPSO_A_DOI.\n\nSigned-off-by: Huw Davies <huw@codeweavers.com>\nSigned-off-by: Paul Moore <paul@paul-moore.com>","insertions":150,"deletions":0,"filepaths":{"include/net/netlabel.h":{"insertions":1,"deletions":0},"net/ipv6/calipso.c":{"insertions":48,"deletions":0},"net/netlabel/netlabel_calipso.c":{"insertions":92,"deletions":0},"net/netlabel/netlabel_calipso.h":{"insertions":9,"deletions":0}}},"edcd9270be1ba9c80cd0789ffbae7a7d204b7b05":{"author":"Reshetova, Elena","email":"elena.reshetova@intel.com","date":"2017-07-04 12:53:06 UTC","message":"net, calipso: convert calipso_doi.refcount from atomic_t to refcount_t\n\nrefcount_t type and corresponding API should be\nused instead of atomic_t when the variable is used as\na reference counter. This allows to avoid accidental\nrefcounter overflows that might lead to use-after-free\nsituations.\n\nSigned-off-by: Elena Reshetova <elena.reshetova@intel.com>\nSigned-off-by: Hans Liljestrand <ishkamiel@gmail.com>\nSigned-off-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: David Windsor <dwindsor@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":8,"deletions":8,"filepaths":{"include/net/calipso.h":{"insertions":2,"deletions":2},"net/ipv6/calipso.c":{"insertions":6,"deletions":6}}},"fd3858554b62c3af6b7664b5c58ad864c87116c9":{"author":"Paul Moore","email":"paul.moore@hp.com","date":"2006-09-25 22:56:37 UTC","message":"[NetLabel]: rework the Netlink attribute handling (part 2)\n\nAt the suggestion of Thomas Graf, rewrite NetLabel's use of Netlink attributes\nto better follow the common Netlink attribute usage.\n\nSigned-off-by: Paul Moore <paul.moore@hp.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":895,"deletions":830,"filepaths":{"net/netlabel/netlabel_cipso_v4.c":{"insertions":413,"deletions":215},"net/netlabel/netlabel_cipso_v4.h":{"insertions":87,"deletions":138},"net/netlabel/netlabel_mgmt.c":{"insertions":276,"deletions":265},"net/netlabel/netlabel_mgmt.h":{"insertions":68,"deletions":143},"net/netlabel/netlabel_unlabeled.c":{"insertions":35,"deletions":44},"net/netlabel/netlabel_unlabeled.h":{"insertions":16,"deletions":25}}},"83aa2e964b9b04effa304aaf3c1090b46812a04b":{"author":"Denis V. Lunev","email":"den@openvz.org","date":"2008-07-15 05:28:25 UTC","message":"netlabel: return msg overflow error from netlbl_cipsov4_list faster\n\nCurrently, we are trying to place the information from the kernel to\n1, 2, 3 and 4 pages sequentially. These pages are allocated via slab.\nThough, from the slab point of view steps 3 and 4 are equivalent on\nmost architectures. So, lets skip 3 pages attempt.\n\nBy the way, should we switch from .doit to .dumpit interface here?\nThe amount of data seems quite big for me.\n\nSigned-off-by: Denis V. Lunev <den@openvz.org>\nAcked-by: Paul Moore <paul.moore@hp.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":1,"deletions":1,"filepaths":{"net/netlabel/netlabel_cipso_v4.c":{"insertions":1,"deletions":1}}},"96cb8e3313c7a12e026c1ed510522ae6f6023875":{"author":"Paul Moore","email":"paul.moore@hp.com","date":"2006-08-03 23:48:59 UTC","message":"[NetLabel]: CIPSOv4 and Unlabeled packet integration\n\nAdd CIPSO/IPv4 and unlabeled packet management to the NetLabel\nsubsystem.  The CIPSO/IPv4 changes allow the configuration of\nCIPSO/IPv4 within the overall NetLabel framework.  The unlabeled\npacket changes allows NetLabel to pass unlabeled packets without\nerror.\n\nSigned-off-by: Paul Moore <paul.moore@hp.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":795,"deletions":0,"filepaths":{"net/netlabel/netlabel_cipso_v4.c":{"insertions":542,"deletions":0},"net/netlabel/netlabel_unlabeled.c":{"insertions":253,"deletions":0}}},"5c4c8c9544099bb9043a10a5318130a943e32fc3":{"author":"Archie Pusaka","email":"apusaka@chromium.org","date":"2021-03-22 06:03:11 UTC","message":"Bluetooth: verify AMP hci_chan before amp_destroy\n\nhci_chan can be created in 2 places: hci_loglink_complete_evt() if\nit is an AMP hci_chan, or l2cap_conn_add() otherwise. In theory,\nOnly AMP hci_chan should be removed by a call to\nhci_disconn_loglink_complete_evt(). However, the controller might mess\nup, call that function, and destroy an hci_chan which is not initiated\nby hci_loglink_complete_evt().\n\nThis patch adds a verification that the destroyed hci_chan must have\nbeen init'd by hci_loglink_complete_evt().\n\nExample crash call trace:\nCall Trace:\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0xe3/0x144 lib/dump_stack.c:118\n print_address_description+0x67/0x22a mm/kasan/report.c:256\n kasan_report_error mm/kasan/report.c:354 [inline]\n kasan_report mm/kasan/report.c:412 [inline]\n kasan_report+0x251/0x28f mm/kasan/report.c:396\n hci_send_acl+0x3b/0x56e net/bluetooth/hci_core.c:4072\n l2cap_send_cmd+0x5af/0x5c2 net/bluetooth/l2cap_core.c:877\n l2cap_send_move_chan_cfm_icid+0x8e/0xb","insertions":3,"deletions":1,"filepaths":{"include/net/bluetooth/hci_core.h":{"insertions":1,"deletions":0},"net/bluetooth/hci_event.c":{"insertions":2,"deletions":1}}},"73d80deb7bdf0171f22e76dc2429c1f99eff90e2":{"author":"Luiz Augusto von Dentz","email":"luiz.von.dentz@intel.com","date":"2011-11-02 13:52:01 UTC","message":"Bluetooth: prioritizing data over HCI\n\nThis implement priority based scheduler using skbuffer priority set via\nSO_PRIORITY socket option.\n\nIt introduces hci_chan_hash (list of HCI Channel/hci_chan) per connection,\neach item in this list refer to a L2CAP connection and it is used to\nqueue the data for transmission.\n\nSigned-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>\nAcked-by: Marcel Holtmann <marcel@holtmann.org>\nSigned-off-by: Gustavo F. Padovan <padovan@profusion.mobi>","insertions":251,"deletions":55,"filepaths":{"include/net/bluetooth/hci_core.h":{"insertions":42,"deletions":1},"include/net/bluetooth/l2cap.h":{"insertions":1,"deletions":0},"net/bluetooth/hci_conn.c":{"insertions":53,"deletions":0},"net/bluetooth/hci_core.c":{"insertions":120,"deletions":23},"net/bluetooth/l2cap_core.c":{"insertions":33,"deletions":30},"net/bluetooth/smp.c":{"insertions":2,"deletions":1}}},"168df8e57e7c1afce3f86a86ae106f82ff7c18d8":{"author":"Mat Martineau","email":"mathewm@codeaurora.org","date":"2012-10-23 22:24:13 UTC","message":"Bluetooth: Add state to hci_chan\n\nOn an AMP controller, hci_chan maps to a logical link.  When a channel\nis being moved, the logical link may or may not be connected already.\nThe hci_chan->state is used to determine the existance of a useable\nlogical link so the link can be either used or requested.\n\nSigned-off-by: Mat Martineau <mathewm@codeaurora.org>\nAcked-by: Marcel Holtmann <marcel@holtmann.org>\nAcked-by: Andrei Emeltchenko <andrei.emeltchenko@intel.com>\nSigned-off-by: Gustavo Padovan <gustavo.padovan@collabora.co.uk>","insertions":2,"deletions":0,"filepaths":{"include/net/bluetooth/hci_core.h":{"insertions":1,"deletions":0},"net/bluetooth/hci_conn.c":{"insertions":1,"deletions":0}}},"15819a7065ac46eb804498bb7ccbba60d8f7d4d5":{"author":"Andre Guedes","email":"andre.guedes@openbossa.org","date":"2014-02-03 16:56:18 UTC","message":"Bluetooth: Introduce connection parameters list\n\nThis patch adds to hdev the connection parameters list (hdev->le_\nconn_params). The elements from this list (struct hci_conn_params)\ncontains the connection parameters (for now, minimum and maximum\nconnection interval) that should be used during the connection\nestablishment.\n\nMoreover, this patch adds helper functions to manipulate hdev->le_\nconn_params list. Some of these functions are also declared in\nhci_core.h since they will be used outside hci_core.c in upcoming\npatches.\n\nSigned-off-by: Andre Guedes <andre.guedes@openbossa.org>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>","insertions":95,"deletions":0,"filepaths":{"include/net/bluetooth/hci_core.h":{"insertions":18,"deletions":0},"net/bluetooth/hci_core.c":{"insertions":77,"deletions":0}}},"27695fb415ab150e1972a882c2538bf9bf130cb0":{"author":"Andrei Emeltchenko","email":"andrei.emeltchenko@intel.com","date":"2012-10-25 12:20:45 UTC","message":"Bluetooth: AMP: Process Logical Link complete evt\n\nAfter receiving HCI Logical Link Complete event finish EFS\nconfiguration by sending L2CAP Conf Response with success code.\n\nSigned-off-by: Andrei Emeltchenko <andrei.emeltchenko@intel.com>\nAcked-by: Marcel Holtmann <marcel@holtmann.org>\nSigned-off-by: Gustavo Padovan <gustavo.padovan@collabora.co.uk>","insertions":46,"deletions":2,"filepaths":{"include/net/bluetooth/l2cap.h":{"insertions":2,"deletions":0},"net/bluetooth/hci_event.c":{"insertions":42,"deletions":0},"net/bluetooth/l2cap_core.c":{"insertions":2,"deletions":2}}},"606e2a10a6d23e900dad0b098a09438a5f7e0495":{"author":"Andrei Emeltchenko","email":"andrei.emeltchenko@intel.com","date":"2012-10-31 13:46:31 UTC","message":"Bluetooth: AMP: Process Disc Logical Link\n\nAdd processing for HCI Disconnection Logical Link Complete\nEvent.\n\nSigned-off-by: Andrei Emeltchenko <andrei.emeltchenko@intel.com>\nAcked-by: Marcel Holtmann <marcel@holtmann.org>\nSigned-off-by: Gustavo Padovan <gustavo.padovan@collabora.co.uk>","insertions":36,"deletions":0,"filepaths":{"include/net/bluetooth/amp.h":{"insertions":1,"deletions":0},"net/bluetooth/amp.c":{"insertions":7,"deletions":0},"net/bluetooth/hci_event.c":{"insertions":28,"deletions":0}}},"04b79c55201f02ffd675e1231d731365e335c307":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2021-01-19 15:06:10 UTC","message":"futex: Replace pointless printk in fixup_owner()\n\nIf that unexpected case of inconsistent arguments ever happens then the\nfutex state is left completely inconsistent and the printk is not really\nhelpful. Replace it with a warning and make the state consistent.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: stable@vger.kernel.org","insertions":3,"deletions":7,"filepaths":{"kernel/futex.c":{"insertions":3,"deletions":7}}},"12bb3f7f1b03d5913b3f9d4236a488aa7774dfe9":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2021-01-20 15:00:24 UTC","message":"futex: Ensure the correct return value from futex_lock_pi()\n\nIn case that futex_lock_pi() was aborted by a signal or a timeout and the\ntask returned without acquiring the rtmutex, but is the designated owner of\nthe futex due to a concurrent futex_unlock_pi() fixup_owner() is invoked to\nestablish consistent state. In that case it invokes fixup_pi_state_owner()\nwhich in turn tries to acquire the rtmutex again. If that succeeds then it\ndoes not propagate this success to fixup_owner() and futex_lock_pi()\nreturns -EINTR or -ETIMEOUT despite having the futex locked.\n\nReturn success from fixup_pi_state_owner() in all cases where the current\ntask owns the rtmutex and therefore the futex and propagate it correctly\nthrough fixup_owner(). Fixup the other callsite which does not expect a\npositive return value.\n\nFixes: c1e2f0eaf015 (\"futex: Avoid violating the 10th rule of futex\")\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: stable@v","insertions":16,"deletions":15,"filepaths":{"kernel/futex.c":{"insertions":16,"deletions":15}}},"2156ac1934166d6deb6cd0f6ffc4c1076ec63697":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2021-01-20 10:32:07 UTC","message":"rtmutex: Remove unused argument from rt_mutex_proxy_unlock()\n\nNothing uses the argument. Remove it as preparation to use\npi_state_update_owner().\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: stable@vger.kernel.org","insertions":3,"deletions":5,"filepaths":{"kernel/futex.c":{"insertions":1,"deletions":1},"kernel/locking/rtmutex.c":{"insertions":1,"deletions":2},"kernel/locking/rtmutex_common.h":{"insertions":1,"deletions":2}}},"34b1a1ce1458f50ef27c54e28eb9b1947012907a":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2021-01-18 18:01:21 UTC","message":"futex: Handle faults correctly for PI futexes\n\nfixup_pi_state_owner() tries to ensure that the state of the rtmutex,\npi_state and the user space value related to the PI futex are consistent\nbefore returning to user space. In case that the user space value update\nfaults and the fault cannot be resolved by faulting the page in via\nfault_in_user_writeable() the function returns with -EFAULT and leaves\nthe rtmutex and pi_state owner state inconsistent.\n\nA subsequent futex_unlock_pi() operates on the inconsistent pi_state and\nreleases the rtmutex despite not owning it which can corrupt the RB tree of\nthe rtmutex and cause a subsequent kernel stack use after free.\n\nIt was suggested to loop forever in fixup_pi_state_owner() if the fault\ncannot be resolved, but that results in runaway tasks which is especially\nundesired when the problem happens due to a programming error and not due\nto malice.\n\nAs the user space value cannot be fixed up, the proper solution is to make\nthe rtmutex and the pi_sta","insertions":20,"deletions":37,"filepaths":{"kernel/futex.c":{"insertions":20,"deletions":37}}},"6ccc84f917d33312eb2846bd7b567639f585ad6d":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2021-01-20 10:35:19 UTC","message":"futex: Use pi_state_update_owner() in put_pi_state()\n\nNo point in open coding it. This way it gains the extra sanity checks.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: stable@vger.kernel.org","insertions":1,"deletions":7,"filepaths":{"kernel/futex.c":{"insertions":1,"deletions":7}}},"c5cade200ab9a2a3be9e7f32a752c8d86b502ec7":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2021-01-19 14:21:35 UTC","message":"futex: Provide and use pi_state_update_owner()\n\nUpdating pi_state::owner is done at several places with the same\ncode. Provide a function for it and use that at the obvious places.\n\nThis is also a preparation for a bug fix to avoid yet another copy of the\nsame code or alternatively introducing a completely unpenetratable mess of\ngotos.\n\nOriginally-by: Peter Zijlstra <peterz@infradead.org>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: stable@vger.kernel.org","insertions":33,"deletions":33,"filepaths":{"kernel/futex.c":{"insertions":33,"deletions":33}}},"c64396cc36c6e60704ab06c1fb1c4a46179c9120":{"author":"Linus Torvalds","email":"torvalds@linux-foundation.org","date":"2021-01-28 19:18:43 UTC","message":" A set of PI futex fixes:\n \n   - Address a longstanding issue where the user space part of the PI futex\n     is not writeable. The kernel returns with inconsistent state which can\n     in the worst case result in a UAF of a tasks kernel stack. The solution\n     is to establish consistent kernel state which makes future operations\n     on the futex fail because user space and kernel space state are\n     inconsistent. Not a problem as PI futexes fundamentaly require a\n     functional RW mapping and if user space pulls the rug under it, then it\n     can keep the pieces it asked for.\n \n   - Address an issue where the return value is incorrect in case that the\n     futex was acquired after a timeout/signal made the waiter drop out of\n     the rtmutex wait. In one of the corner cases the kernel returned an\n     error code despite having successfully acquired the futex.\n -----BEGIN PGP SIGNATURE-----\n \n iQJHBAABCgAxFiEEQp8+kY+LLUocC4bMphj1TA10mKEFAmATCSYTHHRnbHhAbGlu\n dXRyb25peC5kZQAKCRCmGPVMD","insertions":98,"deletions":127,"filepaths":{"kernel/futex.c":{"insertions":96,"deletions":123},"kernel/locking/rtmutex.c":{"insertions":1,"deletions":2},"kernel/locking/rtmutex_common.h":{"insertions":1,"deletions":2}}},"f2dac39d93987f7de1e20b3988c8685523247ae2":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2021-01-19 15:26:38 UTC","message":"futex: Simplify fixup_pi_state_owner()\n\nToo many gotos already and an upcoming fix would make it even more\nunreadable.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: stable@vger.kernel.org","insertions":26,"deletions":27,"filepaths":{"kernel/futex.c":{"insertions":26,"deletions":27}}},"dd9739980b50c8cde33e1f8eb08b7e0140bcd61e":{"author":"Darren Hart","email":"dvhltc@us.ibm.com","date":"2009-04-03 20:40:02 UTC","message":"futex: split out fixup owner logic from futex_lock_pi()\n\nRefactor the post lock acquisition logic from futex_lock_pi(). This\ncode will be reused in futex_wait_requeue_pi().\n\nSigned-off-by: Darren Hart <dvhltc@us.ibm.com>\nReviewed-by: Thomas Gleixner <tglx@linutronix.de>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>","insertions":89,"deletions":69,"filepaths":{"kernel/futex.c":{"insertions":89,"deletions":69}}},"73d786bd043ebc855f349c81ea805f6b11cbf2aa":{"author":"Peter Zijlstra","email":"peterz@infradead.org","date":"2017-03-22 10:35:54 UTC","message":"futex: Rework inconsistent rt_mutex/futex_q state\n\nThere is a weird state in the futex_unlock_pi() path when it interleaves\nwith a concurrent futex_lock_pi() at the point where it drops hb->lock.\n\nIn this case, it can happen that the rt_mutex wait_list and the futex_q\ndisagree on pending waiters, in particular rt_mutex will find no pending\nwaiters where futex_q thinks there are. In this case the rt_mutex unlock\ncode cannot assign an owner.\n\nThe futex side fixup code has to cleanup the inconsistencies with quite a\nbunch of interesting corner cases.\n\nSimplify all this by changing wake_futex_pi() to return -EAGAIN when this\nsituation occurs. This then gives the futex_lock_pi() code the opportunity\nto continue and the retried futex_unlock_pi() will now observe a coherent\nstate.\n\nThe only problem is that this breaks RT timeliness guarantees. That\nis, consider the following scenario:\n\n  T1 and T2 are both pinned to CPU0. prio(T2) > prio(T1)\n\n    CPU0\n\n    T1\n      lock_pi()\n      queue_me()  ","insertions":14,"deletions":36,"filepaths":{"kernel/futex.c":{"insertions":14,"deletions":36}}},"8161239a8bcce9ad6b537c04a1fa3b5c68bae693":{"author":"Lai Jiangshan","email":"laijs@cn.fujitsu.com","date":"2011-01-14 09:09:41 UTC","message":"rtmutex: Simplify PI algorithm and make highest prio task get lock\n\nIn current rtmutex, the pending owner may be boosted by the tasks\nin the rtmutex's waitlist when the pending owner is deboosted\nor a task in the waitlist is boosted. This boosting is unrelated,\nbecause the pending owner does not really take the rtmutex.\nIt is not reasonable.\n\nExample.\n\ntime1:\nA(high prio) onwers the rtmutex.\nB(mid prio) and C (low prio) in the waitlist.\n\ntime2\nA release the lock, B becomes the pending owner\nA(or other high prio task) continues to run. B's prio is lower\nthan A, so B is just queued at the runqueue.\n\ntime3\nA or other high prio task sleeps, but we have passed some time\nThe B and C's prio are changed in the period (time2 ~ time3)\ndue to boosting or deboosting. Now C has the priority higher\nthan B. ***Is it reasonable that C has to boost B and help B to\nget the rtmutex?\n\nNO!! I think, it is unrelated/unneed boosting before B really\nowns the rtmutex. We should give C a chance to beat B and\nwin","insertions":127,"deletions":230,"filepaths":{"kernel/futex.c":{"insertions":12,"deletions":10},"kernel/rtmutex-debug.c":{"insertions":0,"deletions":1},"kernel/rtmutex.c":{"insertions":113,"deletions":205},"kernel/rtmutex_common.h":{"insertions":2,"deletions":14}}},"c1e2f0eaf015fb7076d51a339011f2383e6dd389":{"author":"Peter Zijlstra","email":"peterz@infradead.org","date":"2017-12-08 12:49:39 UTC","message":"futex: Avoid violating the 10th rule of futex\n\nJulia reported futex state corruption in the following scenario:\n\n   waiter                                  waker                                            stealer (prio > waiter)\n\n   futex(WAIT_REQUEUE_PI, uaddr, uaddr2,\n         timeout=[N ms])\n      futex_wait_requeue_pi()\n         futex_wait_queue_me()\n            freezable_schedule()\n            <scheduled out>\n                                           futex(LOCK_PI, uaddr2)\n                                           futex(CMP_REQUEUE_PI, uaddr,\n                                                 uaddr2, 1, 0)\n                                              /* requeues waiter to uaddr2 */\n                                           futex(UNLOCK_PI, uaddr2)\n                                                 wake_futex_pi()\n                                                    cmp_futex_value_locked(uaddr2, waiter)\n                                                    wake_up_q()\n           <woke","insertions":87,"deletions":23,"filepaths":{"kernel/futex.c":{"insertions":67,"deletions":16},"kernel/locking/rtmutex.c":{"insertions":19,"deletions":7},"kernel/locking/rtmutex_common.h":{"insertions":1,"deletions":0}}},"d7c5ed73b19c4640426d9c106f70ec2cb532034d":{"author":"André Almeida","email":"andrealmeid@collabora.com","date":"2020-07-02 20:28:41 UTC","message":"futex: Remove needless goto's\n\nAs stated in the coding style documentation, \"if there is no cleanup\nneeded then just return directly\", instead of jumping to a label and\nthen returning.\n\nRemove such goto's and replace with a return statement.  When there's a\nternary operator on the return value, replace it with the result of the\noperation when it is logically possible to determine it by the control\nflow.\n\nSigned-off-by: André Almeida <andrealmeid@collabora.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nLink: https://lkml.kernel.org/r/20200702202843.520764-3-andrealmeid@collabora.com","insertions":16,"deletions":24,"filepaths":{"kernel/futex.c":{"insertions":16,"deletions":24}}},"52400ba946759af28442dee6265c5c0180ac7122":{"author":"Darren Hart","email":"dvhltc@us.ibm.com","date":"2009-04-03 20:40:49 UTC","message":"futex: add requeue_pi functionality\n\nPI Futexes and their underlying rt_mutex cannot be left ownerless if\nthere are pending waiters as this will break the PI boosting logic, so\nthe standard requeue commands aren't sufficient.  The new commands\nproperly manage pi futex ownership by ensuring a futex with waiters\nhas an owner at all times.  This will allow glibc to properly handle\npi mutexes with pthread_condvars.\n\nThe approach taken here is to create two new futex op codes:\n\nFUTEX_WAIT_REQUEUE_PI:\nTasks will use this op code to wait on a futex (such as a non-pi waitqueue)\nand wake after they have been requeued to a pi futex.  Prior to returning to\nuserspace, they will acquire this pi futex (and the underlying rt_mutex).\n\nfutex_wait_requeue_pi() is the result of a high speed collision between\nfutex_wait() and futex_lock_pi() (with the first part of futex_lock_pi() being\ndone by futex_proxy_trylock_atomic() on behalf of the top_waiter).\n\nFUTEX_REQUEUE_PI (and FUTEX_CMP_REQUEUE_PI):\nThis cal","insertions":510,"deletions":20,"filepaths":{"include/linux/futex.h":{"insertions":8,"deletions":0},"include/linux/thread_info.h":{"insertions":2,"deletions":1},"kernel/futex.c":{"insertions":500,"deletions":19}}},"1b7558e457ed0de61023cfc913d2c342c7c3d9f2":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2008-06-23 09:21:58 UTC","message":"futexes: fix fault handling in futex_lock_pi\n\nThis patch addresses a very sporadic pi-futex related failure in\nhighly threaded java apps on large SMP systems.\n\nDavid Holmes reported that the pi_state consistency check in\nlookup_pi_state triggered with his test application. This means that\nthe kernel internal pi_state and the user space futex variable are out\nof sync. First we assumed that this is a user space data corruption,\nbut deeper investigation revieled that the problem happend because the\npi-futex code is not handling a fault in the futex_lock_pi path when\nthe user space variable needs to be fixed up.\n\nThe fault happens when a fork mapped the anon memory which contains\nthe futex readonly for COW or the page got swapped out exactly between\nthe unlock of the futex and the return of either the new futex owner\nor the task which was the expected owner but failed to acquire the\nkernel internal rtmutex. The current futex_lock_pi() code drops out\nwith an inconsistent in case it faults an","insertions":73,"deletions":20,"filepaths":{"kernel/futex.c":{"insertions":73,"deletions":20}}},"734009e96d1983ad739e5b656e03430b3660c913":{"author":"Peter Zijlstra","email":"peterz@infradead.org","date":"2017-03-22 10:35:52 UTC","message":"futex: Change locking rules\n\nCurrently futex-pi relies on hb->lock to serialize everything. But hb->lock\ncreates another set of problems, especially priority inversions on RT where\nhb->lock becomes a rt_mutex itself.\n\nThe rt_mutex::wait_lock is the most obvious protection for keeping the\nfutex user space value and the kernel internal pi_state in sync.\n\nRework and document the locking so rt_mutex::wait_lock is held accross all\noperations which modify the user space value and the pi state.\n\nThis allows to invoke rt_mutex_unlock() (including deboost) without holding\nhb->lock as a next step.\n\nNothing yet relies on the new locking rules.\n\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: juri.lelli@arm.com\nCc: bigeasy@linutronix.de\nCc: xlpang@redhat.com\nCc: rostedt@goodmis.org\nCc: mathieu.desnoyers@efficios.com\nCc: jdesfossez@efficios.com\nCc: dvhart@infradead.org\nCc: bristot@redhat.com\nLink: http://lkml.kernel.org/r/20170322104151.751993333@infradead.org\nSigned-off-by: Thomas ","insertions":132,"deletions":33,"filepaths":{"kernel/futex.c":{"insertions":132,"deletions":33}}},"ae791a2d2e382adc69990a144a7f1a6c4bc24f1e":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2010-11-10 12:30:36 UTC","message":"futex: Cleanup stale fshared flag interfaces\n\nThe fast GUP changes stopped using the fshared flag in\nput_futex_keys(), but we kept the interface the same.\n\nCleanup all stale users.\n\nThis patch is split out from Darren Harts combo patch which also\ncombines various flags. This way the changes are clearly separated.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: Darren Hart <dvhart@linux.intel.com>\nLKML-Reference: <1289250609-16304-1-git-send-email-dvhart@linux.intel.com>","insertions":30,"deletions":34,"filepaths":{"kernel/futex.c":{"insertions":30,"deletions":34}}},"16ffa12d742534d4ff73e8b3a4e81c1de39196f0":{"author":"Peter Zijlstra","email":"peterz@infradead.org","date":"2017-03-22 10:35:55 UTC","message":"futex: Pull rt_mutex_futex_unlock() out from under hb->lock\n\nThere's a number of 'interesting' problems, all caused by holding\nhb->lock while doing the rt_mutex_unlock() equivalient.\n\nNotably:\n\n - a PI inversion on hb->lock; and,\n\n - a SCHED_DEADLINE crash because of pointer instability.\n\nThe previous changes:\n\n - changed the locking rules to cover {uval,pi_state} with wait_lock.\n\n - allow to do rt_mutex_futex_unlock() without dropping wait_lock; which in\n   turn allows to rely on wait_lock atomicity completely.\n\n - simplified the waiter conundrum.\n\nIt's now sufficient to hold rtmutex::wait_lock and a reference on the\npi_state to protect the state consistency, so hb->lock can be dropped\nbefore calling rt_mutex_futex_unlock().\n\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: juri.lelli@arm.com\nCc: bigeasy@linutronix.de\nCc: xlpang@redhat.com\nCc: rostedt@goodmis.org\nCc: mathieu.desnoyers@efficios.com\nCc: jdesfossez@efficios.com\nCc: dvhart@infradead.org\nCc: bristot@redhat.c","insertions":100,"deletions":54,"filepaths":{"kernel/futex.c":{"insertions":100,"deletions":54}}},"fb75a4282d0d9a3c7c44d940582c2d226cf3acfb":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2015-12-19 20:07:38 UTC","message":"futex: Drop refcount if requeue_pi() acquired the rtmutex\n\nIf the proxy lock in the requeue loop acquires the rtmutex for a\nwaiter then it acquired also refcount on the pi_state related to the\nfutex, but the waiter side does not drop the reference count.\n\nAdd the missing free_pi_state() call.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Darren Hart <darren@dvhart.com>\nCc: Davidlohr Bueso <dave@stgolabs.net>\nCc: Bhuvanesh_Surachari@mentor.com\nCc: Andy Lowe <Andy_Lowe@mentor.com>\nLink: http://lkml.kernel.org/r/20151219200607.178132067@linutronix.de\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: stable@vger.kernel.org","insertions":5,"deletions":0,"filepaths":{"kernel/futex.c":{"insertions":5,"deletions":0}}},"29e9ee5d48c35d6cf8afe09bdf03f77125c9ac11":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2015-12-19 20:07:39 UTC","message":"futex: Rename free_pi_state() to put_pi_state()\n\nfree_pi_state() is confusing as it is in fact only freeing/caching the\npi state when the last reference is gone. Rename it to put_pi_state()\nwhich reflects better what it is doing.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Darren Hart <darren@dvhart.com>\nCc: Davidlohr Bueso <dave@stgolabs.net>\nCc: Bhuvanesh_Surachari@mentor.com\nCc: Andy Lowe <Andy_Lowe@mentor.com>\nLink: http://lkml.kernel.org/r/20151219200607.259636467@linutronix.de\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>","insertions":10,"deletions":7,"filepaths":{"kernel/futex.c":{"insertions":10,"deletions":7}}},"c236c8e95a3d395b0494e7108f0d41cf36ec107c":{"author":"Peter Zijlstra","email":"peterz@infradead.org","date":"2017-03-04 09:27:18 UTC","message":"futex: Fix potential use-after-free in FUTEX_REQUEUE_PI\n\nWhile working on the futex code, I stumbled over this potential\nuse-after-free scenario. Dmitry triggered it later with syzkaller.\n\npi_mutex is a pointer into pi_state, which we drop the reference on in\nunqueue_me_pi(). So any access to that pointer after that is bad.\n\nSince other sites already do rt_mutex_unlock() with hb->lock held, see\nfor example futex_lock_pi(), simply move the unlock before\nunqueue_me_pi().\n\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nReviewed-by: Darren Hart <dvhart@linux.intel.com>\nCc: juri.lelli@arm.com\nCc: bigeasy@linutronix.de\nCc: xlpang@redhat.com\nCc: rostedt@goodmis.org\nCc: mathieu.desnoyers@efficios.com\nCc: jdesfossez@efficios.com\nCc: dvhart@infradead.org\nCc: bristot@redhat.com\nCc: stable@vger.kernel.org\nLink: http://lkml.kernel.org/r/20170304093558.801744246@infradead.org\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>","insertions":11,"deletions":9,"filepaths":{"kernel/futex.c":{"insertions":11,"deletions":9}}},"c74aef2d06a9f59cece89093eecc552933cba72a":{"author":"Peter Zijlstra","email":"peterz@infradead.org","date":"2017-09-22 15:48:06 UTC","message":"futex: Fix pi_state->owner serialization\n\nThere was a reported suspicion about a race between exit_pi_state_list()\nand put_pi_state(). The same report mentioned the comment with\nput_pi_state() said it should be called with hb->lock held, and it no\nlonger is in all places.\n\nAs it turns out, the pi_state->owner serialization is indeed broken. As per\nthe new rules:\n\n  734009e96d19 (\"futex: Change locking rules\")\n\npi_state->owner should be serialized by pi_state->pi_mutex.wait_lock.\nFor the sites setting pi_state->owner we already hold wait_lock (where\nrequired) but exit_pi_state_list() and put_pi_state() were not and\nraced on clearing it.\n\nFixes: 734009e96d19 (\"futex: Change locking rules\")\nReported-by: Gratian Crisan <gratian.crisan@ni.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: dvhart@infradead.org\nCc: stable@vger.kernel.org\nLink: https://lkml.kernel.org/r/20170922154806.jd3ffltfk24m4o4y@hirez.programming.kicks","insertions":22,"deletions":11,"filepaths":{"kernel/futex.c":{"insertions":22,"deletions":11}}},"0cdbee9920fb37eb2dc49b860c2b28862d647adc":{"author":"Ingo Molnar","email":"mingo@elte.hu","date":"2006-06-27 09:54:57 UTC","message":"[PATCH] pi-futex: rt mutex futex api\n\nAdd proxy-locking rt-mutex functionality needed by pi-futexes.\n\nSigned-off-by: Ingo Molnar <mingo@elte.hu>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nSigned-off-by: Arjan van de Ven <arjan@linux.intel.com>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>","insertions":55,"deletions":0,"filepaths":{"kernel/rtmutex.c":{"insertions":55,"deletions":0}}},"c87e2837be82df479a6bae9f155c43516d2feebc":{"author":"Ingo Molnar","email":"mingo@elte.hu","date":"2006-06-27 09:54:58 UTC","message":"[PATCH] pi-futex: futex_lock_pi/futex_unlock_pi support\n\nThis adds the actual pi-futex implementation, based on rt-mutexes.\n\n[dino@in.ibm.com: fix an oops-causing race]\nSigned-off-by: Ingo Molnar <mingo@elte.hu>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nSigned-off-by: Arjan van de Ven <arjan@linux.intel.com>\nSigned-off-by: Dinakar Guniguntala <dino@in.ibm.com>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>","insertions":828,"deletions":41,"filepaths":{"include/linux/futex.h":{"insertions":7,"deletions":0},"include/linux/sched.h":{"insertions":3,"deletions":0},"kernel/exit.c":{"insertions":8,"deletions":0},"kernel/fork.c":{"insertions":3,"deletions":0},"kernel/futex.c":{"insertions":791,"deletions":38},"kernel/futex_compat.c":{"insertions":8,"deletions":3},"kernel/rtmutex_common.h":{"insertions":8,"deletions":0}}},"e8f6386c01a5699c115bdad10271a24076364c97":{"author":"Darren Hart","email":"dvhltc@us.ibm.com","date":"2009-03-12 07:56:06 UTC","message":"futex: unlock before returning -EFAULT\n\nImpact: rt-mutex failure case fix\n\nfutex_lock_pi can potentially return -EFAULT with the rt_mutex\nheld.  This seems like the wrong thing to do as userspace should\nassume -EFAULT means the lock was not taken.  Even if it could\nfigure this out, we'd be leaving the pi_state->owner in an\ninconsistent state.  This patch unlocks the rt_mutex prior to\nreturning -EFAULT to userspace.\n\nBuild and boot tested on a 4 way Intel x86_64 workstation.\nPasses basic pthread_mutex and PI tests out of\nltp/testcases/realtime.\n\nSigned-off-by: Darren Hart <dvhltc@us.ibm.com>\nAcked-by: Peter Zijlstra <peterz@infradead.org>\nCc: Rusty Russell <rusty@rustcorp.com.au>\nLKML-Reference: <20090312075606.9856.88729.stgit@Aeon>\nSigned-off-by: Ingo Molnar <mingo@elte.hu>","insertions":7,"deletions":0,"filepaths":{"kernel/futex.c":{"insertions":7,"deletions":0}}},"54a217887a7b658e2650c3feff22756ab80c7339":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2014-06-03 12:27:08 UTC","message":"futex: Make lookup_pi_state more robust\n\nThe current implementation of lookup_pi_state has ambigous handling of\nthe TID value 0 in the user space futex.  We can get into the kernel\neven if the TID value is 0, because either there is a stale waiters bit\nor the owner died bit is set or we are called from the requeue_pi path\nor from user space just for fun.\n\nThe current code avoids an explicit sanity check for pid = 0 in case\nthat kernel internal state (waiters) are found for the user space\naddress.  This can lead to state leakage and worse under some\ncircumstances.\n\nHandle the cases explicit:\n\n       Waiter | pi_state | pi->owner | uTID      | uODIED | ?\n\n  [1]  NULL   | ---      | ---       | 0         | 0/1    | Valid\n  [2]  NULL   | ---      | ---       | >0        | 0/1    | Valid\n\n  [3]  Found  | NULL     | --        | Any       | 0/1    | Invalid\n\n  [4]  Found  | Found    | NULL      | 0         | 1      | Valid\n  [5]  Found  | Found    | NULL      | >0        | 1      | Invalid\n\n  ","insertions":106,"deletions":28,"filepaths":{"kernel/futex.c":{"insertions":106,"deletions":28}}},"d0aa7a70bf03b9de9e995ab272293be1f7937822":{"author":"Pierre Peiffer","email":"pierre.peiffer@bull.net","date":"2007-05-09 09:35:02 UTC","message":"futex_requeue_pi optimization\n\nThis patch provides the futex_requeue_pi functionality, which allows some\nthreads waiting on a normal futex to be requeued on the wait-queue of a\nPI-futex.\n\nThis provides an optimization, already used for (normal) futexes, to be used\nwith the PI-futexes.\n\nThis optimization is currently used by the glibc in pthread_broadcast, when\nusing \"normal\" mutexes.  With futex_requeue_pi, it can be used with\nPRIO_INHERIT mutexes too.\n\nSigned-off-by: Pierre Peiffer <pierre.peiffer@bull.net>\nCc: Ingo Molnar <mingo@elte.hu>\nCc: Ulrich Drepper <drepper@redhat.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":540,"deletions":88,"filepaths":{"include/linux/futex.h":{"insertions":8,"deletions":1},"kernel/futex.c":{"insertions":487,"deletions":54},"kernel/futex_compat.c":{"insertions":2,"deletions":1},"kernel/rtmutex.c":{"insertions":9,"deletions":32},"kernel/rtmutex_common.h":{"insertions":34,"deletions":0}}},"94ffac5d847cfd790bb37b7cef1cad803743985e":{"author":"Peter Zijlstra","email":"peterz@infradead.org","date":"2017-04-07 07:04:07 UTC","message":"futex: Fix small (and harmless looking) inconsistencies\n\nDuring (post-commit) review Darren spotted a few minor things. One\n(harmless AFAICT) type inconsistency and a comment that wasn't as\nclear as hoped.\n\nReported-by: Darren Hart (VMWare) <dvhart@infradead.org>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nReviewed-by: Darren Hart (VMware) <dvhart@infradead.org>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: linux-kernel@vger.kernel.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>","insertions":7,"deletions":4,"filepaths":{"kernel/futex.c":{"insertions":7,"deletions":4}}},"627371d73cdd04ed23fe098755b4f855138ad9e0":{"author":"Ingo Molnar","email":"mingo@elte.hu","date":"2006-07-29 03:16:20 UTC","message":"[PATCH] pi-futex: robust-futex exit crash fix\n\nFix pi_state->list handling bugs: list handling mishap, locking error.\nPlus add more debug checks and fix a few style issues i noticed while\ndebugging this.\n\n(reported by Ulrich Drepper and Jakub Jelinek.)\n\nSigned-off-by: Ingo Molnar <mingo@elte.hu>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>","insertions":24,"deletions":8,"filepaths":{"kernel/futex.c":{"insertions":24,"deletions":8}}},"b4abf91047cf054f203dcfac97e1038388826937":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2016-01-13 10:25:38 UTC","message":"rtmutex: Make wait_lock irq safe\n\nSasha reported a lockdep splat about a potential deadlock between RCU boosting\nrtmutex and the posix timer it_lock.\n\nCPU0\t\t\t\t\tCPU1\n\nrtmutex_lock(&rcu->rt_mutex)\n  spin_lock(&rcu->rt_mutex.wait_lock)\n\t\t\t\t\tlocal_irq_disable()\n\t\t\t\t\tspin_lock(&timer->it_lock)\n\t\t\t\t\tspin_lock(&rcu->mutex.wait_lock)\n--> Interrupt\n    spin_lock(&timer->it_lock)\n\nThis is caused by the following code sequence on CPU1\n\n     rcu_read_lock()\n     x = lookup();\n     if (x)\n     \tspin_lock_irqsave(&x->it_lock);\n     rcu_read_unlock();\n     return x;\n\nWe could fix that in the posix timer code by keeping rcu read locked across\nthe spinlocked and irq disabled section, but the above sequence is common and\nthere is no reason not to support it.\n\nTaking rt_mutex.wait_lock irq safe prevents the deadlock.\n\nReported-by: Sasha Levin <sasha.levin@oracle.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Paul McKenney <paulmck@linux.vnet.ibm.com>","insertions":81,"deletions":72,"filepaths":{"kernel/futex.c":{"insertions":9,"deletions":9},"kernel/locking/rtmutex.c":{"insertions":72,"deletions":63}}},"bf92cf3a5100f5a0d5f9834787b130159397cb22":{"author":"Peter Zijlstra","email":"peterz@infradead.org","date":"2017-03-22 10:35:53 UTC","message":"futex: Cleanup refcounting\n\nAdd a put_pit_state() as counterpart for get_pi_state() so the refcounting\nbecomes consistent.\n\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: juri.lelli@arm.com\nCc: bigeasy@linutronix.de\nCc: xlpang@redhat.com\nCc: rostedt@goodmis.org\nCc: mathieu.desnoyers@efficios.com\nCc: jdesfossez@efficios.com\nCc: dvhart@infradead.org\nCc: bristot@redhat.com\nLink: http://lkml.kernel.org/r/20170322104151.801778516@infradead.org\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>","insertions":9,"deletions":4,"filepaths":{"kernel/futex.c":{"insertions":9,"deletions":4}}},"cdf71a10c7b6432d9b48e292cca2c62a0b9fa6cf":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2008-01-08 18:47:38 UTC","message":"futex: Prevent stale futex owner when interrupted/timeout\n\nRoland Westrelin did a great analysis of a long standing thinko in the\nreturn path of futex_lock_pi.\n\nWhile we fixed the lock steal case long ago, which was easy to trigger,\nwe never had a test case which exposed this problem and stupidly never\nthought about the reverse lock stealing scenario and the return to user\nspace with a stale state.\n\nWhen a blocked tasks returns from rt_mutex_timed_locked without holding\nthe rt_mutex (due to a signal or timeout) and at the same time the task\nholding the futex is releasing the futex and assigning the ownership of\nthe futex to the returning task, then it might happen that a third task\nacquires the rt_mutex before the final rt_mutex_trylock() of the\nreturning task happens under the futex hash bucket lock. The returning\ntask returns to user space with ETIMEOUT or EINTR, but the user space\nfutex value is assigned to this task. The task which acquired the\nrt_mutex fixes the user space futex va","insertions":41,"deletions":10,"filepaths":{"kernel/futex.c":{"insertions":41,"deletions":10}}},"49262de2270e09882d7bd8866a691cdd69ab32f6":{"author":"Elena Reshetova","email":"elena.reshetova@intel.com","date":"2019-02-05 12:24:27 UTC","message":"futex: Convert futex_pi_state.refcount to refcount_t\n\natomic_t variables are currently used to implement reference\ncounters with the following properties:\n\n - counter is initialized to 1 using atomic_set()\n - a resource is freed upon counter reaching zero\n - once counter reaches zero, its further\n   increments aren't allowed\n - counter schema uses basic atomic operations\n   (set, inc, inc_not_zero, dec_and_test, etc.)\n\nSuch atomic variables should be converted to a newly provided\nrefcount_t type and API that prevents accidental counter overflows\nand underflows. This is important since overflows and underflows\ncan lead to use-after-free situation and be exploitable.\n\nThe variable futex_pi_state.refcount is used as pure\nreference counter. Convert it to refcount_t and fix up\nthe operations.\n\n**Important note for maintainers:\n\nSome functions from refcount_t API defined in lib/refcount.c\nhave different memory ordering guarantees than their atomic\ncounterparts. Please check Documentation/core","insertions":8,"deletions":7,"filepaths":{"kernel/futex.c":{"insertions":8,"deletions":7}}},"aa2bfe55366552cb7e93e8709d66e698d79ccc47":{"author":"Peter Zijlstra","email":"peterz@infradead.org","date":"2017-03-23 14:56:10 UTC","message":"rtmutex: Clean up\n\nPrevious patches changed the meaning of the return value of\nrt_mutex_slowunlock(); update comments and code to reflect this.\n\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: juri.lelli@arm.com\nCc: bigeasy@linutronix.de\nCc: xlpang@redhat.com\nCc: rostedt@goodmis.org\nCc: mathieu.desnoyers@efficios.com\nCc: jdesfossez@efficios.com\nCc: bristot@redhat.com\nLink: http://lkml.kernel.org/r/20170323150216.255058238@infradead.org\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>","insertions":18,"deletions":19,"filepaths":{"kernel/futex.c":{"insertions":4,"deletions":3},"kernel/locking/rtmutex.c":{"insertions":13,"deletions":15},"kernel/locking/rtmutex_common.h":{"insertions":1,"deletions":1}}},"6b4f4bc9cb22875f97023984a625386f0c7cc1c0":{"author":"Will Deacon","email":"will.deacon@arm.com","date":"2019-02-28 11:58:08 UTC","message":"locking/futex: Allow low-level atomic operations to return -EAGAIN\n\nSome futex() operations, including FUTEX_WAKE_OP, require the kernel to\nperform an atomic read-modify-write of the futex word via the userspace\nmapping. These operations are implemented by each architecture in\narch_futex_atomic_op_inuser() and futex_atomic_cmpxchg_inatomic(), which\nare called in atomic context with the relevant hash bucket locks held.\n\nAlthough these routines may return -EFAULT in response to a page fault\ngenerated when accessing userspace, they are expected to succeed (i.e.\nreturn 0) in all other cases. This poses a problem for architectures\nthat do not provide bounded forward progress guarantees or fairness of\ncontended atomic operations and can lead to starvation in some cases.\n\nIn these problematic scenarios, we must return back to the core futex\ncode so that we can drop the hash bucket locks and reschedule if\nnecessary, much like we do in the case of a page fault.\n\nAllow architectures to return -EA","insertions":117,"deletions":71,"filepaths":{"kernel/futex.c":{"insertions":117,"deletions":71}}},"778e9a9c3e7193ea9f434f382947155ffb59c755":{"author":"Alexey Kuznetsov","email":"kuznet@ms2.inr.ac.ru","date":"2007-06-08 20:47:00 UTC","message":"pi-futex: fix exit races and locking problems\n\n1. New entries can be added to tsk->pi_state_list after task completed\n   exit_pi_state_list(). The result is memory leakage and deadlocks.\n\n2. handle_mm_fault() is called under spinlock. The result is obvious.\n\n3. results in self-inflicted deadlock inside glibc.\n   Sometimes futex_lock_pi returns -ESRCH, when it is not expected\n   and glibc enters to for(;;) sleep() to simulate deadlock. This problem\n   is quite obvious and I think the patch is right. Though it looks like\n   each \"if\" in futex_lock_pi() got some stupid special case \"else if\". :-)\n\n4. sometimes futex_lock_pi() returns -EDEADLK,\n   when nobody has the lock. The reason is also obvious (see comment\n   in the patch), but correct fix is far beyond my comprehension.\n   I guess someone already saw this, the chunk:\n\n                        if (rt_mutex_trylock(&q.pi_state->pi_mutex))\n                                ret = 0;\n\n   is obviously from the same opera. But it does not work","insertions":183,"deletions":111,"filepaths":{"include/linux/sched.h":{"insertions":1,"deletions":0},"kernel/exit.c":{"insertions":23,"deletions":1},"kernel/futex.c":{"insertions":159,"deletions":110}}},"d0725992c8a6fb63a16bc9e8b2a50094cc4db3cd":{"author":"Thomas Gleixner","email":"tglx@linutronix.de","date":"2009-06-11 21:15:43 UTC","message":"futex: Fix the write access fault problem for real\n\ncommit 64d1304a64 (futex: setup writeable mapping for futex ops which\nmodify user space data) did address only half of the problem of write\naccess faults.\n\nThe patch was made on two wrong assumptions:\n\n1) access_ok(VERIFY_WRITE,...) would actually check write access.\n\n   On x86 it does _NOT_. It's a pure address range check.\n\n2) a RW mapped region can not go away under us.\n\n   That's wrong as well. Nobody can prevent another thread to call\n   mprotect(PROT_READ) on that region where the futex resides. If that\n   call hits between the get_user_pages_fast() verification and the\n   actual write access in the atomic region we are toast again.\n\nThe solution is to not rely on access_ok and get_user() for any write\naccess related fault on private and shared futexes. Instead we need to\nfault it in with verification of write access.\n\nThere is no generic non destructive write mechanism which would fault\nthe user page in trough a #PF, but as we a","insertions":24,"deletions":21,"filepaths":{"kernel/futex.c":{"insertions":24,"deletions":21}}},"b98e762e3d71e893b221f871825dc64694cfb258":{"author":"Josef Bacik","email":"josef@toxicpanda.com","date":"2021-01-25 17:21:02 UTC","message":"nbd: freeze the queue while we're adding connections\n\nWhen setting up a device, we can krealloc the config->socks array to add\nnew sockets to the configuration.  However if we happen to get a IO\nrequest in at this point even though we aren't setup we could hit a UAF,\nas we deref config->socks without any locking, assuming that the\nconfiguration was setup already and that ->socks is safe to access it as\nwe have a reference on the configuration.\n\nBut there's nothing really preventing IO from occurring at this point of\nthe device setup, we don't want to incur the overhead of a lock to\naccess ->socks when it will never change while the device is running.\nTo fix this UAF scenario simply freeze the queue if we are adding\nsockets.  This will protect us from this particular case without adding\nany additional overhead for the normal running case.\n\nCc: stable@vger.kernel.org\nSigned-off-by: Josef Bacik <josef@toxicpanda.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>","insertions":8,"deletions":0,"filepaths":{"drivers/block/nbd.c":{"insertions":8,"deletions":0}}},"579dd91ab3a5446b148e7f179b6596b270dace46":{"author":"Zheng Bin","email":"zhengbin13@huawei.com","date":"2020-06-29 01:23:49 UTC","message":"nbd: Fix memory leak in nbd_add_socket\n\nWhen adding first socket to nbd, if nsock's allocation failed, the data\nstructure member \"config->socks\" was reallocated, but the data structure\nmember \"config->num_connections\" was not updated. A memory leak will occur\nthen because the function \"nbd_config_put\" will free \"config->socks\" only\nwhen \"config->num_connections\" is not zero.\n\nFixes: 03bf73c315ed (\"nbd: prevent memory leak\")\nReported-by: syzbot+934037347002901b8d2a@syzkaller.appspotmail.com\nSigned-off-by: Zheng Bin <zhengbin13@huawei.com>\nReviewed-by: Eric Biggers <ebiggers@google.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>","insertions":15,"deletions":10,"filepaths":{"drivers/block/nbd.c":{"insertions":15,"deletions":10}}},"9561a7ade0c205bc2ee035a2ac880478dcc1a024":{"author":"Josef Bacik","email":"jbacik@fb.com","date":"2016-11-22 19:04:40 UTC","message":"nbd: add multi-connection support\n\nNBD can become contended on its single connection.  We have to serialize all\nwrites and we can only process one read response at a time.  Fix this by\nallowing userspace to provide multiple connections to a single nbd device.  This\ncoupled with block-mq drastically increases performance in multi-process cases.\nThanks,\n\nSigned-off-by: Josef Bacik <jbacik@fb.com>\nSigned-off-by: Jens Axboe <axboe@fb.com>","insertions":243,"deletions":148,"filepaths":{"drivers/block/nbd.c":{"insertions":238,"deletions":144},"include/uapi/linux/nbd.h":{"insertions":5,"deletions":4}}},"9442b739207aab6b1053abf858a238e7642fbcd1":{"author":"Josef Bacik","email":"jbacik@fb.com","date":"2017-02-07 22:10:22 UTC","message":"nbd: cleanup ioctl handling\n\nBreak the ioctl handling out into helper functions, some of these things\nare getting pretty big and unwieldy.\n\nSigned-off-by: Josef Bacik <jbacik@fb.com>\nSigned-off-by: Jens Axboe <axboe@fb.com>","insertions":132,"deletions":137,"filepaths":{"drivers/block/nbd.c":{"insertions":132,"deletions":137}}},"23272a6754b81ff6503e09c743bb4ceeeab39997":{"author":"Markus Pargmann","email":"mpa@pengutronix.de","date":"2015-10-29 10:51:16 UTC","message":"nbd: Remove signal usage\n\nAs discussed on the mailing list, the usage of signals for timeout\nhandling has a lot of potential issues. The nbd driver used for some\ntime signals for timeouts. These signals where able to get the threads\nout of the blocking socket operations.\n\nThis patch removes all signal usage and uses a socket shutdown instead.\nThe socket descriptor itself is cleared later when the whole nbd device\nis closed.\n\nThe tasks_lock is removed as we do not depend on this anymore. Instead\na new lock for the socket is introduced so we can safely work with the\nsocket in the timeout handler outside of the two main threads.\n\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Christoph Hellwig <hch@infradead.org>\nSigned-off-by: Markus Pargmann <mpa@pengutronix.de>\nReviewed-by: Christoph Hellwig <hch@lst.de>","insertions":48,"deletions":78,"filepaths":{"drivers/block/nbd.c":{"insertions":48,"deletions":78}}},"e46c7287b1c27683a8e30ca825fb98e2b97f1099":{"author":"Josef Bacik","email":"josef@toxicpanda.com","date":"2017-04-06 21:02:00 UTC","message":"nbd: add a basic netlink interface\n\nThe existing ioctl interface for configuring NBD devices is a bit\ncumbersome and hard to extend.  The other problem is we leave a\nuserspace app sitting in it's syscall until the device disconnects,\nwhich is less than ideal.\n\nThis patch introduces a netlink interface for adding and disconnecting\nnbd devices.  This has the benefits of being easily extendable without\nbreaking older userspace applications, and allows us to configure a nbd\ndevice without leaving a userspace app sitting waiting for the device to\ndisconnect.\n\nWith this interface we also gain the ability to configure more devices\nthan are preallocated at insmod time.  We also have gained the ability\nto not specify a particular device and be provided one for us so that\nuserspace doesn't need to find a free device to configure.\n\nSigned-off-by: Josef Bacik <jbacik@fb.com>\nSigned-off-by: Jens Axboe <axboe@fb.com>","insertions":359,"deletions":26,"filepaths":{"drivers/block/nbd.c":{"insertions":290,"deletions":26},"include/uapi/linux/nbd-netlink.h":{"insertions":69,"deletions":0}}},"ec76a7b922e42df1437e39b44c564ba892676f0e":{"author":"Xiubo Li","email":"xiubli@redhat.com","date":"2019-09-17 11:56:05 UTC","message":"nbd: rename the runtime flags as NBD_RT_ prefixed\n\nPreparing for the destory when disconnecting crash fixing.\n\nReviewed-by: Josef Bacik <josef@toxicpanda.com>\nSigned-off-by: Xiubo Li <xiubli@redhat.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>","insertions":37,"deletions":37,"filepaths":{"drivers/block/nbd.c":{"insertions":37,"deletions":37}}},"799f9a38bc9f5551819fd118a82826df0a8525cf":{"author":"Josef Bacik","email":"josef@toxicpanda.com","date":"2017-04-06 21:02:02 UTC","message":"nbd: multicast dead link notifications\n\nProvide a mechanism to notify userspace that there's been a link problem\non a NBD device.  This will allow userspace to re-establish a connection\nand provide the new socket to the device without disrupting the device.\n\nSigned-off-by: Josef Bacik <jbacik@fb.com>\nSigned-off-by: Jens Axboe <axboe@fb.com>","insertions":81,"deletions":14,"filepaths":{"drivers/block/nbd.c":{"insertions":77,"deletions":12},"include/uapi/linux/nbd-netlink.h":{"insertions":4,"deletions":2}}},"5ea8d10802ec4c153a6e21eebaf412e2abd29736":{"author":"Josef Bacik","email":"josef@toxicpanda.com","date":"2017-04-06 21:01:58 UTC","message":"nbd: separate out the config information\n\nIn order to properly refcount the various aspects of a NBD device we\nneed to separate out the configuration elements of the nbd device.  The\nconfiguration of a NBD device has a different lifetime from the actual\ndevice, so it doesn't make sense to bundle these two concepts.  Add a\nconfig_refs to keep track of the configuration structure, that way we\ncan be sure that we never access it when we've torn down the device.\nAdd a new nbd_config structure to hold all of the transient\nconfiguration information.  Finally create this when we open the device\nso that it is in place when we start to configure the device.  This has\na nice side-effect of fixing a long standing problem where you could end\nup with a half-configured nbd device that needed to be \"disconnected\" in\norder to be usable again.  Now once we close our device the\nconfiguration will be discarded.\n\nSigned-off-by: Josef Bacik <jbacik@fb.com>\nSigned-off-by: Jens Axboe <axboe@fb.com>","insertions":263,"deletions":174,"filepaths":{"drivers/block/nbd.c":{"insertions":263,"deletions":174}}},"560bc4b39952ed77cdb0000992e9415b0ee89edb":{"author":"Josef Bacik","email":"josef@toxicpanda.com","date":"2017-04-06 21:02:04 UTC","message":"nbd: handle dead connections\n\nSometimes we like to upgrade our server without making all of our\nclients freak out and reconnect.  This patch provides a way to specify a\ndead connection timeout to allow us to pause all requests and wait for\nnew connections to be opened.  With this in place I can take down the\nnbd server for less than the dead connection timeout time and bring it\nback up and everything resumes gracefully.\n\nSigned-off-by: Josef Bacik <jbacik@fb.com>\nSigned-off-by: Jens Axboe <axboe@fb.com>","insertions":60,"deletions":4,"filepaths":{"drivers/block/nbd.c":{"insertions":59,"deletions":4},"include/uapi/linux/nbd-netlink.h":{"insertions":1,"deletions":0}}},"9183671af6dbf60a1219371d4ed73e23f43b49db":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-05-28 15:47:32 UTC","message":"bpf: Fix leakage under speculation on mispredicted branches\n\nThe verifier only enumerates valid control-flow paths and skips paths that\nare unreachable in the non-speculative domain. And so it can miss issues\nunder speculative execution on mispredicted branches.\n\nFor example, a type confusion has been demonstrated with the following\ncrafted program:\n\n  // r0 = pointer to a map array entry\n  // r6 = pointer to readable stack slot\n  // r9 = scalar controlled by attacker\n  1: r0 = *(u64 *)(r0) // cache miss\n  2: if r0 != 0x0 goto line 4\n  3: r6 = r9\n  4: if r0 != 0x1 goto line 6\n  5: r9 = *(u8 *)(r6)\n  6: // leak r9\n\nSince line 3 runs iff r0 == 0 and line 5 runs iff r0 == 1, the verifier\nconcludes that the pointer dereference on line 5 is safe. But: if the\nattacker trains both the branches to fall-through, such that the following\nis speculatively executed ...\n\n  r6 = r9\n  r9 = *(u8 *)(r6)\n  // leak r9\n\n... then the program will dereference an attacker-controlled value and could\nleak its co","insertions":40,"deletions":4,"filepaths":{"kernel/bpf/verifier.c":{"insertions":40,"deletions":4}}},"17a5267067f3c372fec9ffb798d6eaba6b5e6a4c":{"author":"Alexei Starovoitov","email":"ast@plumgrid.com","date":"2014-09-26 07:17:06 UTC","message":"bpf: verifier (add verifier core)\n\nThis patch adds verifier core which simulates execution of every insn and\nrecords the state of registers and program stack. Every branch instruction seen\nduring simulation is pushed into state stack. When verifier reaches BPF_EXIT,\nit pops the state from the stack and continues until it reaches BPF_EXIT again.\nFor program:\n1: bpf_mov r1, xxx\n2: if (r1 == 0) goto 5\n3: bpf_mov r0, 1\n4: goto 6\n5: bpf_mov r0, 2\n6: bpf_exit\nThe verifier will walk insns: 1, 2, 3, 4, 6\nthen it will pop the state recorded at insn#2 and will continue: 5, 6\n\nThis way it walks all possible paths through the program and checks all\npossible values of registers. While doing so, it checks for:\n- invalid instructions\n- uninitialized register access\n- uninitialized stack access\n- misaligned stack access\n- out of range stack access\n- invalid calling convention\n- instruction encoding is not using reserved fields\n\nKernel subsystem configures the verifier with two callbacks:\n\n- bool (*is_v","insertions":1121,"deletions":1,"filepaths":{"include/linux/bpf.h":{"insertions":47,"deletions":0},"kernel/bpf/verifier.c":{"insertions":1074,"deletions":1}}},"b5dc0163d8fd78e64a7e21f309cf932fda34353e":{"author":"Alexei Starovoitov","email":"ast@kernel.org","date":"2019-06-15 19:12:25 UTC","message":"bpf: precise scalar_value tracking\n\nIntroduce precision tracking logic that\nhelps cilium programs the most:\n                  old clang  old clang    new clang  new clang\n                          with all patches         with all patches\nbpf_lb-DLB_L3.o      1838     2283         1923       1863\nbpf_lb-DLB_L4.o      3218     2657         3077       2468\nbpf_lb-DUNKNOWN.o    1064     545          1062       544\nbpf_lxc-DDROP_ALL.o  26935    23045        166729     22629\nbpf_lxc-DUNKNOWN.o   34439    35240        174607     28805\nbpf_netdev.o         9721     8753         8407       6801\nbpf_overlay.o        6184     7901         5420       4754\nbpf_lxc_jit.o        39389    50925        39389      50925\n\nConsider code:\n654: (85) call bpf_get_hash_recalc#34\n655: (bf) r7 = r0\n656: (15) if r8 == 0x0 goto pc+29\n657: (bf) r2 = r10\n658: (07) r2 += -48\n659: (18) r1 = 0xffff8881e41e1b00\n661: (85) call bpf_map_lookup_elem#1\n662: (15) if r0 == 0x0 goto pc+23\n663: (69) r1 = *(u16 *)(r0 +0)\n664: (1","insertions":498,"deletions":11,"filepaths":{"include/linux/bpf_verifier.h":{"insertions":18,"deletions":0},"kernel/bpf/verifier.c":{"insertions":480,"deletions":11}}},"4f7b3e82589e0de723780198ec7983e427144c0a":{"author":"Alexei Starovoitov","email":"ast@kernel.org","date":"2018-12-04 06:46:05 UTC","message":"bpf: improve verifier branch analysis\n\npathological bpf programs may try to force verifier to explode in\nthe number of branch states:\n  20: (d5) if r1 s<= 0x24000028 goto pc+0\n  21: (b5) if r0 <= 0xe1fa20 goto pc+2\n  22: (d5) if r1 s<= 0x7e goto pc+0\n  23: (b5) if r0 <= 0xe880e000 goto pc+0\n  24: (c5) if r0 s< 0x2100ecf4 goto pc+0\n  25: (d5) if r1 s<= 0xe880e000 goto pc+1\n  26: (c5) if r0 s< 0xf4041810 goto pc+0\n  27: (d5) if r1 s<= 0x1e007e goto pc+0\n  28: (b5) if r0 <= 0xe86be000 goto pc+0\n  29: (07) r0 += 16614\n  30: (c5) if r0 s< 0x6d0020da goto pc+0\n  31: (35) if r0 >= 0x2100ecf4 goto pc+0\n\nTeach verifier to recognize always taken and always not taken branches.\nThis analysis is already done for == and != comparison.\nExpand it to all other branches.\n\nIt also helps real bpf programs to be verified faster:\n                       before  after\nbpf_lb-DLB_L3.o         2003    1940\nbpf_lb-DLB_L4.o         3173    3089\nbpf_lb-DUNKNOWN.o       1080    1065\nbpf_lxc-DDROP_ALL.o     29584   2","insertions":82,"deletions":15,"filepaths":{"kernel/bpf/verifier.c":{"insertions":80,"deletions":13},"tools/testing/selftests/bpf/test_verifier.c":{"insertions":2,"deletions":2}}},"3d0220f6861d713213b015b582e9f21e5b28d2e0":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-05-21 10:17:36 UTC","message":"bpf: Wrap aux data inside bpf_sanitize_info container\n\nAdd a container structure struct bpf_sanitize_info which holds\nthe current aux info, and update call-sites to sanitize_ptr_alu()\nto pass it in. This is needed for passing in additional state\nlater on.\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: Piotr Krysiuk <piotras@gmail.com>\nAcked-by: Alexei Starovoitov <ast@kernel.org>","insertions":11,"deletions":7,"filepaths":{"kernel/bpf/verifier.c":{"insertions":11,"deletions":7}}},"bb01a1bba579b4b1c5566af24d95f1767859771e":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-05-21 10:19:22 UTC","message":"bpf: Fix mask direction swap upon off reg sign change\n\nMasking direction as indicated via mask_to_left is considered to be\ncalculated once and then used to derive pointer limits. Thus, this\nneeds to be placed into bpf_sanitize_info instead so we can pass it\nto sanitize_ptr_alu() call after the pointer move. Piotr noticed a\ncorner case where the off reg causes masking direction change which\nthen results in an incorrect final aux->alu_limit.\n\nFixes: 7fedb63a8307 (\"bpf: Tighten speculative pointer arithmetic mask\")\nReported-by: Piotr Krysiuk <piotras@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: Piotr Krysiuk <piotras@gmail.com>\nAcked-by: Alexei Starovoitov <ast@kernel.org>","insertions":12,"deletions":10,"filepaths":{"kernel/bpf/verifier.c":{"insertions":12,"deletions":10}}},"086ff84617185393a0bbf25830c4f36412a7d3f4":{"author":"Linus Torvalds","email":"torvalds@linux-foundation.org","date":"2022-07-08 18:03:26 UTC","message":" fbdev fixes and updates for kernel v5.19-rc6:\n \n fbcon now prevents switching to screen resolutions which are smaller\n than the font size, and prevents enabling a font which is bigger than\n the current screen resolution. This fixes vmalloc-out-of-bounds accesses\n found by KASAN.\n \n Guiling Deng fixed a bug where the centered fbdev logo wasn't displayed\n correctly if the screen size matched the logo size.\n \n Hsin-Yi Wang provided a patch to include errno.h to fix build when\n CONFIG_OF isn't enabled.\n -----BEGIN PGP SIGNATURE-----\n \n iHUEABYKAB0WIQS86RI+GtKfB8BJu973ErUQojoPXwUCYsfdCgAKCRD3ErUQojoP\n XxhvAP9HYH0XcfHGEIQ3YSyFRY4JpyLb0TcTD7mnrYwPgAw+KAD7Bw9EE7WhGZLC\n 7iuDn30/mdCFqiz3IuTjoRKYuG2ceg8=\n =yrqq\n -----END PGP SIGNATURE-----\n\nMerge tag 'for-5.19/fbdev-3' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/linux-fbdev\n\nPull fbdev fixes from Helge Deller:\n\n - fbcon now prevents switching to screen resolutions which are smaller\n   than the font size, and prevents enabling a font w","insertions":53,"deletions":2,"filepaths":{"drivers/video/fbdev/core/fbcon.c":{"insertions":33,"deletions":0},"drivers/video/fbdev/core/fbmem.c":{"insertions":14,"deletions":2},"include/linux/fbcon.h":{"insertions":4,"deletions":0},"include/video/of_display_timing.h":{"insertions":2,"deletions":0}}},"2d2699d984924890f6dac8cf51c3b6311f56816c":{"author":"Antonino A. Daplas","email":"adaplas@gmail.com","date":"2007-05-08 07:39:11 UTC","message":"fbcon: font setting should check limitation of driver\n\nfbcon_set_font() will now check if the new font dimensions can be drawn by the\ndriver (by checking pixmap.blit_x and blit_y).  Similarly, add 2 new\nparameters to get_default_font(), font_w and font_h, to further aid in the\nfont selection process.\n\nSigned-off-by: Antonino Daplas <adaplas@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":26,"deletions":6,"filepaths":{"drivers/video/console/fbcon.c":{"insertions":14,"deletions":3},"drivers/video/console/fonts.c":{"insertions":9,"deletions":1},"drivers/video/console/sticore.c":{"insertions":1,"deletions":1},"include/linux/font.h":{"insertions":2,"deletions":1}}},"9e1467002630065ed86c65ea28bfc9194fff6f0e":{"author":"Daniel Vetter","email":"daniel.vetter@ffwll.ch","date":"2019-05-28 09:02:59 UTC","message":"fbcon: replace FB_EVENT_MODE_CHANGE/_ALL with direct calls\n\nCreate a new wrapper function for this, feels like there's some\nrefactoring room here between the two modes.\n\nv2: backlight notifier is also interested in the mode change event,\nit calls lcd->set_mode, of which there are 3 implementations. Thanks\nto Maarten for spotting this. So we keep that. We can ditch the differentiation\nbetween mode change and all mode changes (because backlight notifier\ndoesn't care), and we can drop the FBINFO_MISC_USEREVENT stuff too,\nbecause that's just to prevent recursion between fbmem.c and fbcon.c.\n\nWhile at it flatten the control flow a bit.\n\nv3: Need to add a static inline to the dummy function.\n\nv4: Add missing #include <fbcon.h> to sh_mob (Sam).\n\nCc: Sam Ravnborg <sam@ravnborg.org>\nSigned-off-by: Daniel Vetter <daniel.vetter@intel.com>\nReviewed-by: Sam Ravnborg <sam@ravnborg.org>\nReviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>\nAcked-by: Daniel Thompson <daniel.thompson@linaro","insertions":23,"deletions":30,"filepaths":{"drivers/video/backlight/lcd.c":{"insertions":0,"deletions":1},"drivers/video/fbdev/core/fbcon.c":{"insertions":9,"deletions":6},"drivers/video/fbdev/core/fbmem.c":{"insertions":10,"deletions":11},"drivers/video/fbdev/sh_mobile_lcdcfb.c":{"insertions":2,"deletions":10},"include/linux/fb.h":{"insertions":0,"deletions":2},"include/linux/fbcon.h":{"insertions":2,"deletions":0}}},"2443091408c267f84b40025183490486b79ee2cd":{"author":"Daniel Vetter","email":"daniel.vetter@ffwll.ch","date":"2019-06-19 08:11:15 UTC","message":"fbcon: Export fbcon_update_vcs\n\nI failed to spot this while compile-testing. Oops.\n\nReported-by: kbuild test robot <lkp@intel.com>\nFixes: 9e1467002630 (\"fbcon: replace FB_EVENT_MODE_CHANGE/_ALL with direct calls\")\nCc: Sam Ravnborg <sam@ravnborg.org>\nCc: Daniel Vetter <daniel.vetter@intel.com>\nCc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>\nCc: Daniel Thompson <daniel.thompson@linaro.org>\nCc: Lee Jones <lee.jones@linaro.org>\nCc: Jingoo Han <jingoohan1@gmail.com>\nCc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>\nCc: Daniel Vetter <daniel.vetter@ffwll.ch>\nCc: Hans de Goede <hdegoede@redhat.com>\nCc: Yisheng Xie <ysxie@foxmail.com>\nCc: \"Michał Mirosław\" <mirq-linux@rere.qmqm.pl>\nCc: Peter Rosin <peda@axentia.se>\nCc: Mikulas Patocka <mpatocka@redhat.com>\nCc: linux-fbdev@vger.kernel.org\nCc: Gerd Hoffmann <kraxel@redhat.com>\nCc: Geert Uytterhoeven <geert+renesas@glider.be>\nCc: Lukas Wunner <lukas@wunner.de>\nCc: dri-devel@lists.freedesktop.org\nSigned-off-by: Daniel Vetter <danie","insertions":1,"deletions":0,"filepaths":{"drivers/video/fbdev/core/fbcon.c":{"insertions":1,"deletions":0}}},"13ff178ccd6d3b8074c542a911300b79c4eec255":{"author":"Daniel Vetter","email":"daniel.vetter@ffwll.ch","date":"2019-05-28 09:02:53 UTC","message":"fbcon: Call fbcon_mode_deleted/new_modelist directly\n\nI'm not entirely clear on what new_modelist actually does, it seems\nexclusively for a sysfs interface. Which in the end does amount to a\nnormal fb_set_par to check the mode, but then takes a different path\nin both fbmem.c and fbcon.c.\n\nI have no idea why these 2 paths are different, but then I also don't\nreally want to find out. So just do the simple conversion to a direct\nfunction call.\n\nv2: static inline for the dummy versions, I forgot.\n\nSigned-off-by: Daniel Vetter <daniel.vetter@intel.com>\nReviewed-by: Sam Ravnborg <sam@ravnborg.org>\nReviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>\nCc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>\nCc: Daniel Vetter <daniel.vetter@ffwll.ch>\nCc: Hans de Goede <hdegoede@redhat.com>\nCc: Mikulas Patocka <mpatocka@redhat.com>\nCc: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>\nCc: Kees Cook <keescook@chromium.org>\nCc: Peter Rosin <peda@axentia.se>\nCc: Yisheng Xie <ysxie@foxm","insertions":16,"deletions":31,"filepaths":{"drivers/video/fbdev/core/fbcon.c":{"insertions":3,"deletions":11},"drivers/video/fbdev/core/fbmem.c":{"insertions":7,"deletions":15},"include/linux/fb.h":{"insertions":0,"deletions":5},"include/linux/fbcon.h":{"insertions":6,"deletions":0}}},"c428f35adf0faac11e0cceb7dadf3b29055d7d49":{"author":"Daniel Vetter","email":"daniel.vetter@ffwll.ch","date":"2019-05-28 09:02:58 UTC","message":"fb: Flatten control flow in fb_set_var\n\nInstead of wiring almost everything down to the very last line using\ngoto soup (but not consistently, where would the fun be otherwise)\ndrop out early when checks fail. This allows us to flatten the huge\nindent levels to just 1.\n\nAside: If a driver doesn't set ->fb_check_var, then FB_ACTIVATE_NOW\ndoes nothing. This bug exists ever since this code was extracted as a\ncommon helper in 2002, hence I decided against fixing it. Everyone\njust better have a fb_check_var to make sure things work correctly.\n\nSigned-off-by: Daniel Vetter <daniel.vetter@intel.com>\nReviewed-by: Sam Ravnborg <sam@ravnborg.org>\nReviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>\nCc: Daniel Vetter <daniel.vetter@ffwll.ch>\nCc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>\nCc: \"Michał Mirosław\" <mirq-linux@rere.qmqm.pl>\nCc: Peter Rosin <peda@axentia.se>\nCc: Hans de Goede <hdegoede@redhat.com>\nCc: Mikulas Patocka <mpatocka@redhat.com>\nLink: https://patchwork.fr","insertions":63,"deletions":63,"filepaths":{"drivers/video/fbdev/core/fbmem.c":{"insertions":63,"deletions":63}}},"3d8b1933eb1c3c94ef8667996dbff6994d5d552f":{"author":"Peter Rosin","email":"peda@axentia.se","date":"2018-12-20 18:13:08 UTC","message":"fbdev: fbmem: add config option to center the bootup logo\n\nIf there are extra logos (CONFIG_FB_LOGO_EXTRA) the heights of these\nextra logos are not considered when centering the first logo vertically.\n\nSigned-off-by: Peter Rosin <peda@axentia.se>\nSigned-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>","insertions":33,"deletions":1,"filepaths":{"drivers/video/fbdev/core/fbmem.c":{"insertions":24,"deletions":1},"drivers/video/logo/Kconfig":{"insertions":9,"deletions":0}}},"b1e7223f28b4ed5073d2029a3597bf514ff514f2":{"author":"Antonino A. Daplas","email":"adaplas@gmail.com","date":"2007-05-08 07:39:52 UTC","message":"fbdev: clean up exit patch of fb_set_var\n\nClean up exit patch of fb_set_var():\n\n- consolidate all return values into a single local variable\n- ensure that return values are valid error codes\n- fix fb_set_var() returning success when fb_check_caps() failed\n\nSigned-off-by: Antonino Daplas <adaplas@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":15,"deletions":14,"filepaths":{"drivers/video/fbmem.c":{"insertions":15,"deletions":14}}},"e53677113e32e6f118e31b8391a2eab7ee52c0a7":{"author":"Alan Cox","email":"alan@lxorguk.ukuu.org.uk","date":"2008-10-19 03:27:51 UTC","message":"fb: push down the BKL in the ioctl handler\n\nFramebuffer is heavily BKL dependant at the moment so just wrap the ioctl\nhandler in the driver as we push down.\n\n[akpm@linux-foundation.org: coding-style fixes]\nSigned-off-by: Alan Cox <alan@redhat.com>\nCc: Krzysztof Helt <krzysztof.h1@poczta.fm>\nCc: \"Antonino A. Daplas\" <adaplas@pol.net>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":86,"deletions":55,"filepaths":{"drivers/video/fbmem.c":{"insertions":86,"deletions":55}}},"0526c2239ad8ceef98652fe8e059044c24c62ea7":{"author":"Daniel Vetter","email":"daniel.vetter@ffwll.ch","date":"2019-05-28 09:02:54 UTC","message":"fbdev: Call fbcon_get_requirement directly\n\nPretty simple case really.\n\nv2: Forgot to remove a break;\n\nv3: Add static inline to the dummy versions.\n\nSigned-off-by: Daniel Vetter <daniel.vetter@intel.com>\nReviewed-by: Sam Ravnborg <sam@ravnborg.org>\nReviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>\nCc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>\nCc: Daniel Vetter <daniel.vetter@ffwll.ch>\nCc: Hans de Goede <hdegoede@redhat.com>\nCc: \"Steven Rostedt (VMware)\" <rostedt@goodmis.org>\nCc: Prarit Bhargava <prarit@redhat.com>\nCc: Kees Cook <keescook@chromium.org>\nCc: Yisheng Xie <ysxie@foxmail.com>\nCc: \"Michał Mirosław\" <mirq-linux@rere.qmqm.pl>\nCc: Peter Rosin <peda@axentia.se>\nCc: Mikulas Patocka <mpatocka@redhat.com>\nCc: linux-fbdev@vger.kernel.org\nLink: https://patchwork.freedesktop.org/patch/msgid/20190528090304.9388-24-daniel.vetter@ffwll.ch","insertions":7,"deletions":13,"filepaths":{"drivers/video/fbdev/core/fbcon.c":{"insertions":2,"deletions":7},"drivers/video/fbdev/core/fbmem.c":{"insertions":1,"deletions":4},"include/linux/fb.h":{"insertions":0,"deletions":2},"include/linux/fbcon.h":{"insertions":4,"deletions":0}}},"7a625549ea8c14be70bc7cfaf30215401bba6da0":{"author":"Daniel Vetter","email":"daniel.vetter@ffwll.ch","date":"2019-05-28 09:02:55 UTC","message":"Revert \"backlight/fbcon: Add FB_EVENT_CONBLANK\"\n\nThis reverts commit 994efacdf9a087b52f71e620b58dfa526b0cf928.\n\nThe justification is that if hw blanking fails (i.e. fbops->fb_blank)\nfails, then we still want to shut down the backlight. Which is exactly\n_not_ what fb_blank() does and so rather inconsistent if we end up\nwith different behaviour between fbcon and direct fbdev usage. Given\nthat the entire notifier maze is getting in the way anyway I figured\nit's simplest to revert this not well justified commit.\n\nv2: Add static inline to the dummy version.\n\nCc: Richard Purdie <rpurdie@rpsys.net>\nSigned-off-by: Daniel Vetter <daniel.vetter@intel.com>\nReviewed-by: Sam Ravnborg <sam@ravnborg.org>\nReviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>\nAcked-by: Daniel Thompson <daniel.thompson@linaro.org>\nCc: Lee Jones <lee.jones@linaro.org>\nCc: Daniel Thompson <daniel.thompson@linaro.org>\nCc: Jingoo Han <jingoohan1@gmail.com>\nCc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>","insertions":6,"deletions":17,"filepaths":{"drivers/video/backlight/backlight.c":{"insertions":1,"deletions":1},"drivers/video/fbdev/core/fbcon.c":{"insertions":1,"deletions":13},"drivers/video/fbdev/core/fbmem.c":{"insertions":1,"deletions":0},"include/linux/fb.h":{"insertions":1,"deletions":3},"include/linux/fbcon.h":{"insertions":2,"deletions":0}}},"1cd51b5d200dec292577a4656803d8aeff54ad51":{"author":"Daniel Vetter","email":"daniel.vetter@ffwll.ch","date":"2019-05-28 09:03:00 UTC","message":"vgaswitcheroo: call fbcon_remap_all directly\n\nWhile at it, clean up the interface a bit and push the console locking\ninto fbcon.c.\n\nv2: Remove now outdated comment (Lukas).\n\nv3: Forgot to add static inline to the dummy function.\n\nAcked-by: Lukas Wunner <lukas@wunner.de>\nSigned-off-by: Daniel Vetter <daniel.vetter@intel.com>\nReviewed-by: Sam Ravnborg <sam@ravnborg.org>\nReviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>\nCc: Lukas Wunner <lukas@wunner.de>\nCc: David Airlie <airlied@linux.ie>\nCc: Daniel Vetter <daniel@ffwll.ch>\nCc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>\nCc: Maxime Ripard <maxime.ripard@bootlin.com>\nCc: Sean Paul <sean@poorly.run>\nCc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>\nCc: Hans de Goede <hdegoede@redhat.com>\nCc: Yisheng Xie <ysxie@foxmail.com>\nCc: linux-fbdev@vger.kernel.org\nLink: https://patchwork.freedesktop.org/patch/msgid/20190528090304.9388-30-daniel.vetter@ffwll.ch","insertions":10,"deletions":19,"filepaths":{"drivers/gpu/vga/vga_switcheroo.c":{"insertions":3,"deletions":8},"drivers/video/fbdev/core/fbcon.c":{"insertions":5,"deletions":9},"include/linux/fb.h":{"insertions":0,"deletions":2},"include/linux/fbcon.h":{"insertions":2,"deletions":0}}},"fe2d70d6f6ff038c20705c34695bd34ac072af14":{"author":"Daniel Vetter","email":"daniel.vetter@ffwll.ch","date":"2019-05-28 09:03:01 UTC","message":"fbcon: Call con2fb_map functions directly\n\nThese are actually fbcon ioctls which just happen to be exposed\nthrough /dev/fb*. They completely ignore which fb_info they're called\non, and I think the userspace tool even hardcodes to /dev/fb0.\n\nHence just forward the entire thing to fbcon.c wholesale.\n\nNote that this patch drops the fb_lock/unlock on the set side. Since\nthe ioctl can operate on any fb (as passed in through\ncon2fb.framebuffer) this is bogus. Also note that fbcon.c in general\nnever calls fb_lock on anything, so this has been badly broken\nalready.\n\nWith this the last user of the fbcon notifier callback is gone, and we\ncan garbage collect that too.\n\nv2: add missing uaccess.h include (alpha fails to compile otherwise),\nreported by kbuild.\n\nv3: Remember to also drop the #defines (Maarten)\n\nv4: Add the static inline to dummy functions.\n\nSigned-off-by: Daniel Vetter <daniel.vetter@intel.com>\nReviewed-by: Sam Ravnborg <sam@ravnborg.org>\nReviewed-by: Maarten Lankhorst <maarten.lankho","insertions":42,"deletions":59,"filepaths":{"drivers/video/fbdev/core/fbcon.c":{"insertions":36,"deletions":23},"drivers/video/fbdev/core/fbmem.c":{"insertions":2,"deletions":32},"include/linux/fb.h":{"insertions":0,"deletions":4},"include/linux/fbcon.h":{"insertions":4,"deletions":0}}},"cc3f414cf2e404130584b63d373161ba6fd24bc2":{"author":"Steffen Trumtrar","email":"s.trumtrar@pengutronix.de","date":"2012-10-04 13:32:52 UTC","message":"video: add of helper for display timings/videomode\n\nThis adds support for reading display timings from DT into a struct\ndisplay_timings. The of_display_timing implementation supports multiple\nsubnodes. All children are read into an array, that can be queried.\n\nIf no native mode is specified, the first subnode will be used.\n\nFor cases where the graphics driver knows there can be only one\nmode description or where the driver only supports one mode, a helper\nfunction of_get_videomode is added, that gets a struct videomode from DT.\n\nSigned-off-by: Steffen Trumtrar <s.trumtrar@pengutronix.de>\nSigned-off-by: Philipp Zabel <p.zabel@pengutronix.de>\nAcked-by: Stephen Warren <swarren@nvidia.com>\nReviewed-by: Thierry Reding <thierry.reding@avionic-design.de>\nAcked-by: Thierry Reding <thierry.reding@avionic-design.de>\nTested-by: Thierry Reding <thierry.reding@avionic-design.de>\nTested-by: Philipp Zabel <p.zabel@pengutronix.de>\nReviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>\nAcked-","insertions":457,"deletions":0,"filepaths":{"Documentation/devicetree/bindings/video/display-timing.txt":{"insertions":109,"deletions":0},"drivers/video/Kconfig":{"insertions":15,"deletions":0},"drivers/video/Makefile":{"insertions":2,"deletions":0},"drivers/video/of_display_timing.c":{"insertions":239,"deletions":0},"drivers/video/of_videomode.c":{"insertions":54,"deletions":0},"include/video/of_display_timing.h":{"insertions":20,"deletions":0},"include/video/of_videomode.h":{"insertions":18,"deletions":0}}},"d22cd3016964afdacf27a0d63b65a90393b2e66a":{"author":"Fabio Estevam","email":"fabio.estevam@freescale.com","date":"2013-06-26 13:34:25 UTC","message":"video: of_display_timing.h: Declare 'display_timing'\n\nCommit ffa3fd21de (\"videomode: implement public of_get_display_timing()\") causes\nthe following build warning:\n\ninclude/video/of_display_timing.h:18:10: warning: 'struct display_timing' declared inside parameter list [enabled by default]\ninclude/video/of_display_timing.h:18:10: warning: its scope is only this definition or declaration, which is probably not what you want [enabled by default]\n\nDeclare 'display_timing' to avoid the build warning.\n\nSigned-off-by: Fabio Estevam <fabio.estevam@freescale.com>\nSigned-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>","insertions":1,"deletions":0,"filepaths":{"include/video/of_display_timing.h":{"insertions":1,"deletions":0}}},"8cae8cd89f05f6de223d63e6d15e31c8ba9cf53b":{"author":"Eric Sandeen","email":"sandeen@redhat.com","date":"2021-07-13 15:49:23 UTC","message":"seq_file: disallow extremely large seq buffer allocations\n\nThere is no reasonable need for a buffer larger than this, and it avoids\nint overflow pitfalls.\n\nFixes: 058504edd026 (\"fs/seq_file: fallback to vmalloc allocation\")\nSuggested-by: Al Viro <viro@zeniv.linux.org.uk>\nReported-by: Qualys Security Advisory <qsa@qualys.com>\nSigned-off-by: Eric Sandeen <sandeen@redhat.com>\nCc: stable@kernel.org\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":3,"deletions":0,"filepaths":{"fs/seq_file.c":{"insertions":3,"deletions":0}}},"058504edd02667eef8fac9be27ab3ea74332e9b4":{"author":"Heiko Carstens","email":"heiko.carstens@de.ibm.com","date":"2014-07-02 22:22:37 UTC","message":"fs/seq_file: fallback to vmalloc allocation\n\nThere are a couple of seq_files which use the single_open() interface.\nThis interface requires that the whole output must fit into a single\nbuffer.\n\nE.g.  for /proc/stat allocation failures have been observed because an\norder-4 memory allocation failed due to memory fragmentation.  In such\nsituations reading /proc/stat is not possible anymore.\n\nTherefore change the seq_file code to fallback to vmalloc allocations\nwhich will usually result in a couple of order-0 allocations and hence\nalso work if memory is fragmented.\n\nFor reference a call trace where reading from /proc/stat failed:\n\n  sadc: page allocation failure: order:4, mode:0x1040d0\n  CPU: 1 PID: 192063 Comm: sadc Not tainted 3.10.0-123.el7.s390x #1\n  [...]\n  Call Trace:\n    show_stack+0x6c/0xe8\n    warn_alloc_failed+0xd6/0x138\n    __alloc_pages_nodemask+0x9da/0xb68\n    __get_free_pages+0x2e/0x58\n    kmalloc_order_trace+0x44/0xc0\n    stat_open+0x5a/0xd8\n    proc_reg_open+0x8a/0x140\n    d","insertions":21,"deletions":9,"filepaths":{"fs/seq_file.c":{"insertions":21,"deletions":9}}},"e075f59152890ffd7e3d704afc997dd686c8a781":{"author":"KAMEZAWA Hiroyuki","email":"kamezawa.hiroyu@jp.fujitsu.com","date":"2012-03-23 22:02:55 UTC","message":"seq_file: add seq_set_overflow(), seq_overflow()\n\nIt is undocumented but a seq_file's overflow state is indicated by\nm->count == m->size.  Add seq_set_overflow() and seq_overflow() to\nset/check overflow status explicitly.\n\nBased on an idea from Eric Dumazet.\n\n[akpm@linux-foundation.org: tweak code comment]\nSigned-off-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>\nCc: Eric Dumazet <eric.dumazet@gmail.com>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":26,"deletions":10,"filepaths":{"fs/seq_file.c":{"insertions":26,"deletions":10}}},"d64d01a155f84850f7dc9795f464e3df9a5ddb10":{"author":"Alexey Dobriyan","email":"adobriyan@gmail.com","date":"2018-04-10 23:34:49 UTC","message":"seq_file: account everything to kmemcg\n\nAll it takes to open a file and read 1 byte from it.\n\nseq_file will be allocated along with any private allocations, and more\nimportantly seq file buffer which is 1 page by default.\n\nLink: http://lkml.kernel.org/r/20180310085252.GB17121@avx2\nSigned-off-by: Alexey Dobriyan <adobriyan@gmail.com>\nReviewed-by: Andrew Morton <akpm@linux-foundation.org>\nAcked-by: Michal Hocko <mhocko@suse.com>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nCc: Glauber Costa <glommer@gmail.com>\nCc: Vladimir Davydov <vdavydov.dev@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":4,"deletions":4,"filepaths":{"fs/seq_file.c":{"insertions":4,"deletions":4}}},"2039f26f3aca5b0e419b98f65dd36481337b86ee":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-07-13 08:18:31 UTC","message":"bpf: Fix leakage due to insufficient speculative store bypass mitigation\n\nSpectre v4 gadgets make use of memory disambiguation, which is a set of\ntechniques that execute memory access instructions, that is, loads and\nstores, out of program order; Intel's optimization manual, section 2.4.4.5:\n\n  A load instruction micro-op may depend on a preceding store. Many\n  microarchitectures block loads until all preceding store addresses are\n  known. The memory disambiguator predicts which loads will not depend on\n  any previous stores. When the disambiguator predicts that a load does\n  not have such a dependency, the load takes its data from the L1 data\n  cache. Eventually, the prediction is verified. If an actual conflict is\n  detected, the load and all succeeding instructions are re-executed.\n\naf86ca4e3088 (\"bpf: Prevent memory disambiguation attack\") tried to mitigate\nthis attack by sanitizing the memory locations through preemptive \"fast\"\n(low latency) stores of zero prior to the actual \"slow","insertions":33,"deletions":56,"filepaths":{"include/linux/bpf_verifier.h":{"insertions":1,"deletions":1},"kernel/bpf/verifier.c":{"insertions":32,"deletions":55}}},"f5e81d1117501546b7be050c5fbafa6efd2c722c":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-07-13 08:18:31 UTC","message":"bpf: Introduce BPF nospec instruction for mitigating Spectre v4\n\nIn case of JITs, each of the JIT backends compiles the BPF nospec instruction\n/either/ to a machine instruction which emits a speculation barrier /or/ to\n/no/ machine instruction in case the underlying architecture is not affected\nby Speculative Store Bypass or has different mitigations in place already.\n\nThis covers both x86 and (implicitly) arm64: In case of x86, we use 'lfence'\ninstruction for mitigation. In case of arm64, we rely on the firmware mitigation\nas controlled via the ssbd kernel parameter. Whenever the mitigation is enabled,\nit works for all of the kernel code with no need to provide any additional\ninstructions here (hence only comment in arm64 JIT). Other archs can follow\nas needed. The BPF nospec instruction is specifically targeting Spectre v4\nsince i) we don't use a serialization barrier for the Spectre v1 case, and\nii) mitigation instructions for v1 and v4 might be different on some archs.\n\nThe BPF nosp","insertions":102,"deletions":8,"filepaths":{"arch/arm/net/bpf_jit_32.c":{"insertions":3,"deletions":0},"arch/arm64/net/bpf_jit_comp.c":{"insertions":13,"deletions":0},"arch/mips/net/ebpf_jit.c":{"insertions":3,"deletions":0},"arch/powerpc/net/bpf_jit_comp32.c":{"insertions":6,"deletions":0},"arch/powerpc/net/bpf_jit_comp64.c":{"insertions":6,"deletions":0},"arch/riscv/net/bpf_jit_comp32.c":{"insertions":4,"deletions":0},"arch/riscv/net/bpf_jit_comp64.c":{"insertions":4,"deletions":0},"arch/s390/net/bpf_jit_comp.c":{"insertions":5,"deletions":0},"arch/sparc/net/bpf_jit_comp_64.c":{"insertions":3,"deletions":0},"arch/x86/net/bpf_jit_comp.c":{"insertions":7,"deletions":0},"arch/x86/net/bpf_jit_comp32.c":{"insertions":6,"deletions":0},"include/linux/filter.h":{"insertions":15,"deletions":0},"kernel/bpf/core.c":{"insertions":18,"deletions":1},"kernel/bpf/disasm.c":{"insertions":9,"deletions":7}}},"51c39bb1d5d105a02e29aa7960f0a395086e6342":{"author":"Alexei Starovoitov","email":"ast@kernel.org","date":"2020-01-10 06:41:20 UTC","message":"bpf: Introduce function-by-function verification\n\nNew llvm and old llvm with libbpf help produce BTF that distinguish global and\nstatic functions. Unlike arguments of static function the arguments of global\nfunctions cannot be removed or optimized away by llvm. The compiler has to use\nexactly the arguments specified in a function prototype. The argument type\ninformation allows the verifier validate each global function independently.\nFor now only supported argument types are pointer to context and scalars. In\nthe future pointers to structures, sizes, pointer to packet data can be\nsupported as well. Consider the following example:\n\nstatic int f1(int ...)\n{\n  ...\n}\n\nint f3(int b);\n\nint f2(int a)\n{\n  f1(a) + f3(a);\n}\n\nint f3(int b)\n{\n  ...\n}\n\nint main(...)\n{\n  f1(...) + f2(...) + f3(...);\n}\n\nThe verifier will start its safety checks from the first global function f2().\nIt will recursively descend into f1() because it's static. Then it will check\nthat arguments match for the f3() invocation","insertions":366,"deletions":84,"filepaths":{"include/linux/bpf.h":{"insertions":6,"deletions":1},"include/linux/bpf_verifier.h":{"insertions":8,"deletions":2},"include/uapi/linux/btf.h":{"insertions":6,"deletions":0},"kernel/bpf/btf.c":{"insertions":144,"deletions":31},"kernel/bpf/verifier.c":{"insertions":202,"deletions":50}}},"af86ca4e3088fe5eacf2f7e58c01fa68ca067672":{"author":"Alexei Starovoitov","email":"ast@kernel.org","date":"2018-05-15 16:27:05 UTC","message":"bpf: Prevent memory disambiguation attack\n\nDetect code patterns where malicious 'speculative store bypass' can be used\nand sanitize such patterns.\n\n 39: (bf) r3 = r10\n 40: (07) r3 += -216\n 41: (79) r8 = *(u64 *)(r7 +0)   // slow read\n 42: (7a) *(u64 *)(r10 -72) = 0  // verifier inserts this instruction\n 43: (7b) *(u64 *)(r8 +0) = r3   // this store becomes slow due to r8\n 44: (79) r1 = *(u64 *)(r6 +0)   // cpu speculatively executes this load\n 45: (71) r2 = *(u8 *)(r1 +0)    // speculatively arbitrary 'load byte'\n                                 // is now sanitized\n\nAbove code after x86 JIT becomes:\n e5: mov    %rbp,%rdx\n e8: add    $0xffffffffffffff28,%rdx\n ef: mov    0x0(%r13),%r14\n f3: movq   $0x0,-0x48(%rbp)\n fb: mov    %rdx,0x0(%r14)\n ff: mov    0x0(%rbx),%rdi\n103: movzbq 0x0(%rdi),%rsi\n\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>","insertions":57,"deletions":3,"filepaths":{"include/linux/bpf_verifier.h":{"insertions":1,"deletions":0},"kernel/bpf/verifier.c":{"insertions":56,"deletions":3}}},"5327ed3d44b754f5cc51d5b3f18e442eaebacff5":{"author":"Jiong Wang","email":"jiong.wang@netronome.com","date":"2019-05-24 22:25:12 UTC","message":"bpf: verifier: mark verified-insn with sub-register zext flag\n\neBPF ISA specification requires high 32-bit cleared when low 32-bit\nsub-register is written. This applies to destination register of ALU32 etc.\nJIT back-ends must guarantee this semantic when doing code-gen. x86_64 and\nAArch64 ISA has the same semantics, so the corresponding JIT back-end\ndoesn't need to do extra work.\n\nHowever, 32-bit arches (arm, x86, nfp etc.) and some other 64-bit arches\n(PowerPC, SPARC etc) need to do explicit zero extension to meet this\nrequirement, otherwise code like the following will fail.\n\n  u64_value = (u64) u32_value\n  ... other uses of u64_value\n\nThis is because compiler could exploit the semantic described above and\nsave those zero extensions for extending u32_value to u64_value, these JIT\nback-ends are expected to guarantee this through inserting extra zero\nextensions which however could be a significant increase on the code size.\nSome benchmarks show there could be ~40% sub-register writes ou","insertions":171,"deletions":16,"filepaths":{"include/linux/bpf_verifier.h":{"insertions":11,"deletions":3},"kernel/bpf/verifier.c":{"insertions":160,"deletions":13}}},"f7cf25b2026dc8441e0fa3a202c2aa8a56211e30":{"author":"Alexei Starovoitov","email":"ast@kernel.org","date":"2019-06-15 19:12:17 UTC","message":"bpf: track spill/fill of constants\n\nCompilers often spill induction variables into the stack,\nhence it is necessary for the verifier to track scalar values\nof the registers through stack slots.\n\nAlso few bpf programs were incorrectly rejected in the past,\nsince the verifier was not able to track such constants while\nthey were used to compute offsets into packet headers.\n\nTracking constants through the stack significantly decreases\nthe chances of state pruning, since two different constants\nare considered to be different by state equivalency.\nEnd result that cilium tests suffer serious degradation in the number\nof states processed and corresponding verification time increase.\n\n                     before  after\nbpf_lb-DLB_L3.o      1838    6441\nbpf_lb-DLB_L4.o      3218    5908\nbpf_lb-DUNKNOWN.o    1064    1064\nbpf_lxc-DDROP_ALL.o  26935   93790\nbpf_lxc-DUNKNOWN.o   34439   123886\nbpf_netdev.o         9721    31413\nbpf_overlay.o        6184    18561\nbpf_lxc_jit.o        39389   359445\n\nA","insertions":65,"deletions":25,"filepaths":{"kernel/bpf/verifier.c":{"insertions":65,"deletions":25}}},"62c7989b24dbd348c2507ee6458ebf5637d6ddb5":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2017-01-12 10:51:33 UTC","message":"bpf: allow b/h/w/dw access for bpf's cb in ctx\n\nWhen structs are used to store temporary state in cb[] buffer that is\nused with programs and among tail calls, then the generated code will\nnot always access the buffer in bpf_w chunks. We can ease programming\nof it and let this act more natural by allowing for aligned b/h/w/dw\nsized access for cb[] ctx member. Various test cases are attached as\nwell for the selftest suite. Potentially, this can also be reused for\nother program types to pass data around.\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":478,"deletions":13,"filepaths":{"kernel/bpf/verifier.c":{"insertions":6,"deletions":2},"net/core/filter.c":{"insertions":33,"deletions":8},"tools/testing/selftests/bpf/test_verifier.c":{"insertions":439,"deletions":3}}},"c64b7983288e636356f7f5f652de4813e1cfedac":{"author":"Joe Stringer","email":"joe@wand.net.nz","date":"2018-10-02 20:35:33 UTC","message":"bpf: Add PTR_TO_SOCKET verifier type\n\nTeach the verifier a little bit about a new type of pointer, a\nPTR_TO_SOCKET. This pointer type is accessed from BPF through the\n'struct bpf_sock' structure.\n\nSigned-off-by: Joe Stringer <joe@wand.net.nz>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>","insertions":160,"deletions":26,"filepaths":{"include/linux/bpf.h":{"insertions":34,"deletions":0},"include/linux/bpf_verifier.h":{"insertions":2,"deletions":0},"kernel/bpf/verifier.c":{"insertions":106,"deletions":14},"net/core/filter.c":{"insertions":18,"deletions":12}}},"9bac3d6d548e5cc925570b263f35b70a00a00ffd":{"author":"Alexei Starovoitov","email":"ast@plumgrid.com","date":"2015-03-13 18:57:42 UTC","message":"bpf: allow extended BPF programs access skb fields\n\nintroduce user accessible mirror of in-kernel 'struct sk_buff':\nstruct __sk_buff {\n    __u32 len;\n    __u32 pkt_type;\n    __u32 mark;\n    __u32 queue_mapping;\n};\n\nbpf programs can do:\n\nint bpf_prog(struct __sk_buff *skb)\n{\n    __u32 var = skb->pkt_type;\n\nwhich will be compiled to bpf assembler as:\n\ndst_reg = *(u32 *)(src_reg + 4) // 4 == offsetof(struct __sk_buff, pkt_type)\n\nbpf verifier will check validity of access and will convert it to:\n\ndst_reg = *(u8 *)(src_reg + offsetof(struct sk_buff, __pkt_type_offset))\ndst_reg &= 7\n\nsince skb->pkt_type is a bitfield.\n\nSigned-off-by: Alexei Starovoitov <ast@plumgrid.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":234,"deletions":35,"filepaths":{"include/linux/bpf.h":{"insertions":4,"deletions":1},"include/uapi/linux/bpf.h":{"insertions":10,"deletions":0},"kernel/bpf/syscall.c":{"insertions":1,"deletions":1},"kernel/bpf/verifier.c":{"insertions":136,"deletions":16},"net/core/filter.c":{"insertions":83,"deletions":17}}},"f4d7e40a5b7157e1329c3c5b10f60d8289fc2941":{"author":"Alexei Starovoitov","email":"ast@fb.com","date":"2017-12-15 01:55:06 UTC","message":"bpf: introduce function calls (verification)\n\nAllow arbitrary function calls from bpf function to another bpf function.\n\nTo recognize such set of bpf functions the verifier does:\n1. runs control flow analysis to detect function boundaries\n2. proceeds with verification of all functions starting from main(root) function\nIt recognizes that the stack of the caller can be accessed by the callee\n(if the caller passed a pointer to its stack to the callee) and the callee\ncan store map_value and other pointers into the stack of the caller.\n3. keeps track of the stack_depth of each function to make sure that total\nstack depth is still less than 512 bytes\n4. disallows pointers to the callee stack to be stored into the caller stack,\nsince they will be invalid as soon as the callee returns\n5. to reuse all of the existing state_pruning logic each function call\nis considered to be independent call from the verifier point of view.\nThe verifier pretends to inline all function calls it sees are being cal","insertions":585,"deletions":153,"filepaths":{"include/linux/bpf_verifier.h":{"insertions":34,"deletions":2},"kernel/bpf/verifier.c":{"insertions":551,"deletions":151}}},"2c78ee898d8f10ae6fb2fa23a3fbaec96b1b7366":{"author":"Alexei Starovoitov","email":"ast@kernel.org","date":"2020-05-13 23:03:54 UTC","message":"bpf: Implement CAP_BPF\n\nImplement permissions as stated in uapi/linux/capability.h\nIn order to do that the verifier allow_ptr_leaks flag is split\ninto four flags and they are set as:\n  env->allow_ptr_leaks = bpf_allow_ptr_leaks();\n  env->bypass_spec_v1 = bpf_bypass_spec_v1();\n  env->bypass_spec_v4 = bpf_bypass_spec_v4();\n  env->bpf_capable = bpf_capable();\n\nThe first three currently equivalent to perfmon_capable(), since leaking kernel\npointers and reading kernel memory via side channel attacks is roughly\nequivalent to reading kernel memory with cap_perfmon.\n\n'bpf_capable' enables bounded loops, precision tracking, bpf to bpf calls and\nother verifier features. 'allow_ptr_leaks' enable ptr leaks, ptr conversions,\nsubtraction of pointers. 'bypass_spec_v1' disables speculative analysis in the\nverifier, run time mitigations in bpf array, and enables indirect variable\naccess in bpf programs. 'bypass_spec_v4' disables emission of sanitation code\nby the verifier.\n\nThat means that the networkin","insertions":134,"deletions":60,"filepaths":{"drivers/media/rc/bpf-lirc.c":{"insertions":1,"deletions":1},"include/linux/bpf.h":{"insertions":17,"deletions":1},"include/linux/bpf_verifier.h":{"insertions":3,"deletions":0},"kernel/bpf/arraymap.c":{"insertions":5,"deletions":5},"kernel/bpf/bpf_struct_ops.c":{"insertions":1,"deletions":1},"kernel/bpf/core.c":{"insertions":1,"deletions":1},"kernel/bpf/cpumap.c":{"insertions":1,"deletions":1},"kernel/bpf/hashtab.c":{"insertions":2,"deletions":2},"kernel/bpf/helpers.c":{"insertions":3,"deletions":1},"kernel/bpf/lpm_trie.c":{"insertions":1,"deletions":1},"kernel/bpf/map_in_map.c":{"insertions":1,"deletions":1},"kernel/bpf/queue_stack_maps.c":{"insertions":1,"deletions":1},"kernel/bpf/reuseport_array.c":{"insertions":1,"deletions":1},"kernel/bpf/stackmap.c":{"insertions":1,"deletions":1},"kernel/bpf/syscall.c":{"insertions":68,"deletions":21},"kernel/bpf/verifier.c":{"insertions":20,"deletions":17},"kernel/trace/bpf_trace.c":{"insertions":3,"deletions":0},"net/core/bpf_sk_storage.c":{"insertions":2,"deletions":2},"net/core/filter.c":{"insertions":2,"deletions":2}}},"ea2e7ce5d0fc878463ba39deb46cf2ab20398fd2":{"author":"Alexei Starovoitov","email":"ast@fb.com","date":"2016-09-02 01:37:21 UTC","message":"bpf: support 8-byte metafield access\n\nThe verifier supported only 4-byte metafields in\nstruct __sk_buff and struct xdp_md. The metafields in upcoming\nstruct bpf_perf_event are 8-byte to match register width in struct pt_regs.\nTeach verifier to recognize 8-byte metafield access.\nThe patch doesn't affect safety of sockets and xdp programs.\nThey check for 4-byte only ctx access before these conditions are hit.\n\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nAcked-by: Daniel Borkmann <daniel@iogearbox.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":6,"deletions":3,"filepaths":{"kernel/bpf/verifier.c":{"insertions":6,"deletions":3}}},"5689d49b71ad25409e41c6052dd9549fbeaf9bde":{"author":"Yonghong Song","email":"yhs@fb.com","date":"2020-10-09 01:12:38 UTC","message":"bpf: Track spill/fill of bounded scalars.\n\nUnder register pressure the llvm may spill registers with bounds into the stack.\nThe verifier has to track them through spill/fill otherwise many kinds of bound\nerrors will be seen. The spill/fill of induction variables was already\nhappening. This patch extends this logic from tracking spill/fill of a constant\ninto any bounded register. There is no need to track spill/fill of unbounded,\nsince no new information will be retrieved from the stack during register fill.\n\nThough extra stack difference could cause state pruning to be less effective, no\nadverse affects were seen from this patch on selftests and on cilium programs.\n\nSigned-off-by: Yonghong Song <yhs@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: John Fastabend <john.fastabend@gmail.com>\nLink: https://lore.kernel.org/bpf/20201009011240.48506-3-alexei.starovoitov@gmail","insertions":15,"deletions":1,"filepaths":{"kernel/bpf/verifier.c":{"insertions":15,"deletions":1}}},"36bbef52c7eb646ed6247055a2acd3851e317857":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2016-09-19 22:26:13 UTC","message":"bpf: direct packet write and access for helpers for clsact progs\n\nThis work implements direct packet access for helpers and direct packet\nwrite in a similar fashion as already available for XDP types via commits\n4acf6c0b84c9 (\"bpf: enable direct packet data write for xdp progs\") and\n6841de8b0d03 (\"bpf: allow helpers access the packet directly\"), and as a\ncomplementary feature to the already available direct packet read for tc\n(cls/act) programs.\n\nFor enabling this, we need to introduce two helpers, bpf_skb_pull_data()\nand bpf_csum_update(). The first is generally needed for both, read and\nwrite, because they would otherwise only be limited to the current linear\nskb head. Usually, when the data_end test fails, programs just bail out,\nor, in the direct read case, use bpf_skb_load_bytes() as an alternative\nto overcome this limitation. If such data sits in non-linear parts, we\ncan just pull them in once with the new helper, retest and eventually\naccess them.\n\nAt the same time, this also mak","insertions":196,"deletions":34,"filepaths":{"include/linux/bpf.h":{"insertions":3,"deletions":1},"include/linux/skbuff.h":{"insertions":12,"deletions":2},"include/uapi/linux/bpf.h":{"insertions":21,"deletions":0},"kernel/bpf/helpers.c":{"insertions":3,"deletions":0},"kernel/bpf/verifier.c":{"insertions":40,"deletions":14},"net/core/filter.c":{"insertions":117,"deletions":17}}},"d691f9e8d4405c334aa10d556e73c8bf44cb0e01":{"author":"Alexei Starovoitov","email":"ast@plumgrid.com","date":"2015-06-04 17:11:54 UTC","message":"bpf: allow programs to write to certain skb fields\n\nallow programs read/write skb->mark, tc_index fields and\n((struct qdisc_skb_cb *)cb)->data.\n\nmark and tc_index are generically useful in TC.\ncb[0]-cb[4] are primarily used to pass arguments from one\nprogram to another called via bpf_tail_call() which can\nbe seen in sockex3_kern.c example.\n\nAll fields of 'struct __sk_buff' are readable to socket and tc_cls_act progs.\nmark, tc_index are writeable from tc_cls_act only.\ncb[0]-cb[4] are writeable by both sockets and tc_cls_act.\n\nAdd verifier tests and improve sample code.\n\nSigned-off-by: Alexei Starovoitov <ast@plumgrid.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":207,"deletions":48,"filepaths":{"include/linux/bpf.h":{"insertions":2,"deletions":1},"include/uapi/linux/bpf.h":{"insertions":2,"deletions":0},"kernel/bpf/verifier.c":{"insertions":28,"deletions":9},"net/core/filter.c":{"insertions":82,"deletions":12},"samples/bpf/sockex3_kern.c":{"insertions":11,"deletions":24},"samples/bpf/test_verifier.c":{"insertions":82,"deletions":2}}},"39c13c204bb1150d401e27d41a9d8b332be47c49":{"author":"Shubham Bansal","email":"illusionist.neo@gmail.com","date":"2017-08-22 06:32:33 UTC","message":"arm: eBPF JIT compiler\n\nThe JIT compiler emits ARM 32 bit instructions. Currently, It supports\neBPF only. Classic BPF is supported because of the conversion by BPF core.\n\nThis patch is essentially changing the current implementation of JIT compiler\nof Berkeley Packet Filter from classic to internal with almost all\ninstructions from eBPF ISA supported except the following\n\tBPF_ALU64 | BPF_DIV | BPF_K\n\tBPF_ALU64 | BPF_DIV | BPF_X\n\tBPF_ALU64 | BPF_MOD | BPF_K\n\tBPF_ALU64 | BPF_MOD | BPF_X\n\tBPF_STX | BPF_XADD | BPF_W\n\tBPF_STX | BPF_XADD | BPF_DW\n\nImplementation is using scratch space to emulate 64 bit eBPF ISA on 32 bit\nARM because of deficiency of general purpose registers on ARM. Currently,\nonly LITTLE ENDIAN machines are supported in this eBPF JIT Compiler.\n\nTested on ARMv7 with QEMU by me (Shubham Bansal).\n\nTesting results on ARMv7:\n\n1) test_bpf: Summary: 341 PASSED, 0 FAILED, [312/333 JIT'ed]\n2) test_tag: OK (40945 tests)\n3) test_progs: Summary: 30 PASSED, 0 FAILED\n4) test_lpm: OK\n5) te","insertions":1747,"deletions":811,"filepaths":{"arch/arm/Kconfig":{"insertions":1,"deletions":1},"arch/arm/net/bpf_jit_32.c":{"insertions":1663,"deletions":785},"arch/arm/net/bpf_jit_32.h":{"insertions":83,"deletions":25}}},"7a9870256361d4a36cb42e0301540256bb4b864e":{"author":"Russell King","email":"rmk+kernel@armlinux.org.uk","date":"2018-07-11 09:31:52 UTC","message":"ARM: net: bpf: provide accessor functions for BPF registers\n\nMany of the code paths need to have knowledge about whether a register\nis stacked or in a CPU register.  Move this decision making to a pair\nof helper functions instead of having it scattered throughout the\ncode.\n\nSigned-off-by: Russell King <rmk+kernel@armlinux.org.uk>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>","insertions":128,"deletions":201,"filepaths":{"arch/arm/net/bpf_jit_32.c":{"insertions":128,"deletions":201}}},"47b9c3bf416d80515901469f05aef2870b37c010":{"author":"Russell King","email":"rmk+kernel@armlinux.org.uk","date":"2018-07-11 09:31:47 UTC","message":"ARM: net: bpf: remove is_on_stack() and sstk/dstk\n\nThe decision about whether a BPF register is on the stack or in a CPU\nregister is detected at the top BPF insn processing level, and then\npercolated throughout the remainder of the code.  Since we now use\nnegative register values to represent stacked registers, we can detect\nwhere a BPF register is stored without restoring to carrying this\nadditional metadata through all code paths.\n\nSigned-off-by: Russell King <rmk+kernel@armlinux.org.uk>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>","insertions":160,"deletions":176,"filepaths":{"arch/arm/net/bpf_jit_32.c":{"insertions":160,"deletions":176}}},"e54bcde3d69d40023ae77727213d14f920eb264a":{"author":"Zi Shen Lim","email":"zlim.lnx@gmail.com","date":"2014-08-27 04:15:30 UTC","message":"arm64: eBPF JIT compiler\n\nThe JIT compiler emits A64 instructions. It supports eBPF only.\nLegacy BPF is supported thanks to conversion by BPF core.\n\nJIT is enabled in the same way as for other architectures:\n\n\techo 1 > /proc/sys/net/core/bpf_jit_enable\n\nOr for additional compiler output:\n\n\techo 2 > /proc/sys/net/core/bpf_jit_enable\n\nSee Documentation/networking/filter.txt for more information.\n\nThe implementation passes all 57 tests in lib/test_bpf.c\non ARMv8 Foundation Model :) Also tested by Will on Juno platform.\n\nSigned-off-by: Zi Shen Lim <zlim.lnx@gmail.com>\nAcked-by: Alexei Starovoitov <ast@plumgrid.com>\nAcked-by: Will Deacon <will.deacon@arm.com>\nSigned-off-by: Will Deacon <will.deacon@arm.com>","insertions":855,"deletions":3,"filepaths":{"Documentation/networking/filter.txt":{"insertions":3,"deletions":3},"arch/arm64/Kconfig":{"insertions":1,"deletions":0},"arch/arm64/Makefile":{"insertions":1,"deletions":0},"arch/arm64/net/Makefile":{"insertions":4,"deletions":0},"arch/arm64/net/bpf_jit.h":{"insertions":169,"deletions":0},"arch/arm64/net/bpf_jit_comp.c":{"insertions":677,"deletions":0}}},"800834285361dcf8e98b018e891df876472a4fac":{"author":"Jean-Philippe Brucker","email":"jean-philippe@linaro.org","date":"2020-07-28 15:21:26 UTC","message":"bpf, arm64: Add BPF exception tables\n\nWhen a tracing BPF program attempts to read memory without using the\nbpf_probe_read() helper, the verifier marks the load instruction with\nthe BPF_PROBE_MEM flag. Since the arm64 JIT does not currently recognize\nthis flag it falls back to the interpreter.\n\nAdd support for BPF_PROBE_MEM, by appending an exception table to the\nBPF program. If the load instruction causes a data abort, the fixup\ninfrastructure finds the exception table and fixes up the fault, by\nclearing the destination register and jumping over the faulting\ninstruction.\n\nTo keep the compact exception table entry format, inspect the pc in\nfixup_exception(). A more generic solution would add a \"handler\" field\nto the table entry, like on x86 and s390.\n\nSigned-off-by: Jean-Philippe Brucker <jean-philippe@linaro.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Song Liu <songliubraving@fb.com>\nLink: https://lore.kernel.org/bpf/20200728152122.1292756-2-jean-philippe@linaro","insertions":108,"deletions":9,"filepaths":{"arch/arm64/include/asm/extable.h":{"insertions":12,"deletions":0},"arch/arm64/mm/extable.c":{"insertions":9,"deletions":3},"arch/arm64/net/bpf_jit_comp.c":{"insertions":87,"deletions":6}}},"b6bd53f9c4e825fca82fe1392157c78443c814ab":{"author":"David Daney","email":"david.daney@cavium.com","date":"2017-08-04 00:10:12 UTC","message":"MIPS: Add missing file for eBPF JIT.\n\nInexplicably, commit f381bf6d82f0 (\"MIPS: Add support for eBPF JIT.\")\nlost a file somewhere on its path to Linus' tree.  Add back the\nmissing ebpf_jit.c so that we can build with CONFIG_BPF_JIT selected.\n\nThis version of ebpf_jit.c is identical to the original except for two\nminor change need to resolve conflicts with changes merged from the\nBPF branch:\n\nA) Set prog->jited_len = image_size;\nB) Use BPF_TAIL_CALL instead of BPF_CALL | BPF_X\n\nFixes: f381bf6d82f0 (\"MIPS: Add support for eBPF JIT.\")\nSigned-off-by: David Daney <david.daney@cavium.com>\nAcked-by: Daniel Borkmann <daniel@iogearbox.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":1950,"deletions":0,"filepaths":{"arch/mips/net/ebpf_jit.c":{"insertions":1950,"deletions":0}}},"51c66ad849a703d9bbfd7704c941827aed0fd9fd":{"author":"Christophe Leroy","email":"christophe.leroy@csgroup.eu","date":"2021-03-22 16:37:52 UTC","message":"powerpc/bpf: Implement extended BPF on PPC32\n\nImplement Extended Berkeley Packet Filter on Powerpc 32\n\nTest result with test_bpf module:\n\n\ttest_bpf: Summary: 378 PASSED, 0 FAILED, [354/366 JIT'ed]\n\nRegisters mapping:\n\n\t[BPF_REG_0] = r11-r12\n\t/* function arguments */\n\t[BPF_REG_1] = r3-r4\n\t[BPF_REG_2] = r5-r6\n\t[BPF_REG_3] = r7-r8\n\t[BPF_REG_4] = r9-r10\n\t[BPF_REG_5] = r21-r22 (Args 9 and 10 come in via the stack)\n\t/* non volatile registers */\n\t[BPF_REG_6] = r23-r24\n\t[BPF_REG_7] = r25-r26\n\t[BPF_REG_8] = r27-r28\n\t[BPF_REG_9] = r29-r30\n\t/* frame pointer aka BPF_REG_10 */\n\t[BPF_REG_FP] = r17-r18\n\t/* eBPF jit internal registers */\n\t[BPF_REG_AX] = r19-r20\n\t[TMP_REG] = r31\n\nAs PPC32 doesn't have a redzone in the stack, a stack frame must always\nbe set in order to host at least the tail count counter.\n\nThe stack frame remains for tail calls, it is set by the first callee\nand freed by the last callee.\n\nr0 is used as temporary register as much as possible. It is referenced\ndirectly in the code in ord","insertions":1076,"deletions":3,"filepaths":{"Documentation/admin-guide/sysctl/net.rst":{"insertions":1,"deletions":1},"arch/powerpc/Kconfig":{"insertions":1,"deletions":1},"arch/powerpc/net/Makefile":{"insertions":1,"deletions":1},"arch/powerpc/net/bpf_jit.h":{"insertions":4,"deletions":0},"arch/powerpc/net/bpf_jit_comp32.c":{"insertions":1069,"deletions":0}}},"156d0e290e969caba25f1851c52417c14d141b24":{"author":"Naveen N. Rao","email":"naveen.n.rao@linux.vnet.ibm.com","date":"2016-06-22 16:25:07 UTC","message":"powerpc/ebpf/jit: Implement JIT compiler for extended BPF\n\nPPC64 eBPF JIT compiler.\n\nEnable with:\n  echo 1 > /proc/sys/net/core/bpf_jit_enable\nor\n  echo 2 > /proc/sys/net/core/bpf_jit_enable\n\n... to see the generated JIT code. This can further be processed with\ntools/net/bpf_jit_disasm.\n\nWith CONFIG_TEST_BPF=m and 'modprobe test_bpf':\n\n test_bpf: Summary: 305 PASSED, 0 FAILED, [297/297 JIT'ed]\n\n... on both ppc64 BE and LE.\n\nThe details of the approach are documented through various comments in\nthe code.\n\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>","insertions":1315,"deletions":3,"filepaths":{"arch/powerpc/Kconfig":{"insertions":2,"deletions":1},"arch/powerpc/include/asm/asm-compat.h":{"insertions":2,"deletions":0},"arch/powerpc/include/asm/ppc-opcode.h":{"insertions":19,"deletions":1},"arch/powerpc/net/Makefile":{"insertions":4,"deletions":0},"arch/powerpc/net/bpf_jit.h":{"insertions":52,"deletions":1},"arch/powerpc/net/bpf_jit64.h":{"insertions":102,"deletions":0},"arch/powerpc/net/bpf_jit_asm64.S":{"insertions":180,"deletions":0},"arch/powerpc/net/bpf_jit_comp64.c":{"insertions":954,"deletions":0}}},"5f316b65e99f109942c556dc8790abd4c75bcb34":{"author":"Luke Nelson","email":"lukenels@cs.washington.edu","date":"2020-03-05 05:02:05 UTC","message":"riscv, bpf: Add RV32G eBPF JIT\n\nThis is an eBPF JIT for RV32G, adapted from the JIT for RV64G and\nthe 32-bit ARM JIT.\n\nThere are two main changes required for this to work compared to\nthe RV64 JIT.\n\nFirst, eBPF registers are 64-bit, while RV32G registers are 32-bit.\nBPF registers either map directly to 2 RISC-V registers, or reside\nin stack scratch space and are saved and restored when used.\n\nSecond, many 64-bit ALU operations do not trivially map to 32-bit\noperations. Operations that move bits between high and low words,\nsuch as ADD, LSH, MUL, and others must emulate the 64-bit behavior\nin terms of 32-bit instructions.\n\nThis patch also makes related changes to bpf_jit.h, such\nas adding RISC-V instructions required by the RV32 JIT.\n\nSupported features:\n\nThe RV32 JIT supports the same features and instructions as the\nRV64 JIT, with the following exceptions:\n\n- ALU64 DIV/MOD: Requires loops to implement on 32-bit hardware.\n\n- BPF_XADD | BPF_DW: There's no 8-byte atomic instruction in RV32","insertions":1366,"deletions":2,"filepaths":{"arch/riscv/Kconfig":{"insertions":1,"deletions":1},"arch/riscv/net/Makefile":{"insertions":7,"deletions":1},"arch/riscv/net/bpf_jit.h":{"insertions":48,"deletions":0},"arch/riscv/net/bpf_jit_comp32.c":{"insertions":1310,"deletions":0}}},"2353ecc6f91fd15b893fa01bf85a1c7a823ee4f2":{"author":"Björn Töpel","email":"bjorn.topel@gmail.com","date":"2019-02-05 12:41:22 UTC","message":"bpf, riscv: add BPF JIT for RV64G\n\nThis commit adds a BPF JIT for RV64G.\n\nThe JIT is a two-pass JIT, and has a dynamic prolog/epilogue (similar\nto the MIPS64 BPF JIT) instead of static ones (e.g. x86_64).\n\nAt the moment the RISC-V Linux port does not support\nCONFIG_HAVE_KPROBES, which means that CONFIG_BPF_EVENTS is not\nsupported. Thus, no tests involving BPF_PROG_TYPE_TRACEPOINT,\nBPF_PROG_TYPE_PERF_EVENT, BPF_PROG_TYPE_KPROBE and\nBPF_PROG_TYPE_RAW_TRACEPOINT passes.\n\nThe implementation does not support \"far branching\" (>4KiB).\n\nTest results:\n  # modprobe test_bpf\n  test_bpf: Summary: 378 PASSED, 0 FAILED, [366/366 JIT'ed]\n\n  # echo 1 > /proc/sys/kernel/unprivileged_bpf_disabled\n  # ./test_verifier\n  ...\n  Summary: 761 PASSED, 507 SKIPPED, 2 FAILED\n\nNote that \"test_verifier\" was run with one build with\nCONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS=y and one without, otherwise\nmany of the the tests that require unaligned access were skipped.\n\nCONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS=y:\n  # echo 1","insertions":1605,"deletions":1,"filepaths":{"arch/riscv/Kconfig":{"insertions":1,"deletions":0},"arch/riscv/Makefile":{"insertions":1,"deletions":1},"arch/riscv/net/Makefile":{"insertions":1,"deletions":0},"arch/riscv/net/bpf_jit_comp.c":{"insertions":1602,"deletions":0}}},"18a4d8c97b841632920c16a6fa9216d1214f3db7":{"author":"Luke Nelson","email":"lukenels@cs.washington.edu","date":"2020-07-21 02:52:40 UTC","message":"bpf, riscv: Use compressed instructions in the rv64 JIT\n\nThis patch uses the RVC support and encodings from bpf_jit.h to optimize\nthe rv64 jit.\n\nThe optimizations work by replacing emit(rv_X(...)) with a call to a\nhelper function emit_X, which will emit a compressed version of the\ninstruction when possible, and when RVC is enabled.\n\nThe JIT continues to pass all tests in lib/test_bpf.c, and introduces\nno new failures to test_verifier; both with and without RVC being enabled.\n\nMost changes are straightforward replacements of emit(rv_X(...), ctx)\nwith emit_X(..., ctx), with the following exceptions bearing mention;\n\n* Change emit_imm to sign-extend the value in \"lower\", since the\nchecks for RVC (and the instructions themselves) treat the value as\nsigned. Otherwise, small negative immediates will not be recognized as\nencodable using an RVC instruction. For example, without this change,\nemit_imm(rd, -1, ctx) would cause lower to become 4095, which is not a\n6b int even though a \"c.li rd, -1\"","insertions":147,"deletions":134,"filepaths":{"arch/riscv/net/bpf_jit_comp64.c":{"insertions":147,"deletions":134}}},"054623105728b06852f077299e2bf1bf3d5f2b0b":{"author":"Michael Holzheu","email":"holzheu@linux.vnet.ibm.com","date":"2015-04-01 14:08:32 UTC","message":"s390/bpf: Add s390x eBPF JIT compiler backend\n\nReplace 32 bit BPF JIT backend with new 64 bit eBPF backend.\n\nSigned-off-by: Michael Holzheu <holzheu@linux.vnet.ibm.com>\nSigned-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>","insertions":1234,"deletions":803,"filepaths":{"arch/s390/Kconfig":{"insertions":1,"deletions":1},"arch/s390/net/bpf_jit.S":{"insertions":89,"deletions":108},"arch/s390/net/bpf_jit.h":{"insertions":58,"deletions":0},"arch/s390/net/bpf_jit_comp.c":{"insertions":1086,"deletions":694}}},"7a12b5031c6b947cc13918237ae652b536243b76":{"author":"David S. Miller","email":"davem@davemloft.net","date":"2017-04-18 01:44:36 UTC","message":"sparc64: Add eBPF JIT.\n\nThis is an eBPF JIT for sparc64.  All major features are supported.\n\nAll tests under tools/testing/selftests/bpf/ pass.\n\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":1424,"deletions":60,"filepaths":{"arch/sparc/Kconfig":{"insertions":2,"deletions":1},"arch/sparc/net/bpf_jit_32.h":{"insertions":1,"deletions":1},"arch/sparc/net/bpf_jit_64.h":{"insertions":66,"deletions":0},"arch/sparc/net/bpf_jit_asm_32.S":{"insertions":0,"deletions":7},"arch/sparc/net/bpf_jit_asm_64.S":{"insertions":161,"deletions":1},"arch/sparc/net/bpf_jit_comp_32.c":{"insertions":0,"deletions":49},"arch/sparc/net/bpf_jit_comp_64.c":{"insertions":1194,"deletions":1}}},"3e2a33cf7e68b95c3afe11e967769341f6dc987d":{"author":"Jiong Wang","email":"jiong.wang@netronome.com","date":"2019-05-24 22:25:25 UTC","message":"sparc: bpf: eliminate zero extension code-gen\n\nCc: David S. Miller <davem@davemloft.net>\nSigned-off-by: Jiong Wang <jiong.wang@netronome.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>","insertions":27,"deletions":2,"filepaths":{"arch/sparc/net/bpf_jit_comp_64.c":{"insertions":27,"deletions":2}}},"622582786c9e041d0bd52bde201787adeab249f8":{"author":"Alexei Starovoitov","email":"ast@plumgrid.com","date":"2014-05-14 02:50:46 UTC","message":"net: filter: x86: internal BPF JIT\n\nMaps all internal BPF instructions into x86_64 instructions.\nThis patch replaces original BPF x64 JIT with internal BPF x64 JIT.\nsysctl net.core.bpf_jit_enable is reused as on/off switch.\n\nPerformance:\n\n1. old BPF JIT and internal BPF JIT generate equivalent x86_64 code.\n  No performance difference is observed for filters that were JIT-able before\n\nExample assembler code for BPF filter \"tcpdump port 22\"\n\noriginal BPF -> old JIT:            original BPF -> internal BPF -> new JIT:\n   0:   push   %rbp                      0:     push   %rbp\n   1:   mov    %rsp,%rbp                 1:     mov    %rsp,%rbp\n   4:   sub    $0x60,%rsp                4:     sub    $0x228,%rsp\n   8:   mov    %rbx,-0x8(%rbp)           b:     mov    %rbx,-0x228(%rbp) // prologue\n                                        12:     mov    %r13,-0x220(%rbp)\n                                        19:     mov    %r14,-0x218(%rbp)\n                                        20:     mov    %r","insertions":748,"deletions":655,"filepaths":{"arch/x86/net/bpf_jit.S":{"insertions":18,"deletions":59},"arch/x86/net/bpf_jit_comp.c":{"insertions":719,"deletions":595},"include/linux/filter.h":{"insertions":3,"deletions":0},"net/core/filter.c":{"insertions":8,"deletions":1}}},"e430f34ee5192c84bcabd3c79ab7e2388b5eec74":{"author":"Alexei Starovoitov","email":"ast@plumgrid.com","date":"2014-06-06 21:46:06 UTC","message":"net: filter: cleanup A/X name usage\n\nThe macro 'A' used in internal BPF interpreter:\n #define A regs[insn->a_reg]\nwas easily confused with the name of classic BPF register 'A', since\n'A' would mean two different things depending on context.\n\nThis patch is trying to clean up the naming and clarify its usage in the\nfollowing way:\n\n- A and X are names of two classic BPF registers\n\n- BPF_REG_A denotes internal BPF register R0 used to map classic register A\n  in internal BPF programs generated from classic\n\n- BPF_REG_X denotes internal BPF register R7 used to map classic register X\n  in internal BPF programs generated from classic\n\n- internal BPF instruction format:\nstruct sock_filter_int {\n        __u8    code;           /* opcode */\n        __u8    dst_reg:4;      /* dest register */\n        __u8    src_reg:4;      /* source register */\n        __s16   off;            /* signed offset */\n        __s32   imm;            /* signed immediate constant */\n};\n\n- BPF_X/BPF_K is 1 bit used to enco","insertions":314,"deletions":302,"filepaths":{"Documentation/networking/filter.txt":{"insertions":1,"deletions":1},"arch/x86/net/bpf_jit_comp.c":{"insertions":130,"deletions":130},"include/linux/filter.h":{"insertions":84,"deletions":72},"net/core/filter.c":{"insertions":99,"deletions":99}}},"343f845b375989f1753f605902931fa939aa2223":{"author":"Alexei Starovoitov","email":"ast@plumgrid.com","date":"2015-05-12 06:25:16 UTC","message":"x86: bpf_jit: fix FROM_BE16 and FROM_LE16/32 instructions\n\nFROM_BE16:\n'ror %reg, 8' doesn't clear upper bits of the register,\nso use additional 'movzwl' insn to zero extend 16 bits into 64\n\nFROM_LE16:\nshould zero extend lower 16 bits into 64 bit\n\nFROM_LE32:\nshould zero extend lower 32 bits into 64 bit\n\nFixes: 89aa075832b0 (\"net: sock: allow eBPF programs to be attached to sockets\")\nSigned-off-by: Alexei Starovoitov <ast@plumgrid.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":28,"deletions":0,"filepaths":{"arch/x86/net/bpf_jit_comp.c":{"insertions":28,"deletions":0}}},"0a14842f5a3c0e88a1e59fac5c3025db39721f74":{"author":"Eric Dumazet","email":"eric.dumazet@gmail.com","date":"2011-04-20 09:27:32 UTC","message":"net: filter: Just In Time compiler for x86-64\n\nIn order to speedup packet filtering, here is an implementation of a\nJIT compiler for x86_64\n\nIt is disabled by default, and must be enabled by the admin.\n\necho 1 >/proc/sys/net/core/bpf_jit_enable\n\nIt uses module_alloc() and module_free() to get memory in the 2GB text\nkernel range since we call helpers functions from the generated code.\n\nEAX : BPF A accumulator\nEBX : BPF X accumulator\nRDI : pointer to skb   (first argument given to JIT function)\nRBP : frame pointer (even if CONFIG_FRAME_POINTER=n)\nr9d : skb->len - skb->data_len (headlen)\nr8  : skb->data\n\nTo get a trace of generated code, use :\n\necho 2 >/proc/sys/net/core/bpf_jit_enable\n\nExample of generated code :\n\n# tcpdump -p -n -s 0 -i eth1 host 192.168.20.0/24\n\nflen=18 proglen=147 pass=3 image=ffffffffa00b5000\nJIT code: ffffffffa00b5000: 55 48 89 e5 48 83 ec 60 48 89 5d f8 44 8b 4f 60\nJIT code: ffffffffa00b5010: 44 2b 4f 64 4c 8b 87 b8 00 00 00 be 0c 00 00 00\nJIT code: ffffffffa00b5020","insertions":918,"deletions":62,"filepaths":{"Documentation/sysctl/net.txt":{"insertions":11,"deletions":0},"MAINTAINERS":{"insertions":1,"deletions":0},"arch/x86/Kbuild":{"insertions":1,"deletions":0},"arch/x86/Kconfig":{"insertions":1,"deletions":0},"arch/x86/net/Makefile":{"insertions":4,"deletions":0},"arch/x86/net/bpf_jit.S":{"insertions":140,"deletions":0},"arch/x86/net/bpf_jit_comp.c":{"insertions":654,"deletions":0},"include/linux/filter.h":{"insertions":76,"deletions":0},"include/linux/netdevice.h":{"insertions":1,"deletions":0},"include/linux/skbuff.h":{"insertions":1,"deletions":1},"net/Kconfig":{"insertions":13,"deletions":0},"net/core/filter.c":{"insertions":5,"deletions":60},"net/core/sysctl_net_core.c":{"insertions":9,"deletions":0},"net/packet/af_packet.c":{"insertions":1,"deletions":1}}},"03f5781be2c7b7e728d724ac70ba10799cc710d7":{"author":"Wang YanQing","email":"udknight@gmail.com","date":"2018-05-03 06:10:43 UTC","message":"bpf, x86_32: add eBPF JIT compiler for ia32\n\nThe JIT compiler emits ia32 bit instructions. Currently, It supports eBPF\nonly. Classic BPF is supported because of the conversion by BPF core.\n\nAlmost all instructions from eBPF ISA supported except the following:\nBPF_ALU64 | BPF_DIV | BPF_K\nBPF_ALU64 | BPF_DIV | BPF_X\nBPF_ALU64 | BPF_MOD | BPF_K\nBPF_ALU64 | BPF_MOD | BPF_X\nBPF_STX | BPF_XADD | BPF_W\nBPF_STX | BPF_XADD | BPF_DW\n\nIt doesn't support BPF_JMP|BPF_CALL with BPF_PSEUDO_CALL at the moment.\n\nIA32 has few general purpose registers, EAX|EDX|ECX|EBX|ESI|EDI. I use\nEAX|EDX|ECX|EBX as temporary registers to simulate instructions in eBPF\nISA, and allocate ESI|EDI to BPF_REG_AX for constant blinding, all others\neBPF registers, R0-R10, are simulated through scratch space on stack.\n\nThe reasons behind the hardware registers allocation policy are:\n1:MUL need EAX:EDX, shift operation need ECX, so they aren't fit\n  for general eBPF 64bit register simulation.\n2:We need at least 4 registers to si","insertions":2588,"deletions":6,"filepaths":{"Documentation/sysctl/net.txt":{"insertions":1,"deletions":0},"arch/x86/Kconfig":{"insertions":1,"deletions":1},"arch/x86/include/asm/nospec-branch.h":{"insertions":27,"deletions":3},"arch/x86/net/Makefile":{"insertions":6,"deletions":2},"arch/x86/net/bpf_jit_comp32.c":{"insertions":2553,"deletions":0}}},"1ea47e01ad6ea0fe99697c54c2413d81dd21fe32":{"author":"Alexei Starovoitov","email":"ast@fb.com","date":"2017-12-15 01:55:13 UTC","message":"bpf: add support for bpf_call to interpreter\n\nthough bpf_call is still the same call instruction and\ncalling convention 'bpf to bpf' and 'bpf to helper' is the same\nthe interpreter has to oparate on 'struct bpf_insn *'.\nTo distinguish these two cases add a kernel internal opcode and\nmark call insns with it.\nThis opcode is seen by interpreter only. JITs will never see it.\nAlso add tiny bit of debug code to aid interpreter debugging.\n\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nAcked-by: Daniel Borkmann <daniel@iogearbox.net>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>","insertions":116,"deletions":17,"filepaths":{"include/linux/bpf.h":{"insertions":1,"deletions":0},"include/linux/filter.h":{"insertions":6,"deletions":0},"kernel/bpf/core.c":{"insertions":73,"deletions":17},"kernel/bpf/verifier.c":{"insertions":36,"deletions":0}}},"74451e66d516c55e309e8d89a4a1e7596e46aacd":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2017-02-16 21:24:50 UTC","message":"bpf: make jited programs visible in traces\n\nLong standing issue with JITed programs is that stack traces from\nfunction tracing check whether a given address is kernel code\nthrough {__,}kernel_text_address(), which checks for code in core\nkernel, modules and dynamically allocated ftrace trampolines. But\nwhat is still missing is BPF JITed programs (interpreted programs\nare not an issue as __bpf_prog_run() will be attributed to them),\nthus when a stack trace is triggered, the code walking the stack\nwon't see any of the JITed ones. The same for address correlation\ndone from user space via reading /proc/kallsyms. This is read by\ntools like perf, but the latter is also useful for permanent live\ntracing with eBPF itself in combination with stack maps when other\neBPF types are part of the callchain. See offwaketime example on\ndumping stack from a map.\n\nThis work tries to tackle that issue by making the addresses and\nsymbols known to the kernel. The lookup from *kernel_text_address()\nis implemen","insertions":419,"deletions":63,"filepaths":{"Documentation/sysctl/net.txt":{"insertions":12,"deletions":0},"arch/arm64/net/bpf_jit_comp.c":{"insertions":0,"deletions":15},"arch/powerpc/net/bpf_jit_comp64.c":{"insertions":1,"deletions":0},"arch/s390/net/bpf_jit_comp.c":{"insertions":0,"deletions":18},"arch/x86/net/bpf_jit_comp.c":{"insertions":0,"deletions":15},"include/linux/bpf.h":{"insertions":4,"deletions":0},"include/linux/filter.h":{"insertions":111,"deletions":1},"kernel/bpf/core.c":{"insertions":223,"deletions":0},"kernel/bpf/syscall.c":{"insertions":2,"deletions":0},"kernel/extable.c":{"insertions":8,"deletions":1},"kernel/kallsyms.c":{"insertions":49,"deletions":12},"net/Kconfig":{"insertions":2,"deletions":1},"net/core/sysctl_net_core.c":{"insertions":7,"deletions":0}}},"f8f6d679aaa78b989d9aee8d2935066fbdca2a30":{"author":"Daniel Borkmann","email":"dborkman@redhat.com","date":"2014-05-29 08:22:51 UTC","message":"net: filter: improve filter block macros\n\nCommit 9739eef13c92 (\"net: filter: make BPF conversion more readable\")\nstarted to introduce helper macros similar to BPF_STMT()/BPF_JUMP()\nmacros from classic BPF.\n\nHowever, quite some statements in the filter conversion functions\nremained in the old style which gives a mixture of block macros and\nnon block macros in the code. This patch makes the block macros itself\nmore readable by using explicit member initialization, and converts\nthe remaining ones where possible to remain in a more consistent state.\n\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nAcked-by: Alexei Starovoitov <ast@plumgrid.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":277,"deletions":174,"filepaths":{"include/linux/filter.h":{"insertions":205,"deletions":50},"net/core/filter.c":{"insertions":72,"deletions":124}}},"a4afd37b26f4b9f640310a89b7f8d176ae3460b1":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2015-05-13 11:12:43 UTC","message":"test_bpf: add tests related to BPF_MAXINSNS\n\nCouple of torture test cases related to the bug fixed in 0b59d8806a31\n(\"ARM: net: delegate filter to kernel interpreter when imm_offset()\nreturn value can't fit into 12bits.\").\n\nI've added a helper to allocate and fill the insn space. Output on\nx86_64 from my laptop:\n\ntest_bpf: #233 BPF_MAXINSNS: Maximum possible literals jited:0 7 PASS\ntest_bpf: #234 BPF_MAXINSNS: Single literal jited:0 8 PASS\ntest_bpf: #235 BPF_MAXINSNS: Run/add until end jited:0 11553 PASS\ntest_bpf: #236 BPF_MAXINSNS: Too many instructions PASS\ntest_bpf: #237 BPF_MAXINSNS: Very long jump jited:0 9 PASS\ntest_bpf: #238 BPF_MAXINSNS: Ctx heavy transformations jited:0 20329 20398 PASS\ntest_bpf: #239 BPF_MAXINSNS: Call heavy transformations jited:0 32178 32475 PASS\ntest_bpf: #240 BPF_MAXINSNS: Jump heavy test jited:0 10518 PASS\n\ntest_bpf: #233 BPF_MAXINSNS: Maximum possible literals jited:1 4 PASS\ntest_bpf: #234 BPF_MAXINSNS: Single literal jited:1 4 PASS\ntest_bpf: #235 BPF_MAX","insertions":316,"deletions":9,"filepaths":{"include/linux/filter.h":{"insertions":8,"deletions":0},"lib/test_bpf.c":{"insertions":308,"deletions":9}}},"2a02759ef5f8a34792df22b41d5e10658fd7bbd3":{"author":"Alexei Starovoitov","email":"ast@kernel.org","date":"2019-10-16 03:25:02 UTC","message":"bpf: Add support for BTF pointers to interpreter\n\nPointer to BTF object is a pointer to kernel object or NULL.\nThe memory access in the interpreter has to be done via probe_kernel_read\nto avoid page faults.\n\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Andrii Nakryiko <andriin@fb.com>\nAcked-by: Martin KaFai Lau <kafai@fb.com>\nLink: https://lore.kernel.org/bpf/20191016032505.2089704-9-ast@kernel.org","insertions":30,"deletions":0,"filepaths":{"include/linux/filter.h":{"insertions":3,"deletions":0},"kernel/bpf/core.c":{"insertions":19,"deletions":0},"kernel/bpf/verifier.c":{"insertions":8,"deletions":0}}},"3324b584b6f633a24550691c194600bcab7fc899":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2015-05-29 21:23:07 UTC","message":"ebpf: misc core cleanup\n\nBesides others, move bpf_tail_call_proto to the remaining definitions\nof other protos, improve comments a bit (i.e. remove some obvious ones,\nwhere the code is already self-documenting, add objectives for others),\nsimplify bpf_prog_array_compatible() a bit.\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Alexei Starovoitov <ast@plumgrid.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":58,"deletions":48,"filepaths":{"kernel/bpf/core.c":{"insertions":41,"deletions":31},"kernel/bpf/helpers.c":{"insertions":17,"deletions":17}}},"f5bffecda951b59d0d3cdd616d68952abc52bc40":{"author":"Alexei Starovoitov","email":"ast@plumgrid.com","date":"2014-07-23 06:01:58 UTC","message":"net: filter: split filter.c into two files\n\nBPF is used in several kernel components. This split creates logical boundary\nbetween generic eBPF core and the rest\n\nkernel/bpf/core.c: eBPF interpreter\n\nnet/core/filter.c: classic->eBPF converter, classic verifiers, socket filters\n\nThis patch only moves functions.\n\nSigned-off-by: Alexei Starovoitov <ast@plumgrid.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":538,"deletions":511,"filepaths":{"kernel/Makefile":{"insertions":1,"deletions":0},"kernel/bpf/Makefile":{"insertions":1,"deletions":0},"kernel/bpf/core.c":{"insertions":536,"deletions":0},"net/core/filter.c":{"insertions":0,"deletions":511}}},"c195651e565ae7f41a68acb7d4aa7390ad215de1":{"author":"Yonghong Song","email":"yhs@fb.com","date":"2018-04-29 05:28:08 UTC","message":"bpf: add bpf_get_stack helper\n\nCurrently, stackmap and bpf_get_stackid helper are provided\nfor bpf program to get the stack trace. This approach has\na limitation though. If two stack traces have the same hash,\nonly one will get stored in the stackmap table,\nso some stack traces are missing from user perspective.\n\nThis patch implements a new helper, bpf_get_stack, will\nsend stack traces directly to bpf program. The bpf program\nis able to see all stack traces, and then can do in-kernel\nprocessing or send stack traces to user space through\nshared map or bpf_perf_event_output.\n\nAcked-by: Alexei Starovoitov <ast@fb.com>\nSigned-off-by: Yonghong Song <yhs@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>","insertions":183,"deletions":4,"filepaths":{"include/linux/bpf.h":{"insertions":1,"deletions":0},"include/linux/filter.h":{"insertions":2,"deletions":1},"include/uapi/linux/bpf.h":{"insertions":40,"deletions":2},"kernel/bpf/core.c":{"insertions":5,"deletions":0},"kernel/bpf/stackmap.c":{"insertions":67,"deletions":0},"kernel/bpf/verifier.c":{"insertions":19,"deletions":0},"kernel/trace/bpf_trace.c":{"insertions":49,"deletions":1}}},"3dec541b2e632d630fe7142ed44f0b3702ef1f8c":{"author":"Alexei Starovoitov","email":"ast@kernel.org","date":"2019-10-16 03:25:03 UTC","message":"bpf: Add support for BTF pointers to x86 JIT\n\nPointer to BTF object is a pointer to kernel object or NULL.\nSuch pointers can only be used by BPF_LDX instructions.\nThe verifier changed their opcode from LDX|MEM|size\nto LDX|PROBE_MEM|size to make JITing easier.\nThe number of entries in extable is the number of BPF_LDX insns\nthat access kernel memory via \"pointer to BTF type\".\nOnly these load instructions can fault.\nSince x86 extable is relative it has to be allocated in the same\nmemory region as JITed code.\nAllocate it prior to last pass of JITing and let the last pass populate it.\nPointer to extable in bpf_prog_aux is necessary to make page fault\nhandling fast.\nPage fault handling is done in two steps:\n1. bpf_prog_kallsyms_find() finds BPF program that page faulted.\n   It's done by walking rb tree.\n2. then extable for given bpf program is binary searched.\nThis process is similar to how page faulting is done for kernel modules.\nThe exception handler skips over faulting x86 instruction and","insertions":128,"deletions":5,"filepaths":{"arch/x86/net/bpf_jit_comp.c":{"insertions":93,"deletions":4},"include/linux/bpf.h":{"insertions":3,"deletions":0},"include/linux/extable.h":{"insertions":10,"deletions":0},"kernel/bpf/core.c":{"insertions":19,"deletions":1},"kernel/bpf/verifier.c":{"insertions":1,"deletions":0},"kernel/extable.c":{"insertions":2,"deletions":0}}},"b7b3fc8dd95bc02bd30680da258e09dda55270db":{"author":"Ilya Leoshkevich","email":"iii@linux.ibm.com","date":"2019-11-15 12:37:22 UTC","message":"bpf: Support doubleword alignment in bpf_jit_binary_alloc\n\nCurrently passing alignment greater than 4 to bpf_jit_binary_alloc does\nnot work: in such cases it silently aligns only to 4 bytes.\n\nOn s390, in order to load a constant from memory in a large (>512k) BPF\nprogram, one must use lgrl instruction, whose memory operand must be\naligned on an 8-byte boundary.\n\nThis patch makes it possible to request 8-byte alignment from\nbpf_jit_binary_alloc, and also makes it issue a warning when an\nunsupported alignment is requested.\n\nSigned-off-by: Ilya Leoshkevich <iii@linux.ibm.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20191115123722.58462-1-iii@linux.ibm.com","insertions":8,"deletions":2,"filepaths":{"include/linux/filter.h":{"insertions":4,"deletions":2},"kernel/bpf/core.c":{"insertions":4,"deletions":0}}},"5e581dad4fec0e6d062740dc35b8dc248b39d224":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2018-01-26 22:33:38 UTC","message":"bpf: make unknown opcode handling more robust\n\nRecent findings by syzcaller fixed in 7891a87efc71 (\"bpf: arsh is\nnot supported in 32 bit alu thus reject it\") triggered a warning\nin the interpreter due to unknown opcode not being rejected by\nthe verifier. The 'return 0' for an unknown opcode is really not\noptimal, since with BPF to BPF calls, this would go untracked by\nthe verifier.\n\nDo two things here to improve the situation: i) perform basic insn\nsanity check early on in the verification phase and reject every\nnon-uapi insn right there. The bpf_opcode_in_insntable() table\nreuses the same mapping as the jumptable in ___bpf_prog_run() sans\nthe non-public mappings. And ii) in ___bpf_prog_run() we do need\nto BUG in the case where the verifier would ever create an unknown\nopcode due to some rewrites.\n\nNote that JITs do not have such issues since they would punt to\ninterpreter in these situations. Moreover, the BPF_JIT_ALWAYS_ON\nwould also help to avoid such unknown opcodes in the first pla","insertions":154,"deletions":105,"filepaths":{"include/linux/filter.h":{"insertions":2,"deletions":0},"kernel/bpf/core.c":{"insertions":145,"deletions":105},"kernel/bpf/verifier.c":{"insertions":7,"deletions":0}}},"71189fa9b092ef125ee741eccb2f5fa916798afd":{"author":"Alexei Starovoitov","email":"ast@fb.com","date":"2017-05-30 20:31:27 UTC","message":"bpf: free up BPF_JMP | BPF_CALL | BPF_X opcode\n\nfree up BPF_JMP | BPF_CALL | BPF_X opcode to be used by actual\nindirect call by register and use kernel internal opcode to\nmark call instruction into bpf_tail_call() helper.\n\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nAcked-by: Daniel Borkmann <daniel@iogearbox.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":10,"deletions":7,"filepaths":{"arch/arm64/net/bpf_jit_comp.c":{"insertions":1,"deletions":1},"arch/powerpc/net/bpf_jit_comp64.c":{"insertions":1,"deletions":1},"arch/s390/net/bpf_jit_comp.c":{"insertions":1,"deletions":1},"arch/sparc/net/bpf_jit_comp_64.c":{"insertions":1,"deletions":1},"arch/x86/net/bpf_jit_comp.c":{"insertions":1,"deletions":1},"include/linux/filter.h":{"insertions":3,"deletions":0},"kernel/bpf/core.c":{"insertions":1,"deletions":1},"kernel/bpf/verifier.c":{"insertions":1,"deletions":1}}},"f4ac7e0b5cc8d16004ac57ff679266d573f30f77":{"author":"Jakub Kicinski","email":"jakub.kicinski@netronome.com","date":"2017-10-09 17:30:12 UTC","message":"bpf: move instruction printing into a separate file\n\nSeparate the instruction printing into a standalone source file.\nThis way sneaky code from tools/ can compile it in directly.\n\nSigned-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>\nReviewed-by: Simon Horman <simon.horman@netronome.com>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nAcked-by: Daniel Borkmann <daniel@iogearbox.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":251,"deletions":198,"filepaths":{"kernel/bpf/Makefile":{"insertions":1,"deletions":0},"kernel/bpf/disasm.c":{"insertions":214,"deletions":0},"kernel/bpf/disasm.h":{"insertions":32,"deletions":0},"kernel/bpf/verifier.c":{"insertions":4,"deletions":198}}},"abe0884011f1a569bc1254b70c41525b755e8037":{"author":"Jiri Olsa","email":"jolsa@kernel.org","date":"2018-03-23 10:41:28 UTC","message":"bpf: Remove struct bpf_verifier_env argument from print_bpf_insn\n\nWe use print_bpf_insn in user space (bpftool and soon perf),\nso it'd be nice to keep it generic and strip it off the kernel\nstruct bpf_verifier_env argument.\n\nThis argument can be safely removed, because its users can\nuse the struct bpf_insn_cbs::private_data to pass it.\n\nBy changing the argument type  we can no longer have clean\n'verbose' alias to 'bpf_verifier_log_write' in verifier.c.\nInstead  we're adding the  'verbose' cb_print callback and\nremoving the alias.\n\nThis way we have new cb_print callback in place, and all\nthe 'verbose(env, ...) calls in verifier.c will cleanly\ncast to 'verbose(void *, ...)' so no other change is\nneeded.\n\nSigned-off-by: Jiri Olsa <jolsa@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>","insertions":54,"deletions":47,"filepaths":{"kernel/bpf/disasm.c":{"insertions":26,"deletions":26},"kernel/bpf/disasm.h":{"insertions":1,"deletions":4},"kernel/bpf/verifier.c":{"insertions":27,"deletions":17}}},"4b81ccebaeee885ab1aa1438133f2991e3a2b6ea":{"author":"Thadeu Lima de Souza Cascardo","email":"cascardo@canonical.com","date":"2021-04-27 13:12:12 UTC","message":"bpf, ringbuf: Deny reserve of buffers larger than ringbuf\n\nA BPF program might try to reserve a buffer larger than the ringbuf size.\nIf the consumer pointer is way ahead of the producer, that would be\nsuccessfully reserved, allowing the BPF program to read or write out of\nthe ringbuf allocated area.\n\nReported-by: Ryota Shiga (Flatt Security)\nFixes: 457f44363a88 (\"bpf: Implement BPF ring buffer and verifier support for it\")\nSigned-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Andrii Nakryiko <andrii@kernel.org>\nAcked-by: Alexei Starovoitov <ast@kernel.org>","insertions":3,"deletions":0,"filepaths":{"kernel/bpf/ringbuf.c":{"insertions":3,"deletions":0}}},"457f44363a8894135c85b7a9afd2bd8196db24ab":{"author":"Andrii Nakryiko","email":"andriin@fb.com","date":"2020-05-29 07:54:20 UTC","message":"bpf: Implement BPF ring buffer and verifier support for it\n\nThis commit adds a new MPSC ring buffer implementation into BPF ecosystem,\nwhich allows multiple CPUs to submit data to a single shared ring buffer. On\nthe consumption side, only single consumer is assumed.\n\nMotivation\n----------\nThere are two distinctive motivators for this work, which are not satisfied by\nexisting perf buffer, which prompted creation of a new ring buffer\nimplementation.\n  - more efficient memory utilization by sharing ring buffer across CPUs;\n  - preserving ordering of events that happen sequentially in time, even\n  across multiple CPUs (e.g., fork/exec/exit events for a task).\n\nThese two problems are independent, but perf buffer fails to satisfy both.\nBoth are a result of a choice to have per-CPU perf ring buffer.  Both can be\nalso solved by having an MPSC implementation of ring buffer. The ordering\nproblem could technically be solved for perf buffer with some in-kernel\ncounting, but given the first one requ","insertions":882,"deletions":70,"filepaths":{"include/linux/bpf.h":{"insertions":13,"deletions":0},"include/linux/bpf_types.h":{"insertions":1,"deletions":0},"include/linux/bpf_verifier.h":{"insertions":4,"deletions":0},"include/uapi/linux/bpf.h":{"insertions":83,"deletions":1},"kernel/bpf/Makefile":{"insertions":1,"deletions":1},"kernel/bpf/helpers.c":{"insertions":10,"deletions":0},"kernel/bpf/ringbuf.c":{"insertions":501,"deletions":0},"kernel/bpf/syscall.c":{"insertions":12,"deletions":0},"kernel/bpf/verifier.c":{"insertions":146,"deletions":49},"kernel/trace/bpf_trace.c":{"insertions":10,"deletions":0},"tools/include/uapi/linux/bpf.h":{"insertions":83,"deletions":1},"tools/testing/selftests/bpf/verifier/and.c":{"insertions":2,"deletions":2},"tools/testing/selftests/bpf/verifier/array_access.c":{"insertions":2,"deletions":2},"tools/testing/selftests/bpf/verifier/bounds.c":{"insertions":3,"deletions":3},"tools/testing/selftests/bpf/verifier/calls.c":{"insertions":1,"deletions":1},"tools/testing/selftests/bpf/verifier/direct_value_access.c":{"insertions":2,"deletions":2},"tools/testing/selftests/bpf/verifier/helper_access_var_len.c":{"insertions":1,"deletions":1},"tools/testing/selftests/bpf/verifier/helper_value_access.c":{"insertions":3,"deletions":3},"tools/testing/selftests/bpf/verifier/value_ptr_arith.c":{"insertions":4,"deletions":4}}},"049c4e13714ecbca567b4d5f6d563f05d431c80e":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-05-10 13:10:44 UTC","message":"bpf: Fix alu32 const subreg bound tracking on bitwise operations\n\nFix a bug in the verifier's scalar32_min_max_*() functions which leads to\nincorrect tracking of 32 bit bounds for the simulation of and/or/xor bitops.\nWhen both the src & dst subreg is a known constant, then the assumption is\nthat scalar_min_max_*() will take care to update bounds correctly. However,\nthis is not the case, for example, consider a register R2 which has a tnum\nof 0xffffffff00000000, meaning, lower 32 bits are known constant and in this\ncase of value 0x00000001. R2 is then and'ed with a register R3 which is a\n64 bit known constant, here, 0x100000002.\n\nWhat can be seen in line '10:' is that 32 bit bounds reach an invalid state\nwhere {u,s}32_min_value > {u,s}32_max_value. The reason is scalar32_min_max_*()\ndelegates 32 bit bounds updates to scalar_min_max_*(), however, that really\nonly takes place when both the 64 bit src & dst register is a known constant.\nGiven scalar32_min_max_*() is intended to be designed ","insertions":9,"deletions":13,"filepaths":{"kernel/bpf/verifier.c":{"insertions":9,"deletions":13}}},"2921c90d471889242c24cff529043afb378937fa":{"author":"Yonghong Song","email":"yhs@fb.com","date":"2020-08-25 06:46:08 UTC","message":"bpf: Fix a verifier failure with xor\n\nbpf selftest test_progs/test_sk_assign failed with llvm 11 and llvm 12.\nCompared to llvm 10, llvm 11 and 12 generates xor instruction which\nis not handled properly in verifier. The following illustrates the\nproblem:\n\n  16: (b4) w5 = 0\n  17: ... R5_w=inv0 ...\n  ...\n  132: (a4) w5 ^= 1\n  133: ... R5_w=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) ...\n  ...\n  37: (bc) w8 = w5\n  38: ... R5=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff))\n          R8_w=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) ...\n  ...\n  41: (bc) w3 = w8\n  42: ... R3_w=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) ...\n  45: (56) if w3 != 0x0 goto pc+1\n   ... R3_w=inv0 ...\n  46: (b7) r1 = 34\n  47: R1_w=inv34 R7=pkt(id=0,off=26,r=38,imm=0)\n  47: (0f) r7 += r1\n  48: R1_w=invP34 R3_w=inv0 R7_w=pkt(id=0,off=60,r=38,imm=0)\n  48: (b4) w9 = 0\n  49: R1_w=invP34 R3_w=inv0 R7_w=pkt(id=0,off=60,r=38,imm=0)\n  49: (69) r1 = *(u16 *)(r7 +0)\n  invalid a","insertions":66,"deletions":0,"filepaths":{"kernel/bpf/verifier.c":{"insertions":66,"deletions":0}}},"d1f82808877bb10d3deee7cf3374a4eb3fb582db":{"author":"Thadeu Lima de Souza Cascardo","email":"cascardo@canonical.com","date":"2021-05-05 12:47:06 UTC","message":"io_uring: truncate lengths larger than MAX_RW_COUNT on provide buffers\n\nRead and write operations are capped to MAX_RW_COUNT. Some read ops rely on\nthat limit, and that is not guaranteed by the IORING_OP_PROVIDE_BUFFERS.\n\nTruncate those lengths when doing io_add_buffers, so buffer addresses still\nuse the uncapped length.\n\nAlso, take the chance and change struct io_buffer len member to __u32, so\nit matches struct io_provide_buffer len member.\n\nThis fixes CVE-2021-3491, also reported as ZDI-CAN-13546.\n\nFixes: ddf0322db79c (\"io_uring: add IORING_OP_PROVIDE_BUFFERS\")\nReported-by: Billy Jheng Bing-Jhong (@st424204)\nSigned-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>","insertions":2,"deletions":2,"filepaths":{"fs/io_uring.c":{"insertions":2,"deletions":2}}},"5a2e745d4d430c4dbeeeb448c3d5c0c3109e511e":{"author":"Jens Axboe","email":"axboe@kernel.dk","date":"2020-02-23 23:23:11 UTC","message":"io_uring: buffer registration infrastructure\n\nThis just prepares the ring for having lists of buffers associated with\nit, that the application can provide for SQEs to consume instead of\nproviding their own.\n\nThe buffers are organized by group ID.\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>","insertions":35,"deletions":0,"filepaths":{"fs/io_uring.c":{"insertions":35,"deletions":0}}},"ddf0322db79c5984dc1a1db890f946dd19b7d6d9":{"author":"Jens Axboe","email":"axboe@kernel.dk","date":"2020-02-23 23:41:33 UTC","message":"io_uring: add IORING_OP_PROVIDE_BUFFERS\n\nIORING_OP_PROVIDE_BUFFERS uses the buffer registration infrastructure to\nsupport passing in an addr/len that is associated with a buffer ID and\nbuffer group ID. The group ID is used to index and lookup the buffers,\nwhile the buffer ID can be used to notify the application which buffer\nin the group was used. The addr passed in is the starting buffer address,\nand length is each buffer length. A number of buffers to add with can be\nspecified, in which case addr is incremented by length for each addition,\nand each buffer increments the buffer ID specified.\n\nNo validation is done of the buffer ID. If the application provides\nbuffers within the same group with identical buffer IDs, then it'll have\na hard time telling which buffer ID was used. The only restriction is\nthat the buffer ID can be a max of 16-bits in size, so USHRT_MAX is the\nmaximum ID that can be used.\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>","insertions":3,"deletions":145,"filepaths":{"fs/io_uring.c":{"insertions":1,"deletions":137},"include/uapi/linux/io_uring.h":{"insertions":2,"deletions":8}}},"25c891a949bf918b59cbc6e4932015ba4c35c333":{},"8fee52ab9da87d82bc6de9ebb3480fff9b4d53e6":{},"7c03e2cda4a584cadc398e8f6641ca9988a39d52":{"author":"Miklos Szeredi","email":"mszeredi@redhat.com","date":"2020-12-14 14:26:13 UTC","message":"vfs: move cap_convert_nscap() call into vfs_setxattr()\n\ncap_convert_nscap() does permission checking as well as conversion of the\nxattr value conditionally based on fs's user-ns.\n\nThis is needed by overlayfs and probably other layered fs (ecryptfs) and is\nwhat vfs_foo() is supposed to do anyway.\n\nSigned-off-by: Miklos Szeredi <mszeredi@redhat.com>\nAcked-by: James Morris <jamorris@linux.microsoft.com>","insertions":13,"deletions":9,"filepaths":{"fs/xattr.c":{"insertions":11,"deletions":6},"include/linux/capability.h":{"insertions":1,"deletions":1},"security/commoncap.c":{"insertions":1,"deletions":2}}},"08b5d5014a27e717826999ad20e394a8811aae92":{"author":"Frank van der Linden","email":"fllinden@amazon.com","date":"2020-06-23 22:39:18 UTC","message":"xattr: break delegations in {set,remove}xattr\n\nset/removexattr on an exported filesystem should break NFS delegations.\nThis is true in general, but also for the upcoming support for\nRFC 8726 (NFSv4 extended attribute support). Make sure that they do.\n\nAdditionally, they need to grow a _locked variant, since callers might\ncall this with i_rwsem held (like the NFS server code).\n\nCc: stable@vger.kernel.org # v4.9+\nCc: linux-fsdevel@vger.kernel.org\nCc: Al Viro <viro@zeniv.linux.org.uk>\nSigned-off-by: Frank van der Linden <fllinden@amazon.com>\nSigned-off-by: Chuck Lever <chuck.lever@oracle.com>","insertions":79,"deletions":7,"filepaths":{"fs/xattr.c":{"insertions":77,"deletions":7},"include/linux/xattr.h":{"insertions":2,"deletions":0}}},"8db6c34f1dbc8e06aa016a9b829b06902c3e1340":{"author":"Serge E. Hallyn","email":"serge@hallyn.com","date":"2017-05-08 18:11:56 UTC","message":"Introduce v3 namespaced file capabilities\n\nRoot in a non-initial user ns cannot be trusted to write a traditional\nsecurity.capability xattr.  If it were allowed to do so, then any\nunprivileged user on the host could map his own uid to root in a private\nnamespace, write the xattr, and execute the file with privilege on the\nhost.\n\nHowever supporting file capabilities in a user namespace is very\ndesirable.  Not doing so means that any programs designed to run with\nlimited privilege must continue to support other methods of gaining and\ndropping privilege.  For instance a program installer must detect\nwhether file capabilities can be assigned, and assign them if so but set\nsetuid-root otherwise.  The program in turn must know how to drop\npartial capabilities, and do so only if setuid-root.\n\nThis patch introduces v3 of the security.capability xattr.  It builds a\nvfs_ns_cap_data struct by appending a uid_t rootid to struct\nvfs_cap_data.  This is the absolute uid_t (that is, the uid_t in user\nn","insertions":280,"deletions":22,"filepaths":{"fs/xattr.c":{"insertions":6,"deletions":0},"include/linux/capability.h":{"insertions":2,"deletions":0},"include/linux/security.h":{"insertions":2,"deletions":0},"include/uapi/linux/capability.h":{"insertions":19,"deletions":3},"security/commoncap.c":{"insertions":251,"deletions":19}}},"5be196e5f925dab2309530fabce69c2e562b9791":{"author":"Christoph Hellwig","email":"hch@lst.de","date":"2006-01-10 04:51:55 UTC","message":"[PATCH] add vfs_* helpers for xattr operations\n\nAdd vfs_getxattr, vfs_setxattr and vfs_removexattr helpers for common checks\naround invocation of the xattr methods.  NFSD already was missing some of the\nchecks and there will be more soon.\n\nSigned-off-by: Christoph Hellwig <hch@lst.de>\nCc: James Morris <jmorris@namei.org>\n\n(James, I haven't touched selinux yet because it's doing various odd things\nand I'm not sure how it would interact with the security attribute fallbacks\nyou added.  Could you investigate whether it could use vfs_getxattr or if not\nadd a __vfs_getxattr helper to share the bits it is fine with?)\n\nFor NFSv4: instead of just converting it add an nfsd_getxattr helper for the\ncode shared by NFSv2/3 and NFSv4 ACLs.  In fact that code isn't even\nNFS-specific, but I'll wait for more users to pop up first before moving it to\ncommon code.\n\nSigned-off-by: Christoph Hellwig <hch@lst.de>\nAcked-by: Dave Kleikamp <shaggy@austin.ibm.com>\nSigned-off-by: Adrian Bunk <bunk@stusta.de>\nSign","insertions":145,"deletions":130,"filepaths":{"fs/nfsd/vfs.c":{"insertions":48,"deletions":77},"fs/xattr.c":{"insertions":93,"deletions":53},"include/linux/xattr.h":{"insertions":4,"deletions":0}}},"04c4f2ee3f68c9a4bf1653d15f1a9a435ae33f7a":{"author":"Reiji Watanabe","email":"reijiw@google.com","date":"2021-04-13 15:47:40 UTC","message":"KVM: VMX: Don't use vcpu->run->internal.ndata as an array index\n\n__vmx_handle_exit() uses vcpu->run->internal.ndata as an index for\nan array access.  Since vcpu->run is (can be) mapped to a user address\nspace with a writer permission, the 'ndata' could be updated by the\nuser process at anytime (the user process can set it to outside the\nbounds of the array).\nSo, it is not safe that __vmx_handle_exit() uses the 'ndata' that way.\n\nFixes: 1aa561b1a4c0 (\"kvm: x86: Add \"last CPU\" to some KVM_EXIT information\")\nSigned-off-by: Reiji Watanabe <reijiw@google.com>\nReviewed-by: Jim Mattson <jmattson@google.com>\nMessage-Id: <20210413154739.490299-1-reijiw@google.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":5,"deletions":5,"filepaths":{"arch/x86/kvm/vmx/vmx.c":{"insertions":5,"deletions":5}}},"8e53324021645f820a01bf8aa745711c802c8542":{"author":"Sean Christopherson","email":"sean.j.christopherson@intel.com","date":"2020-11-06 09:03:12 UTC","message":"KVM: VMX: Convert vcpu_vmx.exit_reason to a union\n\nConvert vcpu_vmx.exit_reason from a u32 to a union (of size u32).  The\nfull VM_EXIT_REASON field is comprised of a 16-bit basic exit reason in\nbits 15:0, and single-bit modifiers in bits 31:16.\n\nHistorically, KVM has only had to worry about handling the \"failed\nVM-Entry\" modifier, which could only be set in very specific flows and\nrequired dedicated handling.  I.e. manually stripping the FAILED_VMENTRY\nbit was a somewhat viable approach.  But even with only a single bit to\nworry about, KVM has had several bugs related to comparing a basic exit\nreason against the full exit reason store in vcpu_vmx.\n\nUpcoming Intel features, e.g. SGX, will add new modifier bits that can\nbe set on more or less any VM-Exit, as opposed to the significantly more\nrestricted FAILED_VMENTRY, i.e. correctly handling everything in one-off\nflows isn't scalable.  Tracking exit reason in a union forces code to\nexplicitly choose between consuming the full exit reason ","insertions":86,"deletions":49,"filepaths":{"arch/x86/kvm/vmx/nested.c":{"insertions":27,"deletions":15},"arch/x86/kvm/vmx/vmx.c":{"insertions":35,"deletions":33},"arch/x86/kvm/vmx/vmx.h":{"insertions":24,"deletions":1}}},"1aa561b1a4c0ae2a9a9b9c21a84b5ca66b4775d8":{"author":"Jim Mattson","email":"jmattson@google.com","date":"2020-06-03 23:56:21 UTC","message":"kvm: x86: Add \"last CPU\" to some KVM_EXIT information\n\nMore often than not, a failed VM-entry in an x86 production\nenvironment is induced by a defective CPU. To help identify the bad\nhardware, include the id of the last logical CPU to run a vCPU in the\ninformation provided to userspace on a KVM exit for failed VM-entry or\nfor KVM internal errors not associated with emulation. The presence of\nthis additional information is indicated by a new capability,\nKVM_CAP_LAST_CPU.\n\nSigned-off-by: Jim Mattson <jmattson@google.com>\nReviewed-by: Oliver Upton <oupton@google.com>\nReviewed-by: Peter Shier <pshier@google.com>\nMessage-Id: <20200603235623.245638-5-jmattson@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":15,"deletions":3,"filepaths":{"Documentation/virt/kvm/api.rst":{"insertions":1,"deletions":0},"arch/x86/kvm/svm/svm.c":{"insertions":3,"deletions":1},"arch/x86/kvm/vmx/vmx.c":{"insertions":8,"deletions":2},"arch/x86/kvm/x86.c":{"insertions":1,"deletions":0},"include/uapi/linux/kvm.h":{"insertions":2,"deletions":0}}},"8a14fe4f0c54f27c89389d13c4a1e467a88c35ea":{"author":"Jim Mattson","email":"jmattson@google.com","date":"2020-06-03 23:56:22 UTC","message":"kvm: x86: Move last_cpu into kvm_vcpu_arch as last_vmentry_cpu\n\nBoth the vcpu_vmx structure and the vcpu_svm structure have a\n'last_cpu' field. Move the common field into the kvm_vcpu_arch\nstructure. For clarity, rename it to 'last_vmentry_cpu.'\n\nSuggested-by: Sean Christopherson <sean.j.christopherson@intel.com>\nSigned-off-by: Jim Mattson <jmattson@google.com>\nReviewed-by: Oliver Upton <oupton@google.com>\nReviewed-by: Peter Shier <pshier@google.com>\nMessage-Id: <20200603235623.245638-6-jmattson@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":16,"deletions":13,"filepaths":{"arch/x86/include/asm/kvm_host.h":{"insertions":0,"deletions":3},"arch/x86/kvm/svm/sev.c":{"insertions":1,"deletions":1},"arch/x86/kvm/svm/svm.c":{"insertions":3,"deletions":3},"arch/x86/kvm/svm/svm.h":{"insertions":3,"deletions":0},"arch/x86/kvm/vmx/vmx.c":{"insertions":6,"deletions":6},"arch/x86/kvm/vmx/vmx.h":{"insertions":3,"deletions":0}}},"0c18f29aae7ce3dadd26d8ee3505d07cc982df75":{"author":"Mimi Zohar","email":"zohar@linux.ibm.com","date":"2021-06-22 11:36:41 UTC","message":"module: limit enabling module.sig_enforce\n\nIrrespective as to whether CONFIG_MODULE_SIG is configured, specifying\n\"module.sig_enforce=1\" on the boot command line sets \"sig_enforce\".\nOnly allow \"sig_enforce\" to be set when CONFIG_MODULE_SIG is configured.\n\nThis patch makes the presence of /sys/module/module/parameters/sig_enforce\ndependent on CONFIG_MODULE_SIG=y.\n\nFixes: fda784e50aac (\"module: export module signature enforcement status\")\nReported-by: Nayna Jain <nayna@linux.ibm.com>\nTested-by: Mimi Zohar <zohar@linux.ibm.com>\nTested-by: Jessica Yu <jeyu@kernel.org>\nSigned-off-by: Mimi Zohar <zohar@linux.ibm.com>\nSigned-off-by: Jessica Yu <jeyu@kernel.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":9,"deletions":5,"filepaths":{"kernel/module.c":{"insertions":9,"deletions":5}}},"8db5da0b8618df79eceea99672e205d4a2a6309e":{"author":"Mimi Zohar","email":"zohar@linux.ibm.com","date":"2019-01-28 00:03:45 UTC","message":"x86/ima: require signed kernel modules\n\nHave the IMA architecture specific policy require signed kernel modules\non systems with secure boot mode enabled; and coordinate the different\nsignature verification methods, so only one signature is required.\n\nRequiring appended kernel module signatures may be configured, enabled\non the boot command line, or with this patch enabled in secure boot\nmode.  This patch defines set_module_sig_enforced().\n\nTo coordinate between appended kernel module signatures and IMA\nsignatures, only define an IMA MODULE_CHECK policy rule if\nCONFIG_MODULE_SIG is not enabled.  A custom IMA policy may still define\nand require an IMA signature.\n\nSigned-off-by: Mimi Zohar <zohar@linux.ibm.com>\nReviewed-by: Luis Chamberlain <mcgrof@kernel.org>\nAcked-by: Jessica Yu <jeyu@kernel.org>","insertions":18,"deletions":1,"filepaths":{"arch/x86/kernel/ima_arch.c":{"insertions":8,"deletions":1},"include/linux/module.h":{"insertions":5,"deletions":0},"kernel/module.c":{"insertions":5,"deletions":0}}},"0be964be0d45084245673c971d72a4b51690231d":{"author":"Peter Zijlstra","email":"peterz@infradead.org","date":"2015-05-27 01:39:35 UTC","message":"module: Sanitize RCU usage and locking\n\nCurrently the RCU usage in module is an inconsistent mess of RCU and\nRCU-sched, this is broken for CONFIG_PREEMPT where synchronize_rcu()\ndoes not imply synchronize_sched().\n\nMost usage sites use preempt_{dis,en}able() which is RCU-sched, but\n(most of) the modification sites use synchronize_rcu(). With the\nexception of the module bug list, which actually uses RCU.\n\nConvert everything over to RCU-sched.\n\nFurthermore add lockdep asserts to all sites, because it's not at all\nclear to me the required locking is observed, esp. on exported\nfunctions.\n\nCc: Rusty Russell <rusty@rustcorp.com.au>\nAcked-by: \"Paul E. McKenney\" <paulmck@linux.vnet.ibm.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nSigned-off-by: Rusty Russell <rusty@rustcorp.com.au>","insertions":47,"deletions":12,"filepaths":{"include/linux/module.h":{"insertions":10,"deletions":2},"kernel/module.c":{"insertions":32,"deletions":8},"lib/bug.c":{"insertions":5,"deletions":2}}},"fda784e50aace694ec2e4e16e2de07b91a938563":{"author":"Bruno E. O. Meneguele","email":"brdeoliv@redhat.com","date":"2017-10-24 17:37:00 UTC","message":"module: export module signature enforcement status\n\nA static variable sig_enforce is used as status var to indicate the real\nvalue of CONFIG_MODULE_SIG_FORCE, once this one is set the var will hold\ntrue, but if the CONFIG is not set the status var will hold whatever\nvalue is present in the module.sig_enforce kernel cmdline param: true\nwhen =1 and false when =0 or not present.\n\nConsidering this cmdline param take place over the CONFIG value when\nit's not set, other places in the kernel could misbehave since they\nwould have only the CONFIG_MODULE_SIG_FORCE value to rely on. Exporting\nthis status var allows the kernel to rely in the effective value of\nmodule signature enforcement, being it from CONFIG value or cmdline\nparam.\n\nSigned-off-by: Bruno E. O. Meneguele <brdeoliv@redhat.com>\nSigned-off-by: Mimi Zohar <zohar@linux.vnet.ibm.com>","insertions":17,"deletions":0,"filepaths":{"include/linux/module.h":{"insertions":7,"deletions":0},"kernel/module.c":{"insertions":10,"deletions":0}}},"6727bb9c6abe836d88191ce13bfdd7a53c245e15":{"author":"Luis R. Rodriguez","email":"mcgrof@suse.com","date":"2015-05-27 01:39:39 UTC","message":"kernel/module.c: avoid ifdefs for sig_enforce declaration\n\nThere's no need to require an ifdef over the declaration\nof sig_enforce as IS_ENABLED() can be used. While at it,\nthere's no harm in exposing this kernel parameter outside of\nCONFIG_MODULE_SIG as it'd be a no-op on non module sig\nkernels.\n\nNow, technically we should in theory be able to remove\nthe #ifdef'ery over the declaration of the module parameter\nas we are also trusting the bool_enable_only code for\nCONFIG_MODULE_SIG kernels but for now remain paranoid\nand keep it.\n\nWith time if no one can put a bullet through bool_enable_only\nand if there are no technical requirements over not exposing\nCONFIG_MODULE_SIG_FORCE with the measures in place by\nbool_enable_only we could remove this last ifdef.\n\nCc: Rusty Russell <rusty@rustcorp.com.au>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Kees Cook <keescook@chromium.org>\nCc: Tejun Heo <tj@kernel.org>\nCc: Ingo Molnar <mingo@kernel.org>\nCc: linux-kernel@vger.kernel.org\nCc: cocci@sys","insertions":2,"deletions":7,"filepaths":{"kernel/module.c":{"insertions":2,"deletions":7}}},"106a4ee258d14818467829bf0e12aeae14c16cd7":{"author":"Rusty Russell","email":"rusty@rustcorp.com.au","date":"2012-09-26 09:09:40 UTC","message":"module: signature checking hook\n\nWe do a very simple search for a particular string appended to the module\n(which is cache-hot and about to be SHA'd anyway).  There's both a config\noption and a boot parameter which control whether we accept or fail with\nunsigned modules and modules that are signed with an unknown key.\n\nIf module signing is enabled, the kernel will be tainted if a module is\nloaded that is unsigned or has a signature for which we don't have the\nkey.\n\n(Useful feedback and tweaks by David Howells <dhowells@redhat.com>)\n\nSigned-off-by: Rusty Russell <rusty@rustcorp.com.au>\nSigned-off-by: David Howells <dhowells@redhat.com>\nSigned-off-by: Rusty Russell <rusty@rustcorp.com.au>","insertions":157,"deletions":1,"filepaths":{"Documentation/kernel-parameters.txt":{"insertions":6,"deletions":0},"include/linux/module.h":{"insertions":8,"deletions":0},"init/Kconfig":{"insertions":14,"deletions":0},"kernel/Makefile":{"insertions":1,"deletions":0},"kernel/module-internal.h":{"insertions":13,"deletions":0},"kernel/module.c":{"insertions":92,"deletions":1},"kernel/module_signing.c":{"insertions":23,"deletions":0}}},"e305509e678b3a4af2b3cfd410f409f7cdaabb52":{"author":"Lin Ma","email":"linma@zju.edu.cn","date":"2021-05-30 13:37:43 UTC","message":"Bluetooth: use correct lock to prevent UAF of hdev object\n\nThe hci_sock_dev_event() function will cleanup the hdev object for\nsockets even if this object may still be in used within the\nhci_sock_bound_ioctl() function, result in UAF vulnerability.\n\nThis patch replace the BH context lock to serialize these affairs\nand prevent the race condition.\n\nSigned-off-by: Lin Ma <linma@zju.edu.cn>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>","insertions":2,"deletions":2,"filepaths":{"net/bluetooth/hci_sock.c":{"insertions":2,"deletions":2}}},"040030ef7d907107e6489b39da518bdf94136d68":{"author":"Marcel Holtmann","email":"marcel@holtmann.org","date":"2012-02-20 13:50:37 UTC","message":"Bluetooth: Remove HCI notifier handling\n\nThe HCI notifier handling was never used outside of Bluetooth core layer\nand thus remove it and replace it with direct function calls. Also move\nthe stack internal event generation into the HCI socket layer.\n\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>\nSigned-off-by: Johan Hedberg <johan.hedberg@intel.com>","insertions":64,"deletions":94,"filepaths":{"include/net/bluetooth/hci_core.h":{"insertions":2,"deletions":5},"net/bluetooth/hci_conn.c":{"insertions":0,"deletions":1},"net/bluetooth/hci_core.c":{"insertions":1,"deletions":15},"net/bluetooth/hci_event.c":{"insertions":0,"deletions":29},"net/bluetooth/hci_sock.c":{"insertions":61,"deletions":44}}},"d5f9023fa61ee8b94f37a93f08e94b136cf1e463":{"author":"Thadeu Lima de Souza Cascardo","email":"cascardo@canonical.com","date":"2021-06-19 16:18:13 UTC","message":"can: bcm: delay release of struct bcm_op after synchronize_rcu()\n\ncan_rx_register() callbacks may be called concurrently to the call to\ncan_rx_unregister(). The callbacks and callback data, though, are\nprotected by RCU and the struct sock reference count.\n\nSo the callback data is really attached to the life of sk, meaning\nthat it should be released on sk_destruct. However, bcm_remove_op()\ncalls tasklet_kill(), and RCU callbacks may be called under RCU\nsoftirq, so that cannot be used on kernels before the introduction of\nHRTIMER_MODE_SOFT.\n\nHowever, bcm_rx_handler() is called under RCU protection, so after\ncalling can_rx_unregister(), we may call synchronize_rcu() in order to\nwait for any RCU read-side critical sections to finish. That is,\nbcm_rx_handler() won't be called anymore for those ops. So, we only\nfree them, after we do that synchronize_rcu().\n\nFixes: ffd980f976e7 (\"[CAN]: Add broadcast manager (bcm) protocol\")\nLink: https://lore.kernel.org/r/20210619161813.2098382-1-cascardo@ca","insertions":6,"deletions":1,"filepaths":{"net/can/bcm.c":{"insertions":6,"deletions":1}}},"ffd980f976e7fd666c2e61bf8ab35107efd11828":{"author":"Oliver Hartkopp","email":"oliver.hartkopp@volkswagen.de","date":"2007-11-16 23:53:52 UTC","message":"[CAN]: Add broadcast manager (bcm) protocol\n\nThis patch adds the CAN broadcast manager (bcm) protocol.\n\nSigned-off-by: Oliver Hartkopp <oliver.hartkopp@volkswagen.de>\nSigned-off-by: Urs Thuermann <urs.thuermann@volkswagen.de>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":1642,"deletions":0,"filepaths":{"include/linux/can/bcm.h":{"insertions":65,"deletions":0},"net/can/Kconfig":{"insertions":13,"deletions":0},"net/can/Makefile":{"insertions":3,"deletions":0},"net/can/bcm.c":{"insertions":1561,"deletions":0}}},"c2701b370e6b4d0022043691b5ac7adad015e4fc":{"author":"Oliver Hartkopp","email":"socketcan@hartkopp.net","date":"2017-04-26 18:14:34 UTC","message":"can: fix CAN BCM build with CONFIG_PROC_FS disabled\n\nThe introduced namespace support moved the BCM variables for procfs into a\nper-net data structure. This leads to a build failure with disabled procfs:\n\non x86_64:\n\nwhen CONFIG_PROC_FS is not enabled:\n\n../net/can/bcm.c:1541:14: error: 'struct netns_can' has no member named 'bcmproc_dir'\n../net/can/bcm.c:1601:14: error: 'struct netns_can' has no member named 'bcmproc_dir'\n../net/can/bcm.c:1696:11: error: 'struct netns_can' has no member named 'bcmproc_dir'\n../net/can/bcm.c:1707:15: error: 'struct netns_can' has no member named 'bcmproc_dir'\n\nhttp://marc.info/?l=linux-can&m=149321842526524&w=2\n\nReported-by: Randy Dunlap <rdunlap@infradead.org>\nSigned-off-by: Oliver Hartkopp <socketcan@hartkopp.net>\nSigned-off-by: Marc Kleine-Budde <mkl@pengutronix.de>","insertions":13,"deletions":8,"filepaths":{"net/can/bcm.c":{"insertions":13,"deletions":8}}},"384317ef4187f59a1cb7a6163444d757340b3bb4":{"author":"Oliver Hartkopp","email":"socketcan@hartkopp.net","date":"2017-04-25 06:19:42 UTC","message":"can: network namespace support for CAN_BCM protocol\n\nThe CAN_BCM protocol and its procfs entries were not implemented as per-net\nin the initial network namespace support by Mario Kicherer (8e8cda6d737d).\nThis patch adds the missing per-net functionality for the CAN BCM.\n\nSigned-off-by: Oliver Hartkopp <socketcan@hartkopp.net>\nSigned-off-by: Marc Kleine-Budde <mkl@pengutronix.de>","insertions":58,"deletions":33,"filepaths":{"include/net/netns/can.h":{"insertions":1,"deletions":0},"net/can/bcm.c":{"insertions":57,"deletions":33}}},"99c23da0eed4fd20cae8243f2b51e10e66aa0951":{"author":"Takashi Iwai","email":"tiwai@suse.de","date":"2021-08-28 16:18:18 UTC","message":"Bluetooth: sco: Fix lock_sock() blockage by memcpy_from_msg()\n\nThe sco_send_frame() also takes lock_sock() during memcpy_from_msg()\ncall that may be endlessly blocked by a task with userfaultd\ntechnique, and this will result in a hung task watchdog trigger.\n\nJust like the similar fix for hci_sock_sendmsg() in commit\n92c685dc5de0 (\"Bluetooth: reorganize functions...\"), this patch moves\nthe  memcpy_from_msg() out of lock_sock() for addressing the hang.\n\nThis should be the last piece for fixing CVE-2021-3640 after a few\nalready queued fixes.\n\nSigned-off-by: Takashi Iwai <tiwai@suse.de>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>","insertions":16,"deletions":8,"filepaths":{"net/bluetooth/sco.c":{"insertions":16,"deletions":8}}},"b9dbdbc1f4404cba2e64939c30c87d59c9796e4e":{"author":"Gustavo F. Padovan","email":"padovan@profusion.mobi","date":"2010-05-01 19:15:35 UTC","message":"Bluetooth: Trivial clean ups to SCO\n\nRemove extra braces and labels, break over column 80 lines, etc\n\nSigned-off-by: Gustavo F. Padovan <padovan@profusion.mobi>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>","insertions":11,"deletions":12,"filepaths":{"net/bluetooth/sco.c":{"insertions":11,"deletions":12}}},"6039aa73a1323edc2d6d93a22505d4dc28f38e3f":{"author":"Gustavo Padovan","email":"gustavo.padovan@collabora.co.uk","date":"2012-05-23 07:04:18 UTC","message":"Bluetooth: Remove most of the inline usage\n\nOnly obvious cases were left as inline, mostly oneline functions.\n\nSigned-off-by: Gustavo Padovan <gustavo.padovan@collabora.co.uk>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>","insertions":104,"deletions":126,"filepaths":{"net/bluetooth/bnep/core.c":{"insertions":2,"deletions":2},"net/bluetooth/bnep/netdev.c":{"insertions":3,"deletions":3},"net/bluetooth/hci_core.c":{"insertions":17,"deletions":16},"net/bluetooth/hci_event.c":{"insertions":59,"deletions":85},"net/bluetooth/hci_sock.c":{"insertions":4,"deletions":2},"net/bluetooth/hidp/core.c":{"insertions":2,"deletions":2},"net/bluetooth/mgmt.c":{"insertions":1,"deletions":1},"net/bluetooth/rfcomm/core.c":{"insertions":9,"deletions":9},"net/bluetooth/rfcomm/tty.c":{"insertions":2,"deletions":2},"net/bluetooth/sco.c":{"insertions":5,"deletions":4}}},"088ce088ec115ee4bc89549b07b182e65dce9235":{"author":"Mikel Astiz","email":"mikel.astiz@bmw-carit.de","date":"2012-04-11 06:48:48 UTC","message":"Bluetooth: Remove unnecessary check\n\nThe function already fails if the given size is greater than the MTU, so\nthere is no need to consider that case afterwards.\n\nSigned-off-by: Mikel Astiz <mikel.astiz.oss@gmail.com>\nAcked-by: Marcel Holtmann <marcel@holtmann.org>\nSigned-off-by: Gustavo Padovan <gustavo@padovan.org>","insertions":4,"deletions":6,"filepaths":{"net/bluetooth/sco.c":{"insertions":4,"deletions":6}}},"6ce8e9ce5989ae13f493062975304700be86d20e":{"author":"Al Viro","email":"viro@zeniv.linux.org.uk","date":"2014-04-07 01:25:44 UTC","message":"new helper: memcpy_from_msg()\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>","insertions":57,"deletions":57,"filepaths":{"crypto/algif_skcipher.c":{"insertions":5,"deletions":5},"drivers/isdn/mISDN/socket.c":{"insertions":1,"deletions":1},"drivers/net/ppp/pppoe.c":{"insertions":1,"deletions":1},"include/linux/skbuff.h":{"insertions":5,"deletions":0},"include/net/sctp/sm.h":{"insertions":1,"deletions":1},"net/appletalk/ddp.c":{"insertions":1,"deletions":1},"net/ax25/af_ax25.c":{"insertions":1,"deletions":1},"net/bluetooth/hci_sock.c":{"insertions":1,"deletions":1},"net/bluetooth/mgmt.c":{"insertions":1,"deletions":1},"net/bluetooth/rfcomm/sock.c":{"insertions":1,"deletions":1},"net/bluetooth/sco.c":{"insertions":1,"deletions":1},"net/caif/caif_socket.c":{"insertions":2,"deletions":2},"net/can/bcm.c":{"insertions":8,"deletions":11},"net/can/raw.c":{"insertions":1,"deletions":1},"net/dccp/proto.c":{"insertions":1,"deletions":1},"net/decnet/af_decnet.c":{"insertions":1,"deletions":1},"net/ieee802154/dgram.c":{"insertions":1,"deletions":1},"net/ieee802154/raw.c":{"insertions":1,"deletions":1},"net/ipv4/ping.c":{"insertions":1,"deletions":1},"net/ipv4/tcp_input.c":{"insertions":1,"deletions":1},"net/irda/af_irda.c":{"insertions":3,"deletions":3},"net/iucv/af_iucv.c":{"insertions":1,"deletions":1},"net/key/af_key.c":{"insertions":1,"deletions":1},"net/l2tp/l2tp_ip.c":{"insertions":1,"deletions":1},"net/l2tp/l2tp_ppp.c":{"insertions":1,"deletions":2},"net/llc/af_llc.c":{"insertions":1,"deletions":1},"net/netlink/af_netlink.c":{"insertions":1,"deletions":1},"net/netrom/af_netrom.c":{"insertions":1,"deletions":1},"net/nfc/llcp_commands.c":{"insertions":2,"deletions":2},"net/nfc/rawsock.c":{"insertions":1,"deletions":1},"net/packet/af_packet.c":{"insertions":2,"deletions":3},"net/phonet/datagram.c":{"insertions":1,"deletions":1},"net/phonet/pep.c":{"insertions":1,"deletions":1},"net/rose/af_rose.c":{"insertions":1,"deletions":1},"net/sctp/sm_make_chunk.c":{"insertions":2,"deletions":2},"net/x25/af_x25.c":{"insertions":1,"deletions":1}}},"1b784140474e4fc94281a49e96c67d29df0efbde":{"author":"Ying Xue","email":"ying.xue@windriver.com","date":"2015-03-02 07:37:48 UTC","message":"net: Remove iocb argument from sendmsg and recvmsg\n\nAfter TIPC doesn't depend on iocb argument in its internal\nimplementations of sendmsg() and recvmsg() hooks defined in proto\nstructure, no any user is using iocb argument in them at all now.\nThen we can drop the redundant iocb argument completely from kinds of\nimplementations of both sendmsg() and recvmsg() in the entire\nnetworking stack.\n\nCc: Christoph Hellwig <hch@lst.de>\nSuggested-by: Al Viro <viro@ZenIV.linux.org.uk>\nSigned-off-by: Ying Xue <ying.xue@windriver.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":302,"deletions":442,"filepaths":{"crypto/algif_hash.c":{"insertions":4,"deletions":4},"crypto/algif_rng.c":{"insertions":2,"deletions":2},"crypto/algif_skcipher.c":{"insertions":4,"deletions":4},"drivers/isdn/mISDN/socket.c":{"insertions":3,"deletions":4},"drivers/net/macvtap.c":{"insertions":4,"deletions":5},"drivers/net/ppp/pppoe.c":{"insertions":4,"deletions":4},"drivers/net/tun.c":{"insertions":2,"deletions":4},"drivers/vhost/net.c":{"insertions":3,"deletions":3},"include/linux/net.h":{"insertions":4,"deletions":6},"include/net/af_vsock.h":{"insertions":2,"deletions":2},"include/net/bluetooth/bluetooth.h":{"insertions":4,"deletions":4},"include/net/inet_common.h":{"insertions":3,"deletions":4},"include/net/ping.h":{"insertions":3,"deletions":4},"include/net/sock.h":{"insertions":7,"deletions":9},"include/net/tcp.h":{"insertions":3,"deletions":4},"include/net/udp.h":{"insertions":1,"deletions":2},"net/appletalk/ddp.c":{"insertions":3,"deletions":4},"net/atm/common.c":{"insertions":3,"deletions":4},"net/atm/common.h":{"insertions":3,"deletions":4},"net/ax25/af_ax25.c":{"insertions":3,"deletions":4},"net/bluetooth/af_bluetooth.c":{"insertions":4,"deletions":4},"net/bluetooth/hci_sock.c":{"insertions":4,"deletions":4},"net/bluetooth/l2cap_sock.c":{"insertions":6,"deletions":6},"net/bluetooth/rfcomm/sock.c":{"insertions":5,"deletions":5},"net/bluetooth/sco.c":{"insertions":5,"deletions":5},"net/caif/caif_socket.c":{"insertions":8,"deletions":9},"net/can/bcm.c":{"insertions":3,"deletions":4},"net/can/raw.c":{"insertions":3,"deletions":4},"net/core/sock.c":{"insertions":6,"deletions":7},"net/dccp/dccp.h":{"insertions":3,"deletions":5},"net/dccp/probe.c":{"insertions":1,"deletions":2},"net/dccp/proto.c":{"insertions":3,"deletions":4},"net/decnet/af_decnet.c":{"insertions":3,"deletions":4},"net/ieee802154/socket.c":{"insertions":9,"deletions":12},"net/ipv4/af_inet.c":{"insertions":5,"deletions":6},"net/ipv4/ping.c":{"insertions":3,"deletions":4},"net/ipv4/raw.c":{"insertions":3,"deletions":4},"net/ipv4/tcp.c":{"insertions":3,"deletions":4},"net/ipv4/udp.c":{"insertions":4,"deletions":5},"net/ipv4/udp_impl.h":{"insertions":2,"deletions":2},"net/ipv6/ping.c":{"insertions":1,"deletions":2},"net/ipv6/raw.c":{"insertions":3,"deletions":5},"net/ipv6/udp.c":{"insertions":4,"deletions":6},"net/ipv6/udp_impl.h":{"insertions":3,"deletions":4},"net/ipx/af_ipx.c":{"insertions":3,"deletions":4},"net/irda/af_irda.c":{"insertions":14,"deletions":15},"net/iucv/af_iucv.c":{"insertions":4,"deletions":4},"net/key/af_key.c":{"insertions":2,"deletions":4},"net/l2tp/l2tp_ip.c":{"insertions":2,"deletions":2},"net/l2tp/l2tp_ip6.c":{"insertions":3,"deletions":5},"net/l2tp/l2tp_ppp.c":{"insertions":3,"deletions":4},"net/llc/af_llc.c":{"insertions":3,"deletions":4},"net/netlink/af_netlink.c":{"insertions":2,"deletions":4},"net/netrom/af_netrom.c":{"insertions":3,"deletions":4},"net/nfc/llcp_sock.c":{"insertions":4,"deletions":4},"net/nfc/rawsock.c":{"insertions":3,"deletions":4},"net/packet/af_packet.c":{"insertions":5,"deletions":6},"net/phonet/datagram.c":{"insertions":3,"deletions":5},"net/phonet/pep.c":{"insertions":3,"deletions":5},"net/phonet/socket.c":{"insertions":3,"deletions":3},"net/rds/rds.h":{"insertions":3,"deletions":4},"net/rds/recv.c":{"insertions":2,"deletions":2},"net/rds/send.c":{"insertions":1,"deletions":2},"net/rose/af_rose.c":{"insertions":3,"deletions":4},"net/rxrpc/af_rxrpc.c":{"insertions":3,"deletions":4},"net/rxrpc/ar-internal.h":{"insertions":4,"deletions":6},"net/rxrpc/ar-output.c":{"insertions":8,"deletions":12},"net/rxrpc/ar-recvmsg.c":{"insertions":2,"deletions":2},"net/sctp/socket.c":{"insertions":3,"deletions":5},"net/socket.c":{"insertions":13,"deletions":65},"net/tipc/socket.c":{"insertions":8,"deletions":15},"net/unix/af_unix.c":{"insertions":21,"deletions":29},"net/vmw_vsock/af_vsock.c":{"insertions":9,"deletions":11},"net/vmw_vsock/vmci_transport.c":{"insertions":1,"deletions":2},"net/x25/af_x25.c":{"insertions":2,"deletions":4}}},"c7dfa4009965a9b2d7b329ee970eb8da0d32f0bc":{"author":"Maxim Levitsky","email":"mlevitsk@redhat.com","date":"2021-07-19 13:05:00 UTC","message":"KVM: nSVM: always intercept VMLOAD/VMSAVE when nested (CVE-2021-3656)\n\nIf L1 disables VMLOAD/VMSAVE intercepts, and doesn't enable\nVirtual VMLOAD/VMSAVE (currently not supported for the nested hypervisor),\nthen VMLOAD/VMSAVE must operate on the L1 physical memory, which is only\npossible by making L0 intercept these instructions.\n\nFailure to do so allowed the nested guest to run VMLOAD/VMSAVE unintercepted,\nand thus read/write portions of the host physical memory.\n\nFixes: 89c8a4984fc9 (\"KVM: SVM: Enable Virtual VMLOAD VMSAVE feature\")\n\nSuggested-by: Paolo Bonzini <pbonzini@redhat.com>\nSigned-off-by: Maxim Levitsky <mlevitsk@redhat.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":3,"deletions":0,"filepaths":{"arch/x86/kvm/svm/nested.c":{"insertions":3,"deletions":0}}},"4b639a9f82fcf15497d1613a29aa1df798a24029":{"author":"Maxim Levitsky","email":"mlevitsk@redhat.com","date":"2021-07-07 12:51:00 UTC","message":"KVM: SVM: add module param to control the #SMI interception\n\nIn theory there are no side effects of not intercepting #SMI,\nbecause then #SMI becomes transparent to the OS and the KVM.\n\nPlus an observation on recent Zen2 CPUs reveals that these\nCPUs ignore #SMI interception and never deliver #SMI VMexits.\n\nThis is also useful to test nested KVM to see that L1\nhandles #SMIs correctly in case when L1 doesn't intercept #SMI.\n\nFinally the default remains the same, the SMI are intercepted\nby default thus this patch doesn't have any effect unless\nnon default module param value is used.\n\nSigned-off-by: Maxim Levitsky <mlevitsk@redhat.com>\nMessage-Id: <20210707125100.677203-4-mlevitsk@redhat.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":14,"deletions":1,"filepaths":{"arch/x86/kvm/svm/nested.c":{"insertions":4,"deletions":0},"arch/x86/kvm/svm/svm.c":{"insertions":9,"deletions":1},"arch/x86/kvm/svm/svm.h":{"insertions":1,"deletions":0}}},"883b0a91f41ab705daa04c24e59d708e457a0bed":{"author":"Joerg Roedel","email":"jroedel@suse.de","date":"2020-03-24 09:41:52 UTC","message":"KVM: SVM: Move Nested SVM Implementation to nested.c\n\nSplit out the code for the nested SVM implementation and move it to a\nseparate file.\n\nSigned-off-by: Joerg Roedel <jroedel@suse.de>\nMessage-Id: <20200324094154.32352-3-joro@8bytes.org>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":1216,"deletions":1145,"filepaths":{"arch/x86/kvm/Makefile":{"insertions":1,"deletions":1},"arch/x86/kvm/svm/nested.c":{"insertions":823,"deletions":0},"arch/x86/kvm/svm/svm.c":{"insertions":11,"deletions":1144},"arch/x86/kvm/svm/svm.h":{"insertions":381,"deletions":0}}},"2f675917efc8a4d469f8be95e6ea55b2310bfd0d":{"author":"Paolo Bonzini","email":"pbonzini@redhat.com","date":"2020-05-18 19:21:22 UTC","message":"KVM: nSVM: pass vmcb_control_area to copy_vmcb_control_area\n\nThis will come in handy when we put a struct vmcb_control_area in\nsvm->nested.\n\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":4,"deletions":6,"filepaths":{"arch/x86/kvm/svm/nested.c":{"insertions":4,"deletions":6}}},"67f0d6d9883c13174669f88adac4f0ee656cc16a":{"author":"Haoran Luo","email":"www@aegistudio.net","date":"2021-07-21 14:12:07 UTC","message":"tracing: Fix bug in rb_per_cpu_empty() that might cause deadloop.\n\nThe \"rb_per_cpu_empty()\" misinterpret the condition (as not-empty) when\n\"head_page\" and \"commit_page\" of \"struct ring_buffer_per_cpu\" points to\nthe same buffer page, whose \"buffer_data_page\" is empty and \"read\" field\nis non-zero.\n\nAn error scenario could be constructed as followed (kernel perspective):\n\n1. All pages in the buffer has been accessed by reader(s) so that all of\nthem will have non-zero \"read\" field.\n\n2. Read and clear all buffer pages so that \"rb_num_of_entries()\" will\nreturn 0 rendering there's no more data to read. It is also required\nthat the \"read_page\", \"commit_page\" and \"tail_page\" points to the same\npage, while \"head_page\" is the next page of them.\n\n3. Invoke \"ring_buffer_lock_reserve()\" with large enough \"length\"\nso that it shot pass the end of current tail buffer page. Now the\n\"head_page\", \"commit_page\" and \"tail_page\" points to the same page.\n\n4. Discard current event with \"ring_buffer_discard_comm","insertions":24,"deletions":4,"filepaths":{"kernel/trace/ring_buffer.c":{"insertions":24,"deletions":4}}},"bf41a158cacba6ca5fc6407a54e7ad8ce1567e2e":{"author":"Steven Rostedt","email":"rostedt@goodmis.org","date":"2008-10-04 06:00:59 UTC","message":"ring-buffer: make reentrant\n\nThis patch replaces the local_irq_save/restore with preempt_disable/\nenable. This allows for interrupts to enter while recording.\nTo write to the ring buffer, you must reserve data, and then\ncommit it. During this time, an interrupt may call a trace function\nthat will also record into the buffer before the commit is made.\n\nThe interrupt will reserve its entry after the first entry, even\nthough the first entry did not finish yet.\n\nThe time stamp delta of the interrupt entry will be zero, since\nin the view of the trace, the interrupt happened during the\nfirst field anyway.\n\nLocking still takes place when the tail/write moves from one page\nto the next. The reader always takes the locks.\n\nA new page pointer is added, called the commit. The write/tail will\nalways point to the end of all entries. The commit field will\npoint to the last committed entry. Only this commit entry may\nupdate the write time stamp.\n\nThe reader can only go up to the commit. It cannot go pa","insertions":374,"deletions":113,"filepaths":{"kernel/trace/ring_buffer.c":{"insertions":374,"deletions":113}}},"ef299cc3fa1a9e1288665a9fdc8bff55629fd359":{"author":"Cong Wang","email":"xiyou.wangcong@gmail.com","date":"2020-03-14 05:29:54 UTC","message":"net_sched: cls_route: remove the right filter from hashtable\n\nroute4_change() allocates a new filter and copies values from\nthe old one. After the new filter is inserted into the hash\ntable, the old filter should be removed and freed, as the final\nstep of the update.\n\nHowever, the current code mistakenly removes the new one. This\nlooks apparently wrong to me, and it causes double \"free\" and\nuse-after-free too, as reported by syzbot.\n\nReported-and-tested-by: syzbot+f9b32aaacd60305d9687@syzkaller.appspotmail.com\nReported-and-tested-by: syzbot+2f8c233f131943d6056d@syzkaller.appspotmail.com\nReported-and-tested-by: syzbot+9c2df9fd5e9445b74e01@syzkaller.appspotmail.com\nFixes: 1109c00547fc (\"net: sched: RCU cls_route\")\nCc: Jamal Hadi Salim <jhs@mojatatu.com>\nCc: Jiri Pirko <jiri@resnulli.us>\nCc: John Fastabend <john.fastabend@gmail.com>\nSigned-off-by: Cong Wang <xiyou.wangcong@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":2,"deletions":2,"filepaths":{"net/sched/cls_route.c":{"insertions":2,"deletions":2}}},"427215d85e8d1476da1a86b8d67aceb485eb3631":{"author":"Miklos Szeredi","email":"mszeredi@redhat.com","date":"2021-08-09 08:19:47 UTC","message":"ovl: prevent private clone if bind mount is not allowed\n\nAdd the following checks from __do_loopback() to clone_private_mount() as\nwell:\n\n - verify that the mount is in the current namespace\n\n - verify that there are no locked children\n\nReported-by: Alois Wohlschlager <alois1@gmx-topmail.de>\nFixes: c771d683a62e (\"vfs: introduce clone_private_mount()\")\nCc: <stable@vger.kernel.org> # v3.18\nSigned-off-by: Miklos Szeredi <mszeredi@redhat.com>","insertions":28,"deletions":14,"filepaths":{"fs/namespace.c":{"insertions":28,"deletions":14}}},"c771d683a62e5d36bc46036f5c07f4f5bb7dda61":{"author":"Miklos Szeredi","email":"mszeredi@suse.cz","date":"2014-10-23 22:14:36 UTC","message":"vfs: introduce clone_private_mount()\n\nOverlayfs needs a private clone of the mount, so create a function for\nthis and export to modules.\n\nSigned-off-by: Miklos Szeredi <mszeredi@suse.cz>","insertions":30,"deletions":0,"filepaths":{"fs/namespace.c":{"insertions":27,"deletions":0},"include/linux/mount.h":{"insertions":3,"deletions":0}}},"5ff9d8a65ce80efb509ce4e8051394e9ed2cd942":{"author":"Eric W. Biederman","email":"ebiederm@xmission.com","date":"2013-03-30 04:04:39 UTC","message":"vfs: Lock in place mounts from more privileged users\n\nWhen creating a less privileged mount namespace or propogating mounts\nfrom a more privileged to a less privileged mount namespace lock the\nsubmounts so they may not be unmounted individually in the child mount\nnamespace revealing what is under them.\n\nThis enforces the reasonable expectation that it is not possible to\nsee under a mount point.  Most of the time mounts are on empty\ndirectories and revealing that does not matter, however I have seen an\noccassionaly sloppy configuration where there were interesting things\nconcealed under a mount point that probably should not be revealed.\n\nExpirable submounts are not locked because they will eventually\nunmount automatically so whatever is under them already needs\nto be safe for unprivileged users to access.\n\nFrom a practical standpoint these restrictions do not appear to be\nsignificant for unprivileged users of the mount namespace.  Recursive\nbind mounts and pivot_root continues to work, ","insertions":35,"deletions":0,"filepaths":{"fs/namespace.c":{"insertions":34,"deletions":0},"include/linux/mount.h":{"insertions":1,"deletions":0}}},"8aec08094570562bc305df33b088926d983c3540":{"author":"Al Viro","email":"viro@zeniv.linux.org.uk","date":"2007-06-07 16:20:32 UTC","message":"[PATCH] new helpers - collect_mounts() and release_collected_mounts()\n\nGet a snapshot of a subtree, creating private clones of vfsmounts\nfor all its components and release such snapshot resp.\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>","insertions":24,"deletions":1,"filepaths":{"fs/namespace.c":{"insertions":21,"deletions":1},"fs/pnode.h":{"insertions":1,"deletions":0},"include/linux/fs.h":{"insertions":2,"deletions":0}}},"df820f8de4e481222b17f9bcee7b909ae8167529":{"author":"Miklos Szeredi","email":"mszeredi@redhat.com","date":"2020-06-04 08:48:19 UTC","message":"ovl: make private mounts longterm\n\nOverlayfs is using clone_private_mount() to create internal mounts for\nunderlying layers.  These are used for operations requiring a path, such as\ndentry_open().\n\nSince these private mounts are not in any namespace they are treated as\nshort term, \"detached\" mounts and mntput() involves taking the global\nmount_lock, which can result in serious cacheline pingpong.\n\nMake these private mounts longterm instead, which trade the penalty on\nmntput() for a slightly longer shutdown time due to an added RCU grace\nperiod when putting these mounts.\n\nIntroduce a new helper kern_unmount_many() that can take care of multiple\nlongterm mounts with a single RCU grace period.\n\nCc: Al Viro <viro@zeniv.linux.org.uk>\nSigned-off-by: Miklos Szeredi <mszeredi@redhat.com>","insertions":31,"deletions":1,"filepaths":{"Documentation/filesystems/porting.rst":{"insertions":7,"deletions":0},"fs/namespace.c":{"insertions":16,"deletions":0},"fs/overlayfs/super.c":{"insertions":6,"deletions":1},"include/linux/mount.h":{"insertions":2,"deletions":0}}},"3ab6abee59ac9ca84cc4a1e31224f1dccd44394c":{"author":"Al Viro","email":"viro@zeniv.linux.org.uk","date":"2013-03-16 18:42:19 UTC","message":"more conversions to namespace_unlock()\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>","insertions":6,"deletions":14,"filepaths":{"fs/namespace.c":{"insertions":6,"deletions":14}}},"1f287bc4e2d073455bc21ed168ee3f67a75178b6":{"author":"Randy Dunlap","email":"rdunlap@infradead.org","date":"2021-03-18 02:52:25 UTC","message":"fs/namespace: correct/improve kernel-doc notation\n\nFix kernel-doc warnings in fs/namespace.c:\n\n./fs/namespace.c:1379: warning: Function parameter or member 'm' not described in 'may_umount_tree'\n./fs/namespace.c:1379: warning: Excess function parameter 'mnt' description in 'may_umount_tree'\n./fs/namespace.c:1950: warning: Function parameter or member 'path' not described in 'clone_private_mount'\n\nAlso convert path_is_mountpoint() comments to kernel-doc.\n\nSigned-off-by: Randy Dunlap <rdunlap@infradead.org>\nAllegedly-acked-by: Al Viro <viro@zeniv.linux.org.uk>\nLink: https://lore.kernel.org/r/20210318025227.4162-1-rdunlap@infradead.org\nSigned-off-by: Jonathan Corbet <corbet@lwn.net>","insertions":8,"deletions":6,"filepaths":{"fs/namespace.c":{"insertions":8,"deletions":6}}},"de5494af4815a4c9328536c72741229b7de88e7f":{"author":"Jason Gunthorpe","email":"jgg@nvidia.com","date":"2021-08-06 01:18:58 UTC","message":"vfio/mbochs: Fix missing error unwind of mbochs_used_mbytes\n\nConvert mbochs to use an atomic scheme for this like mtty was changed\ninto. The atomic fixes various race conditions with probing. Add the\nmissing error unwind. Also add the missing kfree of mdev_state->pages.\n\nFixes: 681c1615f891 (\"vfio/mbochs: Convert to use vfio_register_group_dev()\")\nReported-by: Cornelia Huck <cohuck@redhat.com>\nCo-developed-by: Alex Williamson <alex.williamson@redhat.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Jason Gunthorpe <jgg@nvidia.com>\nReviewed-by: Cornelia Huck <cohuck@redhat.com>\nLink: https://lore.kernel.org/r/2-v4-9ea22c5e6afb+1adf-vfio_reflck_jgg@nvidia.com\nSigned-off-by: Alex Williamson <alex.williamson@redhat.com>","insertions":15,"deletions":9,"filepaths":{"samples/vfio-mdev/mbochs.c":{"insertions":15,"deletions":9}}},"a5e6e6505f38f7bce1d3576503a2bffff3fa888c":{"author":"Gerd Hoffmann","email":"kraxel@redhat.com","date":"2018-05-11 15:05:04 UTC","message":"sample: vfio bochs vbe display (host device for bochs-drm)\n\nDisplay device, demo-ing the vfio dmabuf display interface\n(VFIO_GFX_PLANE_TYPE_DMABUF).  Compatible enough to qemu stdvga\nthat bochs-drm.ko can be used as guest driver.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>\nSigned-off-by: Alex Williamson <alex.williamson@redhat.com>","insertions":1420,"deletions":0,"filepaths":{"samples/Kconfig":{"insertions":13,"deletions":0},"samples/vfio-mdev/Makefile":{"insertions":1,"deletions":0},"samples/vfio-mdev/mbochs.c":{"insertions":1406,"deletions":0}}},"681c1615f8914451cfd432ad30e2f307b6490542":{"author":"Jason Gunthorpe","email":"jgg@nvidia.com","date":"2021-06-17 14:22:18 UTC","message":"vfio/mbochs: Convert to use vfio_register_group_dev()\n\nThis is straightforward conversion, the mdev_state is actually serving as\nthe vfio_device and we can replace all the mdev_get_drvdata()'s and the\nwonky dead code with a simple container_of().\n\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Jason Gunthorpe <jgg@nvidia.com>\nSigned-off-by: Christoph Hellwig <hch@lst.de>\nReviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nLink: https://lore.kernel.org/r/20210617142218.1877096-11-hch@lst.de\nSigned-off-by: Alex Williamson <alex.williamson@redhat.com>","insertions":91,"deletions":72,"filepaths":{"samples/vfio-mdev/mbochs.c":{"insertions":91,"deletions":72}}},"3d3a360e5706169a60fd4f26a9cec7da196a41c9":{"author":"Jason Gunthorpe","email":"jgg@nvidia.com","date":"2021-04-06 19:40:37 UTC","message":"vfio/mbochs: Use mdev_get_type_group_id()\n\nThe mbochs_types array is parallel to the supported_type_groups array, so\nthe type_group_id indexes both. Instead of doing string searching just\ndirectly index with type_group_id in all places.\n\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Jason Gunthorpe <jgg@nvidia.com>\nMessage-Id: <14-v2-d36939638fc6+d54-vfio2_jgg@nvidia.com>\nSigned-off-by: Alex Williamson <alex.williamson@redhat.com>","insertions":7,"deletions":14,"filepaths":{"samples/vfio-mdev/mbochs.c":{"insertions":7,"deletions":14}}},"16355214a54efdb82a48d77b5389ee6fcc73015e":{"author":"Chengguang Xu","email":"cgxu519@gmx.com","date":"2019-02-12 05:59:30 UTC","message":"samples/vfio-mdev/mbochs: expand minor range when registering chrdev region\n\nActually, total amount of available minor number\nfor a single major is MINORMARK + 1. So expand\nminor range when registering chrdev region.\n\nSigned-off-by: Chengguang Xu <cgxu519@gmx.com>\nSigned-off-by: Alex Williamson <alex.williamson@redhat.com>","insertions":4,"deletions":4,"filepaths":{"samples/vfio-mdev/mbochs.c":{"insertions":4,"deletions":4}}},"e4571b8c5e9ffa1e85c0c671995bd4dcc5c75091":{"author":"Qu Wenruo","email":"wqu@suse.com","date":"2021-08-06 10:24:15 UTC","message":"btrfs: fix NULL pointer dereference when deleting device by invalid id\n\n[BUG]\nIt's easy to trigger NULL pointer dereference, just by removing a\nnon-existing device id:\n\n # mkfs.btrfs -f -m single -d single /dev/test/scratch1 \\\n\t\t\t\t     /dev/test/scratch2\n # mount /dev/test/scratch1 /mnt/btrfs\n # btrfs device remove 3 /mnt/btrfs\n\nThen we have the following kernel NULL pointer dereference:\n\n BUG: kernel NULL pointer dereference, address: 0000000000000000\n #PF: supervisor read access in kernel mode\n #PF: error_code(0x0000) - not-present page\n PGD 0 P4D 0\n Oops: 0000 [#1] PREEMPT SMP NOPTI\n CPU: 9 PID: 649 Comm: btrfs Not tainted 5.14.0-rc3-custom+ #35\n Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015\n RIP: 0010:btrfs_rm_device+0x4de/0x6b0 [btrfs]\n  btrfs_ioctl+0x18bb/0x3190 [btrfs]\n  ? lock_is_held_type+0xa5/0x120\n  ? find_held_lock.constprop.0+0x2b/0x80\n  ? do_user_addr_fault+0x201/0x6a0\n  ? lock_release+0xd2/0x2d0\n  ? __x64_sys_ioctl+0x83/0xb0\n  __x64_sys_ioctl+0","insertions":1,"deletions":1,"filepaths":{"fs/btrfs/volumes.c":{"insertions":1,"deletions":1}}},"a27a94c2b0c727517c17cf2ca3a9f7291caadfbc":{"author":"Nikolay Borisov","email":"nborisov@suse.com","date":"2018-09-03 09:46:14 UTC","message":"btrfs: Make btrfs_find_device_by_devspec return btrfs_device directly\n\nInstead of returning an error value and using one of the parameters for\nreturning the actual object we are interested in just refactor the\nfunction to directly return btrfs_device *. Also bubble up the error\nhandling for the special BTRFS_ERROR_DEV_MISSING_NOT_FOUND value into\nbtrfs_rm_device. No functional changes.\n\nSigned-off-by: Nikolay Borisov <nborisov@suse.com>\nReviewed-by: Qu Wenruo <wqu@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>","insertions":25,"deletions":28,"filepaths":{"fs/btrfs/dev-replace.c":{"insertions":4,"deletions":4},"fs/btrfs/volumes.c":{"insertions":18,"deletions":21},"fs/btrfs/volumes.h":{"insertions":3,"deletions":3}}},"7e78c597c3ebfd0cb329aa09a838734147e4f117":{"author":"Xiaolong Huang","email":"butterflyhuangxx@gmail.com","date":"2021-08-19 19:50:34 UTC","message":"net: qrtr: fix another OOB Read in qrtr_endpoint_post\n\nThis check was incomplete, did not consider size is 0:\n\n\tif (len != ALIGN(size, 4) + hdrlen)\n                    goto err;\n\nif size from qrtr_hdr is 0, the result of ALIGN(size, 4)\nwill be 0, In case of len == hdrlen and size == 0\nin header this check won't fail and\n\n\tif (cb->type == QRTR_TYPE_NEW_SERVER) {\n                /* Remote node endpoint can bridge other distant nodes */\n                const struct qrtr_ctrl_pkt *pkt = data + hdrlen;\n\n                qrtr_node_assign(node, le32_to_cpu(pkt->server.node));\n        }\n\nwill also read out of bound from data, which is hdrlen allocated block.\n\nFixes: 194ccc88297a (\"net: qrtr: Support decoding incoming v2 packets\")\nFixes: ad9d24c9429e (\"net: qrtr: fix OOB Read in qrtr_endpoint_post\")\nSigned-off-by: Xiaolong Huang <butterflyhuangxx@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":1,"deletions":1,"filepaths":{"net/qrtr/qrtr.c":{"insertions":1,"deletions":1}}},"194ccc88297ae78d0803adad83c6dcc369787c9e":{"author":"Bjorn Andersson","email":"bjorn.andersson@linaro.org","date":"2017-10-11 06:45:23 UTC","message":"net: qrtr: Support decoding incoming v2 packets\n\nAdd the necessary logic for decoding incoming messages of version 2 as\nwell. Also make sure there's room for the bigger of version 1 and 2\nheaders in the code allocating skbs for outgoing messages.\n\nSigned-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":94,"deletions":38,"filepaths":{"net/qrtr/qrtr.c":{"insertions":94,"deletions":38}}},"505d9dcb0f7ddf9d075e729523a33d38642ae680":{"author":"Dan Carpenter","email":"dan.carpenter@oracle.com","date":"2021-08-26 13:04:27 UTC","message":"crypto: ccp - fix resource leaks in ccp_run_aes_gcm_cmd()\n\nThere are three bugs in this code:\n\n1) If we ccp_init_data() fails for &src then we need to free aad.\n   Use goto e_aad instead of goto e_ctx.\n2) The label to free the &final_wa was named incorrectly as \"e_tag\" but\n   it should have been \"e_final_wa\".  One error path leaked &final_wa.\n3) The &tag was leaked on one error path.  In that case, I added a free\n   before the goto because the resource was local to that block.\n\nFixes: 36cf515b9bbe (\"crypto: ccp - Enable support for AES GCM on v5 CCPs\")\nReported-by: \"minihanshen(沈明航)\" <minihanshen@tencent.com>\nSigned-off-by: Dan Carpenter <dan.carpenter@oracle.com>\nReviewed-by: John Allen <john.allen@amd.com>\nTested-by: John Allen <john.allen@amd.com>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>","insertions":8,"deletions":6,"filepaths":{"drivers/crypto/ccp/ccp-ops.c":{"insertions":8,"deletions":6}}},"36cf515b9bbe298e1ce7384620f0d4ec45ad3328":{"author":"Gary R Hook","email":"gary.hook@amd.com","date":"2017-03-15 18:21:01 UTC","message":"crypto: ccp - Enable support for AES GCM on v5 CCPs\n\nA version 5 device provides the primitive commands\nrequired for AES GCM. This patch adds support for\nen/decryption.\n\nSigned-off-by: Gary R Hook <gary.hook@amd.com>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>","insertions":540,"deletions":0,"filepaths":{"drivers/crypto/ccp/Makefile":{"insertions":1,"deletions":0},"drivers/crypto/ccp/ccp-crypto-aes-galois.c":{"insertions":252,"deletions":0},"drivers/crypto/ccp/ccp-crypto-main.c":{"insertions":12,"deletions":0},"drivers/crypto/ccp/ccp-crypto.h":{"insertions":14,"deletions":0},"drivers/crypto/ccp/ccp-ops.c":{"insertions":252,"deletions":0},"include/linux/ccp.h":{"insertions":9,"deletions":0}}},"b698a9f4c5c52317db486b069190c7e3d2b97e7e":{"author":"Gary R Hook","email":"gary.hook@amd.com","date":"2018-03-07 17:31:14 UTC","message":"crypto: ccp - Validate buffer lengths for copy operations\n\nThe CCP driver copies data between scatter/gather lists and DMA buffers.\nThe length of the requested copy operation must be checked against\nthe available destination buffer length.\n\nReported-by: Maciej S. Szmigiero <mail@maciej.szmigiero.name>\nSigned-off-by: Gary R Hook <gary.hook@amd.com>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>","insertions":78,"deletions":30,"filepaths":{"drivers/crypto/ccp/ccp-ops.c":{"insertions":78,"deletions":30}}},"2287a51ba822384834dafc1c798453375d1107c7":{"author":"Linus Torvalds","email":"torvalds@linux-foundation.org","date":"2021-08-30 15:55:18 UTC","message":"vt_kdsetmode: extend console locking\n\nAs per the long-suffering comment.\n\nReported-by: Minh Yuan <yuanmingbuaa@gmail.com>\nCc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nCc: Jiri Slaby <jirislaby@kernel.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":6,"deletions":4,"filepaths":{"drivers/tty/vt/vt_ioctl.c":{"insertions":6,"deletions":4}}},"a4c53c830b2722f7cd30f58740fd9955ea4eed2c":{"author":"Jiri Slaby","email":"jslaby@suse.cz","date":"2020-06-15 07:49:09 UTC","message":"vt_ioctl: move vt_kdsetmode out of vt_k_ioctl\n\nIt's too long to be inlined.\n\nSigned-off-by: Jiri Slaby <jslaby@suse.cz>\nLink: https://lore.kernel.org/r/20200615074910.19267-37-jslaby@suse.cz\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":43,"deletions":35,"filepaths":{"drivers/tty/vt/vt_ioctl.c":{"insertions":43,"deletions":35}}},"f62f3c20647ebd5fb6ecb8f0b477b9281c44c10a":{"author":"Nicholas Piggin","email":"npiggin@gmail.com","date":"2021-07-20 10:43:09 UTC","message":"KVM: PPC: Book3S: Fix H_RTAS rets buffer overflow\n\nThe kvmppc_rtas_hcall() sets the host rtas_args.rets pointer based on\nthe rtas_args.nargs that was provided by the guest. That guest nargs\nvalue is not range checked, so the guest can cause the host rets pointer\nto be pointed outside the args array. The individual rtas function\nhandlers check the nargs and nrets values to ensure they are correct,\nbut if they are not, the handlers store a -3 (0xfffffffd) failure\nindication in rets[0] which corrupts host memory.\n\nFix this by testing up front whether the guest supplied nargs and nret\nwould exceed the array size, and fail the hcall directly without storing\na failure indication to rets[0].\n\nAlso expand on a comment about why we kill the guest and try not to\nreturn errors directly if we have a valid rets[0] pointer.\n\nFixes: 8e591cb72047 (\"KVM: PPC: Book3S: Add infrastructure to implement kernel-side RTAS calls\")\nCc: stable@vger.kernel.org # v3.10+\nReported-by: Alexey Kardashevskiy <aik@ozlabs","insertions":22,"deletions":3,"filepaths":{"arch/powerpc/kvm/book3s_rtas.c":{"insertions":22,"deletions":3}}},"8e591cb7204739efa8e15967ea334eb367039dde":{"author":"Michael Ellerman","email":"michael@ellerman.id.au","date":"2013-04-17 20:30:00 UTC","message":"KVM: PPC: Book3S: Add infrastructure to implement kernel-side RTAS calls\n\nFor pseries machine emulation, in order to move the interrupt\ncontroller code to the kernel, we need to intercept some RTAS\ncalls in the kernel itself.  This adds an infrastructure to allow\nin-kernel handlers to be registered for RTAS services by name.\nA new ioctl, KVM_PPC_RTAS_DEFINE_TOKEN, then allows userspace to\nassociate token values with those service names.  Then, when the\nguest requests an RTAS service with one of those token values, it\nwill be handled by the relevant in-kernel handler rather than being\npassed up to userspace as at present.\n\nSigned-off-by: Michael Ellerman <michael@ellerman.id.au>\nSigned-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>\nSigned-off-by: Paul Mackerras <paulus@samba.org>\n[agraf: fix warning]\nSigned-off-by: Alexander Graf <agraf@suse.de>","insertions":252,"deletions":1,"filepaths":{"Documentation/virtual/kvm/api.txt":{"insertions":19,"deletions":0},"arch/powerpc/include/asm/hvcall.h":{"insertions":3,"deletions":0},"arch/powerpc/include/asm/kvm_host.h":{"insertions":1,"deletions":0},"arch/powerpc/include/asm/kvm_ppc.h":{"insertions":4,"deletions":0},"arch/powerpc/include/uapi/asm/kvm.h":{"insertions":6,"deletions":0},"arch/powerpc/kvm/Makefile":{"insertions":1,"deletions":0},"arch/powerpc/kvm/book3s_hv.c":{"insertions":17,"deletions":1},"arch/powerpc/kvm/book3s_pr.c":{"insertions":1,"deletions":0},"arch/powerpc/kvm/book3s_pr_papr.c":{"insertions":7,"deletions":0},"arch/powerpc/kvm/book3s_rtas.c":{"insertions":182,"deletions":0},"arch/powerpc/kvm/powerpc.c":{"insertions":8,"deletions":0},"include/uapi/linux/kvm.h":{"insertions":3,"deletions":0}}},"19a44ecff52fd67d77d49fb4d43b289c53cdc392":{"author":"Alexander Graf","email":"agraf@suse.de","date":"2014-07-07 19:05:33 UTC","message":"KVM: PPC: RTAS: Do byte swaps explicitly\n\nIn commit b59d9d26b we introduced implicit byte swaps for RTAS calls.\nUnfortunately we messed up and didn't swizzle return values properly.\n\nAlso the old approach wasn't \"sparse\" compatible - we were randomly\nreading __be32 values on an LE system.\n\nLet's just do all of the swizzling explicitly with byte swaps right\nwhere values get used. That way we can at least catch bugs using sparse.\n\nThis patch fixes XICS RTAS emulation on little endian hosts for me.\n\nSigned-off-by: Alexander Graf <agraf@suse.de>","insertions":47,"deletions":18,"filepaths":{"arch/powerpc/kvm/book3s_rtas.c":{"insertions":47,"deletions":18}}},"1659e27d2bc1ef47b6d031abe01b467f18cb72d9":{"author":"Paul Mackerras","email":"paulus@ozlabs.org","date":"2019-05-29 01:54:00 UTC","message":"KVM: PPC: Book3S: Use new mutex to synchronize access to rtas token list\n\nCurrently the Book 3S KVM code uses kvm->lock to synchronize access\nto the kvm->arch.rtas_tokens list.  Because this list is scanned\ninside kvmppc_rtas_hcall(), which is called with the vcpu mutex held,\ntaking kvm->lock cause a lock inversion problem, which could lead to\na deadlock.\n\nTo fix this, we add a new mutex, kvm->arch.rtas_token_lock, which nests\ninside the vcpu mutexes, and use that instead of kvm->lock when\naccessing the rtas token list.\n\nThis removes the lockdep_assert_held() in kvmppc_rtas_tokens_free().\nAt this point we don't hold the new mutex, but that is OK because\nkvmppc_rtas_tokens_free() is only called when the whole VM is being\ndestroyed, and at that point nothing can be looking up a token in\nthe list.\n\nSigned-off-by: Paul Mackerras <paulus@ozlabs.org>","insertions":8,"deletions":8,"filepaths":{"arch/powerpc/include/asm/kvm_host.h":{"insertions":0,"deletions":1},"arch/powerpc/kvm/book3s.c":{"insertions":0,"deletions":1},"arch/powerpc/kvm/book3s_rtas.c":{"insertions":8,"deletions":6}}},"32f8807a48ae55be0e76880cfe8607a18b5bb0df":{"author":"Jakub Kicinski","email":"kuba@kernel.org","date":"2021-10-22 19:36:47 UTC","message":"Merge branch 'sctp-enhancements-for-the-verification-tag'\n\nXin Long says:\n\n====================\nsctp: enhancements for the verification tag\n\nThis patchset is to address CVE-2021-3772:\n\n  A flaw was found in the Linux SCTP stack. A blind attacker may be able to\n  kill an existing SCTP association through invalid chunks if the attacker\n  knows the IP-addresses and port numbers being used and the attacker can\n  send packets with spoofed IP addresses.\n\nThis is caused by the missing VTAG verification for the received chunks\nand the incorrect vtag for the ABORT used to reply to these invalid\nchunks.\n\nThis patchset is to go over all processing functions for the received\nchunks and do:\n\n1. Make sure sctp_vtag_verify() is called firstly to verify the vtag from\n   the received chunk and discard this chunk if it fails. With some\n   exceptions:\n\n   a. sctp_sf_do_5_1B_init()/5_2_2_dupinit()/9_2_reshutack(), processing\n      INIT chunk, as sctphdr vtag is always 0 in INIT chunk.\n\n   b. sctp_sf_do_5_2","insertions":85,"deletions":54,"filepaths":{"net/sctp/sm_statefuns.c":{"insertions":85,"deletions":54}}},"24cb81a6a91288fcba19548944729ea906eb5e2a":{"author":"Eric W. Biederman","email":"ebiederm@xmission.com","date":"2012-08-07 07:28:09 UTC","message":"sctp: Push struct net down into all of the state machine functions\n\nThere are a handle of state machine functions primarily those dealing\nwith processing INIT packets where there is neither a valid endpoint nor\na valid assoication from which to derive a struct net.  Therefore add\nstruct net * to the parameter list of sctp_state_fn_t and update all of\nthe state machine functions.\n\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":341,"deletions":283,"filepaths":{"include/net/sctp/sm.h":{"insertions":2,"deletions":1},"net/sctp/sm_sideeffect.c":{"insertions":1,"deletions":1},"net/sctp/sm_statefuns.c":{"insertions":338,"deletions":281}}},"ece25dfa0991f65c4e1d26beb1c3c45bda4239b8":{"author":"Vlad Yasevich","email":"vladislav.yasevich@hp.com","date":"2007-09-07 20:30:54 UTC","message":"SCTP: Clean up OOTB handling and fix infinite loop processing\n\nWhile processing OOTB chunks as well as chunks with an invalid\nlength of 0, it was possible to SCTP to get wedged inside an\ninfinite loop because we didn't catch the condition correctly,\nor didn't mark the packet for discard correctly.\nThis work is based on original findings and work by\nWei Yongjun <yjwei@cn.fujitsu.com>\n\nSigned-off-by: Vlad Yasevich <vladislav.yasevich@hp.com>","insertions":138,"deletions":42,"filepaths":{"include/net/sctp/sm.h":{"insertions":0,"deletions":1},"net/sctp/sm_statefuns.c":{"insertions":130,"deletions":33},"net/sctp/sm_statetable.c":{"insertions":8,"deletions":8}}},"6afd2e83cd86b17b074e1854d063b8ec590d7f5b":{"author":"Vlad Yasevich","email":"vladislav.yasevich@hp.com","date":"2007-12-20 22:08:04 UTC","message":"[SCTP]: Discard unauthenticated ASCONF and ASCONF ACK chunks\n\nNow that we support AUTH, discard unauthenticated ASCONF and ASCONF ACK\nchunks as mandated in the ADD-IP spec.\n\nSigned-off-by: Vlad Yasevich <vladislav.yasevich@hp.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":18,"deletions":0,"filepaths":{"net/sctp/sm_statefuns.c":{"insertions":18,"deletions":0}}},"68d75469468620c37cd58dc352f1dcec8c3896b6":{"author":"Xin Long","email":"lucien.xin@gmail.com","date":"2017-08-03 07:42:20 UTC","message":"sctp: remove the typedef sctp_addip_chunk_t\n\nThis patch is to remove the typedef sctp_addip_chunk_t, and\nreplace with struct sctp_addip_chunk in the places where it's\nusing this typedef.\n\nSigned-off-by: Xin Long <lucien.xin@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":15,"deletions":10,"filepaths":{"include/linux/sctp.h":{"insertions":2,"deletions":2},"net/sctp/input.c":{"insertions":1,"deletions":1},"net/sctp/sm_make_chunk.c":{"insertions":5,"deletions":3},"net/sctp/sm_statefuns.c":{"insertions":7,"deletions":4}}},"922dbc5be2186659d2c453a53f2ae569e55b6101":{"author":"Xin Long","email":"lucien.xin@gmail.com","date":"2017-06-30 03:52:13 UTC","message":"sctp: remove the typedef sctp_chunkhdr_t\n\nThis patch is to remove the typedef sctp_chunkhdr_t, and replace\nwith struct sctp_chunkhdr in the places where it's using this\ntypedef.\n\nIt is also to fix some indents and use sizeof(variable) instead\nof sizeof(type)., especially in sctp_new.\n\nSigned-off-by: Xin Long <lucien.xin@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":102,"deletions":103,"filepaths":{"include/linux/sctp.h":{"insertions":17,"deletions":17},"include/net/sctp/sctp.h":{"insertions":1,"deletions":1},"net/netfilter/ipvs/ip_vs_core.c":{"insertions":2,"deletions":2},"net/netfilter/ipvs/ip_vs_proto_sctp.c":{"insertions":3,"deletions":3},"net/netfilter/nf_conntrack_proto_sctp.c":{"insertions":13,"deletions":16},"net/netfilter/xt_sctp.c":{"insertions":2,"deletions":2},"net/sctp/input.c":{"insertions":10,"deletions":10},"net/sctp/inqueue.c":{"insertions":7,"deletions":8},"net/sctp/sm_make_chunk.c":{"insertions":9,"deletions":8},"net/sctp/sm_sideeffect.c":{"insertions":3,"deletions":2},"net/sctp/sm_statefuns.c":{"insertions":34,"deletions":33},"net/sctp/ulpevent.c":{"insertions":1,"deletions":1}}},"02c4e12c6400b6dccdc6b5c2c18325551e4b2dc9":{"author":"Wei Yongjun","email":"yjwei@cn.fujitsu.com","date":"2007-08-31 02:03:58 UTC","message":"SCTP: Send ABORT chunk with correct tag in response to INIT ACK\n\nWhen SCTP client received an INIT ACK chunk with missing mandatory\nparameter such as \"cookie parameter\", it will send back a ABORT\nwith T-bit not set and verification tag is set to 0.\nThis is because before we accept this INIT ACK chunk, we do not know\nthe peer's tag.  This patch change to reflect vtag when responding to\nINIT ACK with missing mandatory parameter.\n\nSigned-off-by: Wei Yongjun <yjwei@cn.fujitsu.com>\nSigned-off-by: Vlad Yasevich <vladislav.yasevich@hp.com>","insertions":16,"deletions":1,"filepaths":{"net/sctp/sm_statefuns.c":{"insertions":16,"deletions":1}}},"172a1599ba88df7147f6503a75686fb89c8a1f3f":{"author":"Xin Long","email":"lucien.xin@gmail.com","date":"2017-08-11 02:23:57 UTC","message":"sctp: remove the typedef sctp_disposition_t\n\nThis patch is to remove the typedef sctp_disposition_t, and\nreplace with enum sctp_disposition in the places where it's\nusing this typedef.\n\nIt's also to fix the indent for many functions' defination.\n\nSigned-off-by: Xin Long <lucien.xin@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":717,"deletions":681,"filepaths":{"include/net/sctp/sm.h":{"insertions":10,"deletions":9},"net/sctp/probe.c":{"insertions":7,"deletions":6},"net/sctp/sm_sideeffect.c":{"insertions":25,"deletions":25},"net/sctp/sm_statefuns.c":{"insertions":675,"deletions":641}}},"75205f478331cc64ce729ea72d3c8c1837fb59cb":{"author":"Vlad Yasevich","email":"vladislav.yasevich@hp.com","date":"2007-12-20 22:12:59 UTC","message":"[SCTP]: Implement ADD-IP special case processing for ABORT chunk\n\nADD-IP spec has a special case for processing ABORTs:\n    F4) ... One special consideration is that ABORT\n        Chunks arriving destined to the IP address being deleted MUST be\n        ignored (see Section 5.3.1 for further details).\n\nCheck if the address we received on is in the DEL state, and if\nso, ignore the ABORT.\n\nSigned-off-by: Vlad Yasevich <vladislav.yasevich@hp.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":76,"deletions":4,"filepaths":{"include/net/sctp/structs.h":{"insertions":2,"deletions":0},"net/sctp/bind_addr.c":{"insertions":26,"deletions":0},"net/sctp/sm_statefuns.c":{"insertions":48,"deletions":4}}},"a85bbeb221d860097859f110ba1321f2b0653f07":{"author":"Xin Long","email":"lucien.xin@gmail.com","date":"2017-08-11 02:23:52 UTC","message":"sctp: remove the typedef sctp_cmd_seq_t\n\nThis patch is to remove the typedef sctp_cmd_seq_t, and\nreplace with struct sctp_cmd_seq in the places where it's\nusing this typedef.\n\nNote that it doesn't fix many indents although it should,\nas sctp_disposition_t's removal would mess them up again.\nSo better to fix them when removing sctp_disposition_t in\nthe later patch.\n\nSigned-off-by: Xin Long <lucien.xin@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":145,"deletions":143,"filepaths":{"include/net/sctp/command.h":{"insertions":7,"deletions":7},"include/net/sctp/sm.h":{"insertions":1,"deletions":1},"net/sctp/probe.c":{"insertions":1,"deletions":1},"net/sctp/sm_sideeffect.c":{"insertions":27,"deletions":27},"net/sctp/sm_statefuns.c":{"insertions":109,"deletions":107}}},"01a992bea523d9568cf56a02003c15c9dc40eb20":{"author":"Xin Long","email":"lucien.xin@gmail.com","date":"2017-06-30 03:52:22 UTC","message":"sctp: remove the typedef sctp_init_chunk_t\n\nThis patch is to remove the typedef sctp_init_chunk_t, and replace\nwith struct sctp_init_chunk in the places where it's using this\ntypedef.\n\nSigned-off-by: Xin Long <lucien.xin@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":27,"deletions":27,"filepaths":{"include/linux/sctp.h":{"insertions":3,"deletions":3},"include/net/sctp/command.h":{"insertions":2,"deletions":2},"include/net/sctp/structs.h":{"insertions":2,"deletions":2},"net/sctp/input.c":{"insertions":2,"deletions":2},"net/sctp/sm_make_chunk.c":{"insertions":3,"deletions":3},"net/sctp/sm_sideeffect.c":{"insertions":1,"deletions":1},"net/sctp/sm_statefuns.c":{"insertions":14,"deletions":14}}},"609ee4679b8a0831257552dd2b0e54f509ba0c77":{"author":"Vlad Yasevich","email":"vladislav.yasevich@hp.com","date":"2007-08-30 18:10:59 UTC","message":"SCTP: Abort on COOKIE-ECHO if backlog is exceeded.\n\nCurrently we abort on the INIT chunk we our backlog is currenlty\nexceeded.  Delay this about untill COOKIE-ECHO to give the user\ntime to accept the socket.  Also, make sure that we treat\nsk_max_backlog of 0 as no connections allowed.\n\nSigned-off-by: Vlad Yasevich <vladislav.yasevich@hp.com>","insertions":10,"deletions":11,"filepaths":{"net/sctp/sm_statefuns.c":{"insertions":10,"deletions":11}}},"1c16a1862595e66d22d34799a9f328defc884369":{"author":"Xin Long","email":"lucien.xin@gmail.com","date":"2020-10-29 07:05:09 UTC","message":"sctp: handle the init chunk matching an existing asoc\n\nThis is from Section 4 of draft-tuexen-tsvwg-sctp-udp-encaps-cons-03,\nand it requires responding with an abort chunk with an error cause\nwhen the udp source port of the received init chunk doesn't match the\nencap port of the transport.\n\nSigned-off-by: Xin Long <lucien.xin@gmail.com>\nAcked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>","insertions":50,"deletions":0,"filepaths":{"net/sctp/sm_statefuns.c":{"insertions":50,"deletions":0}}},"bfc6f8270fefb323662d1d7713f940149f27b7f1":{"author":"Xin Long","email":"lucien.xin@gmail.com","date":"2017-08-05 12:00:04 UTC","message":"sctp: remove the typedef sctp_subtype_t\n\nThis patch is to remove the typedef sctp_subtype_t, and\nreplace with union sctp_subtype in the places where it's\nusing this typedef.\n\nNote that it doesn't fix many indents although it should,\nas sctp_disposition_t's removal would mess them up again.\nSo better to fix them when removing sctp_disposition_t in\nlater patch.\n\nSigned-off-by: Xin Long <lucien.xin@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":134,"deletions":129,"filepaths":{"include/net/sctp/constants.h":{"insertions":9,"deletions":9},"include/net/sctp/sm.h":{"insertions":7,"deletions":6},"net/sctp/associola.c":{"insertions":1,"deletions":1},"net/sctp/debug.c":{"insertions":4,"deletions":4},"net/sctp/endpointola.c":{"insertions":1,"deletions":1},"net/sctp/primitive.c":{"insertions":1,"deletions":1},"net/sctp/probe.c":{"insertions":1,"deletions":1},"net/sctp/sm_sideeffect.c":{"insertions":9,"deletions":7},"net/sctp/sm_statefuns.c":{"insertions":96,"deletions":95},"net/sctp/sm_statetable.c":{"insertions":5,"deletions":4}}},"b01a24078fa3fc4f0f447d1306ce5adc495ead86":{"author":"Eric W. Biederman","email":"ebiederm@xmission.com","date":"2012-08-06 08:47:55 UTC","message":"sctp: Make the mib per network namespace\n\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>\nAcked-by: Vlad Yasevich <vyasevich@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":158,"deletions":119,"filepaths":{"include/net/netns/sctp.h":{"insertions":3,"deletions":0},"include/net/sctp/sctp.h":{"insertions":4,"deletions":5},"net/sctp/associola.c":{"insertions":1,"deletions":1},"net/sctp/chunk.c":{"insertions":1,"deletions":1},"net/sctp/endpointola.c":{"insertions":1,"deletions":1},"net/sctp/input.c":{"insertions":11,"deletions":11},"net/sctp/ipv6.c":{"insertions":2,"deletions":2},"net/sctp/output.c":{"insertions":1,"deletions":1},"net/sctp/outqueue.c":{"insertions":10,"deletions":8},"net/sctp/proc.c":{"insertions":1,"deletions":4},"net/sctp/protocol.c":{"insertions":13,"deletions":14},"net/sctp/sm_statefuns.c":{"insertions":98,"deletions":65},"net/sctp/ulpqueue.c":{"insertions":12,"deletions":6}}},"cb1844c47279fb59129f8a021a0b09bcf2011ad7":{"author":"Xin Long","email":"lucien.xin@gmail.com","date":"2017-07-23 01:34:26 UTC","message":"sctp: remove the typedef sctp_initack_chunk_t\n\nThis patch is to remove the typedef sctp_initack_chunk_t, and\nreplace with struct sctp_initack_chunk in the places where it's\nusing this typedef.\n\nIt is also to use sizeof(variable) instead of sizeof(type).\n\nSigned-off-by: Xin Long <lucien.xin@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":10,"deletions":8,"filepaths":{"include/linux/sctp.h":{"insertions":4,"deletions":1},"net/sctp/sm_statefuns.c":{"insertions":6,"deletions":7}}},"d00d8da5869a2608e97cfede094dfc5e11462a46":{"author":"Xie Yongji","email":"xieyongji@bytedance.com","date":"2021-05-25 12:56:22 UTC","message":"virtio_console: Assure used length from device is limited\n\nThe buf->len might come from an untrusted device. This\nensures the value would not exceed the size of the buffer\nto avoid data corruption or loss.\n\nSigned-off-by: Xie Yongji <xieyongji@bytedance.com>\nAcked-by: Jason Wang <jasowang@redhat.com>\nLink: https://lore.kernel.org/r/20210525125622.1203-1-xieyongji@bytedance.com\nSigned-off-by: Michael S. Tsirkin <mst@redhat.com>","insertions":2,"deletions":2,"filepaths":{"drivers/char/virtio_console.c":{"insertions":2,"deletions":2}}},"a3cde44908429e52b2ec052ad5a70ef60e1f2d56":{"author":"Amit Shah","email":"amit.shah@redhat.com","date":"2010-01-18 13:45:03 UTC","message":"virtio: console: introduce a get_inbuf helper to fetch bufs from in_vq\n\nThis makes taking locks around the get_buf vq operation easier, as well\nas complements the add_inbuf() operation.\n\nSigned-off-by: Amit Shah <amit.shah@redhat.com>\nSigned-off-by: Rusty Russell <rusty@rustcorp.com.au>","insertions":17,"deletions":4,"filepaths":{"drivers/char/virtio_console.c":{"insertions":17,"deletions":4}}},"17634ba25544d60af1968982929150efad755032":{"author":"Amit Shah","email":"amit.shah@redhat.com","date":"2009-12-21 15:33:25 UTC","message":"virtio: console: Add a new MULTIPORT feature, support for generic ports\n\nThis commit adds a new feature, MULTIPORT. If the host supports this\nfeature as well, the config space has the number of ports defined for\nthat device. New ports are spawned according to this information.\n\nThe config space also has the maximum number of ports that can be\nspawned for a particular device. This is useful in initializing the\nappropriate number of virtqueues in advance, as ports might be\nhot-plugged in later.\n\nUsing this feature, generic ports can be created which are not tied to\nhvc consoles.\n\nWe also open up a private channel between the host and the guest via\nwhich some \"control\" messages are exchanged for the ports, like whether\nthe port being spawned is a console port, resizing the console window,\netc.\n\nNext commits will add support for hotplugging and presenting char\ndevices in /dev/ for bi-directional guest-host communication.\n\nSigned-off-by: Amit Shah <amit.shah@redhat.com>\nSigned-off-by: Rusty ","insertions":357,"deletions":56,"filepaths":{"drivers/char/virtio_console.c":{"insertions":336,"deletions":56},"include/linux/virtio_console.h":{"insertions":21,"deletions":0}}},"c4eb1f403243fc7bbb7de644db8587c03de36da6":{"author":"Tatsuhiko Yasumatsu","email":"th.yasumatsu@gmail.com","date":"2021-08-06 15:04:18 UTC","message":"bpf: Fix integer overflow involving bucket_size\n\nIn __htab_map_lookup_and_delete_batch(), hash buckets are iterated\nover to count the number of elements in each bucket (bucket_size).\nIf bucket_size is large enough, the multiplication to calculate\nkvmalloc() size could overflow, resulting in out-of-bounds write\nas reported by KASAN:\n\n  [...]\n  [  104.986052] BUG: KASAN: vmalloc-out-of-bounds in __htab_map_lookup_and_delete_batch+0x5ce/0xb60\n  [  104.986489] Write of size 4194224 at addr ffffc9010503be70 by task crash/112\n  [  104.986889]\n  [  104.987193] CPU: 0 PID: 112 Comm: crash Not tainted 5.14.0-rc4 #13\n  [  104.987552] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1ubuntu1.1 04/01/2014\n  [  104.988104] Call Trace:\n  [  104.988410]  dump_stack_lvl+0x34/0x44\n  [  104.988706]  print_address_description.constprop.0+0x21/0x140\n  [  104.988991]  ? __htab_map_lookup_and_delete_batch+0x5ce/0xb60\n  [  104.989327]  ? __htab_map_lookup_and_delete_batch+0x5ce/0xb60\n  [  10","insertions":2,"deletions":2,"filepaths":{"kernel/bpf/hashtab.c":{"insertions":2,"deletions":2}}},"057996380a42bb64ccc04383cfa9c0ace4ea11f0":{"author":"Yonghong Song","email":"yhs@fb.com","date":"2020-01-15 18:43:04 UTC","message":"bpf: Add batch ops to all htab bpf map\n\nhtab can't use generic batch support due some problematic behaviours\ninherent to the data structre, i.e. while iterating the bpf map  a\nconcurrent program might delete the next entry that batch was about to\nuse, in that case there's no easy solution to retrieve the next entry,\nthe issue has been discussed multiple times (see [1] and [2]).\n\nThe only way hmap can be traversed without the problem previously\nexposed is by making sure that the map is traversing entire buckets.\nThis commit implements those strict requirements for hmap, the\nimplementation follows the same interaction that generic support with\nsome exceptions:\n\n - If keys/values buffer are not big enough to traverse a bucket,\n   ENOSPC will be returned.\n - out_batch contains the value of the next bucket in the iteration, not\n   the next key, but this is transparent for the user since the user\n   should never use out_batch for other than bpf batch syscalls.\n\nThis commits implements BPF_MAP","insertions":276,"deletions":1,"filepaths":{"include/linux/bpf.h":{"insertions":3,"deletions":0},"include/uapi/linux/bpf.h":{"insertions":1,"deletions":0},"kernel/bpf/hashtab.c":{"insertions":264,"deletions":0},"kernel/bpf/syscall.c":{"insertions":8,"deletions":1}}},"b1bd5cba3306691c771d558e94baa73e8b0b96b7":{"author":"Lai Jiangshan","email":"laijs@linux.alibaba.com","date":"2021-06-03 05:24:55 UTC","message":"KVM: X86: MMU: Use the correct inherited permissions to get shadow page\n\nWhen computing the access permissions of a shadow page, use the effective\npermissions of the walk up to that point, i.e. the logic AND of its parents'\npermissions.  Two guest PxE entries that point at the same table gfn need to\nbe shadowed with different shadow pages if their parents' permissions are\ndifferent.  KVM currently uses the effective permissions of the last\nnon-leaf entry for all non-leaf entries.  Because all non-leaf SPTEs have\nfull (\"uwx\") permissions, and the effective permissions are recorded only\nin role.access and merged into the leaves, this can lead to incorrect\nreuse of a shadow page and eventually to a missing guest protection page\nfault.\n\nFor example, here is a shared pagetable:\n\n   pgd[]   pud[]        pmd[]            virtual address pointers\n                     /->pmd1(u--)->pte1(uw-)->page1 <- ptr1 (u--)\n        /->pud1(uw-)--->pmd2(uw-)->pte2(uw-)->page2 <- ptr2 (uw-)\n   pgd-|          ","insertions":11,"deletions":7,"filepaths":{"Documentation/virt/kvm/mmu.rst":{"insertions":2,"deletions":2},"arch/x86/kvm/mmu/paging_tmpl.h":{"insertions":9,"deletions":5}}},"039091875ce4629d83db64c055528e7b86337d50":{"author":"Avi Kivity","email":"avi@redhat.com","date":"2010-04-21 13:08:20 UTC","message":"KVM: Document mmu\n\nSigned-off-by: Avi Kivity <avi@redhat.com>","insertions":302,"deletions":0,"filepaths":{"Documentation/kvm/mmu.txt":{"insertions":302,"deletions":0}}},"0780516a18f87e881e42ed815f189279b0a1743c":{"author":"Paolo Bonzini","email":"pbonzini@redhat.com","date":"2017-05-11 11:23:29 UTC","message":"KVM: nVMX: fix EPT permissions as reported in exit qualification\n\nThis fixes the new ept_access_test_read_only and ept_access_test_read_write\ntestcases from vmx.flat.\n\nThe problem is that gpte_access moves bits around to switch from EPT\nbit order (XWR) to ACC_*_MASK bit order (RWX).  This results in an\nincorrect exit qualification.  To fix this, make pt_access and\npte_access operate on raw PTE values (only with NX flipped to mean\n\"can execute\") and call gpte_access at the end of the walk.  This\nlets us use pte_access to compute the exit qualification with XWR\nbit order.\n\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>\nReviewed-by: Xiao Guangrong <xiaoguangrong@tencent.com>\nSigned-off-by: Radim Krčmář <rkrcmar@redhat.com>","insertions":21,"deletions":14,"filepaths":{"arch/x86/kvm/paging_tmpl.h":{"insertions":21,"deletions":14}}},"24157aaf833261e68e5a398fa54bd15e4fa1d0b7":{"author":"Avi Kivity","email":"avi@redhat.com","date":"2010-07-13 11:27:11 UTC","message":"KVM: MMU: Eliminate redundant temporaries in FNAME(fetch)\n\n'level' and 'sptep' are aliases for 'interator.level' and 'iterator.sptep', no\nneed for them.\n\nSigned-off-by: Avi Kivity <avi@redhat.com>\nSigned-off-by: Marcelo Tosatti <mtosatti@redhat.com>","insertions":24,"deletions":35,"filepaths":{"arch/x86/kvm/paging_tmpl.h":{"insertions":24,"deletions":35}}},"fe135d2ceb3d7dc08151b3cbad96565d02cc8676":{"author":"Avi Kivity","email":"avi@qumranet.com","date":"2007-12-09 14:15:46 UTC","message":"KVM: MMU: Simplify calculation of pte access\n\nThe nx bit is awkwardly placed in the 63rd bit position; furthermore it\nhas a reversed meaning compared to the other bits, which means we can't use\na bitwise and to calculate compounded access masks.\n\nSo, we simplify things by creating a new 3-bit exec/write/user access word,\nand doing all calculations in that.\n\nSigned-off-by: Avi Kivity <avi@qumranet.com>","insertions":43,"deletions":29,"filepaths":{"drivers/kvm/mmu.c":{"insertions":10,"deletions":4},"drivers/kvm/paging_tmpl.h":{"insertions":33,"deletions":25}}},"7819026eefee53eaaac3fdce1a2f157c7ea943fe":{"author":"Marcelo Tosatti","email":"marcelo@kvack.org","date":"2007-12-12 00:12:27 UTC","message":"KVM: MMU: Fix SMP shadow instantiation race\n\nThere is a race where VCPU0 is shadowing a pagetable entry while VCPU1\nis updating it, which results in a stale shadow copy.\n\nFix that by comparing the contents of the cached guest pte with the\ncurrent guest pte after write-protecting the guest pagetable.\n\nSigned-off-by: Marcelo Tosatti <mtosatti@redhat.com>\nSigned-off-by: Avi Kivity <avi@qumranet.com>","insertions":29,"deletions":12,"filepaths":{"drivers/kvm/mmu.c":{"insertions":8,"deletions":4},"drivers/kvm/paging_tmpl.h":{"insertions":21,"deletions":8}}},"5991b33237b7fc7dd9f62ae04998c42217d444a7":{"author":"Avi Kivity","email":"avi@redhat.com","date":"2010-07-13 11:27:10 UTC","message":"KVM: MMU: Validate all gptes during fetch, not just those used for new pages\n\nCurrently, when we fetch an spte, we only verify that gptes match those that\nthe walker saw if we build new shadow pages for them.\n\nHowever, this misses the following race:\n\n  vcpu1            vcpu2\n\n  walk\n                  change gpte\n                  walk\n                  instantiate sp\n\n  fetch existing sp\n\nFix by validating every gpte, regardless of whether it is used for building\na new sp or not.\n\nSigned-off-by: Avi Kivity <avi@redhat.com>\nSigned-off-by: Marcelo Tosatti <mtosatti@redhat.com>","insertions":24,"deletions":9,"filepaths":{"arch/x86/kvm/paging_tmpl.h":{"insertions":24,"deletions":9}}},"f59c1d2ded54e4bd7a9126f4a32c9eca8b336457":{"author":"Avi Kivity","email":"avi@redhat.com","date":"2010-07-06 13:20:43 UTC","message":"KVM: MMU: Keep going on permission error\n\nReal hardware disregards permission errors when computing page fault error\ncode bit 0 (page present).  Do the same.\n\nReviewed-by: Xiao Guangrong <xiaoguangrong@cn.fujitsu.com>\nSigned-off-by: Avi Kivity <avi@redhat.com>","insertions":30,"deletions":22,"filepaths":{"arch/x86/kvm/paging_tmpl.h":{"insertions":30,"deletions":22}}},"82725b20e22fb85377f61a16f6d0d5cfc28b45d3":{"author":"Dong, Eddie","email":"eddie.dong@intel.com","date":"2009-03-30 08:21:08 UTC","message":"KVM: MMU: Emulate #PF error code of reserved bits violation\n\nDetect, indicate, and propagate page faults where reserved bits are set.\nTake care to handle the different paging modes, each of which has different\nsets of reserved bits.\n\n[avi: fix pte reserved bits for efer.nxe=0]\n\nSigned-off-by: Eddie Dong <eddie.dong@intel.com>\nSigned-off-by: Avi Kivity <avi@redhat.com>","insertions":88,"deletions":0,"filepaths":{"arch/x86/include/asm/kvm_host.h":{"insertions":2,"deletions":0},"arch/x86/kvm/mmu.c":{"insertions":69,"deletions":0},"arch/x86/kvm/paging_tmpl.h":{"insertions":7,"deletions":0},"arch/x86/kvm/x86.c":{"insertions":10,"deletions":0}}},"6fd01b711bee96ce3356f7b6f370ab708e37504b":{"author":"Avi Kivity","email":"avi@redhat.com","date":"2012-09-12 17:46:56 UTC","message":"KVM: MMU: Optimize is_last_gpte()\n\nInstead of branchy code depending on level, gpte.ps, and mmu configuration,\nprepare everything in a bitmap during mode changes and look it up during\nruntime.\n\nReviewed-by: Xiao Guangrong <xiaoguangrong@linux.vnet.ibm.com>\nSigned-off-by: Avi Kivity <avi@redhat.com>","insertions":41,"deletions":20,"filepaths":{"arch/x86/include/asm/kvm_host.h":{"insertions":7,"deletions":0},"arch/x86/kvm/mmu.c":{"insertions":31,"deletions":0},"arch/x86/kvm/mmu.h":{"insertions":2,"deletions":1},"arch/x86/kvm/paging_tmpl.h":{"insertions":1,"deletions":19}}},"be94f6b71067df47d623fc6c6983a8dee504fb4d":{"author":"Huaitong Han","email":"huaitong.han@intel.com","date":"2016-03-22 08:51:20 UTC","message":"KVM, pkeys: add pkeys support for permission_fault\n\nProtection keys define a new 4-bit protection key field (PKEY) in bits\n62:59 of leaf entries of the page tables, the PKEY is an index to PKRU\nregister(16 domains), every domain has 2 bits(write disable bit, access\ndisable bit).\n\nStatic logic has been produced in update_pkru_bitmask, dynamic logic need\nread pkey from page table entries, get pkru value, and deduce the correct\nresult.\n\n[ Huaitong: Xiao helps to modify many sections. ]\n\nSigned-off-by: Huaitong Han <huaitong.han@intel.com>\nSigned-off-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":72,"deletions":8,"filepaths":{"arch/x86/include/asm/kvm_host.h":{"insertions":3,"deletions":0},"arch/x86/kvm/kvm_cache_regs.h":{"insertions":5,"deletions":0},"arch/x86/kvm/mmu.h":{"insertions":28,"deletions":5},"arch/x86/kvm/paging_tmpl.h":{"insertions":14,"deletions":2},"arch/x86/kvm/svm.c":{"insertions":8,"deletions":0},"arch/x86/kvm/vmx.c":{"insertions":8,"deletions":0},"arch/x86/kvm/x86.c":{"insertions":6,"deletions":1}}},"42522d08cdba6d8be4247e4f0770f39f4708b71f":{"author":"Peter Xu","email":"peterx@redhat.com","date":"2018-07-18 07:57:50 UTC","message":"KVM: MMU: drop vcpu param in gpte_access\n\nIt's never used.  Drop it.\n\nSigned-off-by: Peter Xu <peterx@redhat.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":5,"deletions":5,"filepaths":{"arch/x86/kvm/paging_tmpl.h":{"insertions":5,"deletions":5}}},"d4878f24e32f5ea5330e6a48977c8997396bc014":{"author":"Xiao Guangrong","email":"xiaoguangrong@linux.vnet.ibm.com","date":"2012-10-16 12:08:43 UTC","message":"KVM: MMU: cleanup FNAME(page_fault)\n\nLet it return emulate state instead of spte like __direct_map\n\nSigned-off-by: Xiao Guangrong <xiaoguangrong@linux.vnet.ibm.com>\nSigned-off-by: Avi Kivity <avi@redhat.com>","insertions":13,"deletions":19,"filepaths":{"arch/x86/kvm/paging_tmpl.h":{"insertions":13,"deletions":19}}},"bb11c6c96544737aede6a2eb92e5c6bc8b46534b":{"author":"Takuya Yoshikawa","email":"yoshikawa_takuya_b1@lab.ntt.co.jp","date":"2015-11-26 12:16:35 UTC","message":"KVM: x86: MMU: Remove unused parameter parent_pte from kvm_mmu_get_page()\n\nSigned-off-by: Takuya Yoshikawa <yoshikawa_takuya_b1@lab.ntt.co.jp>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":9,"deletions":15,"filepaths":{"arch/x86/kvm/mmu.c":{"insertions":7,"deletions":13},"arch/x86/kvm/paging_tmpl.h":{"insertions":2,"deletions":2}}},"dd99e9f98fbf423ff6d365b37a98e8879170f17c":{"author":"Trond Myklebust","email":"trond.myklebust@hammerspace.com","date":"2021-06-09 14:04:46 UTC","message":"NFSv4: Initialise connection to the server in nfs4_alloc_client()\n\nSet up the connection to the NFSv4 server in nfs4_alloc_client(), before\nwe've added the struct nfs_client to the net-namespace's nfs_client_list\nso that a downed server won't cause other mounts to hang in the trunking\ndetection code.\n\nReported-by: Michael Wakabayashi <mwakabayashi@vmware.com>\nFixes: 5c6e5b60aae4 (\"NFS: Fix an Oops in the pNFS files and flexfiles connection setup to the DS\")\nSigned-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>","insertions":42,"deletions":40,"filepaths":{"fs/nfs/nfs4client.c":{"insertions":42,"deletions":40}}},"428360d77c801932e4b28f15160aebbdb5f5a03e":{"author":"Bryan Schumaker","email":"bjschuma@netapp.com","date":"2012-07-16 20:39:17 UTC","message":"NFS: Initialize the NFS v4 client from init_nfs_v4()\n\nAnd split these functions out of the generic client into a v4 specific\nfile.\n\nSigned-off-by: Bryan Schumaker <bjschuma@netapp.com>\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>","insertions":149,"deletions":135,"filepaths":{"fs/nfs/Makefile":{"insertions":1,"deletions":1},"fs/nfs/client.c":{"insertions":3,"deletions":134},"fs/nfs/internal.h":{"insertions":1,"deletions":0},"fs/nfs/nfs4client.c":{"insertions":144,"deletions":0}}},"ec409897e7c71596cc080135ef5f86b81a0e9813":{"author":"Bryan Schumaker","email":"bjschuma@netapp.com","date":"2012-07-16 20:39:21 UTC","message":"NFS: Split out NFS v4 client functions\n\nThese functions are only needed by NFS v4, so they can be moved into a\nv4 specific file.\n\nSigned-off-by: Bryan Schumaker <bjschuma@netapp.com>\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>","insertions":91,"deletions":93,"filepaths":{"fs/nfs/client.c":{"insertions":0,"deletions":93},"fs/nfs/nfs4client.c":{"insertions":91,"deletions":0}}},"5c6e5b60aae4347223f176966455010a5715b863":{"author":"Trond Myklebust","email":"trond.myklebust@primarydata.com","date":"2016-06-22 18:13:12 UTC","message":"NFS: Fix an Oops in the pNFS files and flexfiles connection setup to the DS\n\nChris Worley reports:\n RIP: 0010:[<ffffffffa0245f80>]  [<ffffffffa0245f80>] rpc_new_client+0x2a0/0x2e0 [sunrpc]\n RSP: 0018:ffff880158f6f548  EFLAGS: 00010246\n RAX: 0000000000000000 RBX: ffff880234f8bc00 RCX: 000000000000ea60\n RDX: 0000000000074cc0 RSI: 000000000000ea60 RDI: ffff880234f8bcf0\n RBP: ffff880158f6f588 R08: 000000000001ac80 R09: ffff880237003300\n R10: ffff880201171000 R11: ffffea0000d75200 R12: ffffffffa03afc60\n R13: ffff880230c18800 R14: 0000000000000000 R15: ffff880158f6f680\n FS:  00007f0e32673740(0000) GS:ffff88023fc40000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b\n CR2: 0000000000000008 CR3: 0000000234886000 CR4: 00000000001406e0\n Stack:\n  ffffffffa047a680 0000000000000000 ffff880158f6f598 ffff880158f6f680\n  ffff880158f6f680 ffff880234d11d00 ffff88023357f800 ffff880158f6f7d0\n  ffff880158f6f5b8 ffffffffa024660a ffff880158f6f5b8 ffffffffa02492ec\n Call Trace:\n  [<","insertions":37,"deletions":34,"filepaths":{"fs/nfs/client.c":{"insertions":10,"deletions":12},"fs/nfs/internal.h":{"insertions":8,"deletions":8},"fs/nfs/nfs3client.c":{"insertions":5,"deletions":3},"fs/nfs/nfs4client.c":{"insertions":12,"deletions":8},"include/linux/nfs_xdr.h":{"insertions":2,"deletions":3}}},"a1d617d8f134679741b0b35e8e1436b015ac5538":{"author":"Jeff Layton","email":"jlayton@redhat.com","date":"2016-09-17 22:17:39 UTC","message":"nfs: allow blocking locks to be awoken by lock callbacks\n\nAdd a waitqueue head to the client structure. Have clients set a wait\non that queue prior to requesting a lock from the server. If the lock\nis blocked, then we can use that to wait for wakeups.\n\nNote that we do need to do this \"manually\" since we need to set the\nwait on the waitqueue prior to requesting the lock, but requesting a\nlock can involve activities that can block.\n\nHowever, only do that for NFSv4.1 locks, either by compiling out\nall of the waitqueue handling when CONFIG_NFS_V4_1 is disabled, or\nskipping all of it at runtime if we're dealing with v4.0, or v4.1\nservers that don't send lock callbacks.\n\nNote too that even when we expect to get a lock callback, RFC5661\nsection 20.11.4 is pretty clear that we still need to poll for them,\nso we do still sleep on a timeout. We do however always poll at the\nlongest interval in that case.\n\nSigned-off-by: Jeff Layton <jlayton@redhat.com>\n[Anna: nfs4_retry_setlk() \"status\" should de","insertions":103,"deletions":1,"filepaths":{"fs/nfs/callback_proc.c":{"insertions":4,"deletions":0},"fs/nfs/nfs4client.c":{"insertions":3,"deletions":0},"fs/nfs/nfs4proc.c":{"insertions":93,"deletions":1},"include/linux/nfs_fs_sb.h":{"insertions":3,"deletions":0}}},"98f98cf571b7b1f34683455a61dae9f35e7222a1":{"author":"Trond Myklebust","email":"Trond.Myklebust@netapp.com","date":"2013-04-14 15:49:51 UTC","message":"NFSv4.1: Set the RPC_CLNT_CREATE_INFINITE_SLOTS flag for NFSv4.1 transports\n\nThis ensures that the RPC layer doesn't override the NFS session\nnegotiation.\n\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>","insertions":5,"deletions":0,"filepaths":{"fs/nfs/client.c":{"insertions":2,"deletions":0},"fs/nfs/nfs4client.c":{"insertions":2,"deletions":0},"include/linux/nfs_fs_sb.h":{"insertions":1,"deletions":0}}},"bc0c9079b48ddcf1f8a6e1aaa277288b263c78d8":{"author":"Olga Kornievskaia","email":"kolga@netapp.com","date":"2018-07-09 19:13:32 UTC","message":"NFS handle COPY reply CB_OFFLOAD call race\n\nIt's possible that server replies back with CB_OFFLOAD call and\nCOPY reply at the same time such that client will process\nCB_OFFLOAD before reply to COPY. For that keep a list of pending\ncallback stateids received and then before waiting on completion\ncheck the pending list.\n\nCleanup any pending copies on the client shutdown.\n\nSigned-off-by: Olga Kornievskaia <kolga@netapp.com>\nSigned-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>","insertions":50,"deletions":5,"filepaths":{"fs/nfs/callback_proc.c":{"insertions":14,"deletions":3},"fs/nfs/nfs42proc.c":{"insertions":20,"deletions":2},"fs/nfs/nfs4client.c":{"insertions":15,"deletions":0},"include/linux/nfs_fs_sb.h":{"insertions":1,"deletions":0}}},"99875249bfbfb6d9a2aba020ce65da2862d0dafa":{"author":"Trond Myklebust","email":"Trond.Myklebust@netapp.com","date":"2013-09-24 16:06:07 UTC","message":"NFSv4: Ensure that we disable the resend timeout for NFSv4\n\nThe spec states that the client should not resend requests because\nthe server will disconnect if it needs to drop an RPC request.\n\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>","insertions":4,"deletions":0,"filepaths":{"fs/nfs/client.c":{"insertions":2,"deletions":0},"fs/nfs/nfs4client.c":{"insertions":1,"deletions":0},"include/linux/nfs_fs_sb.h":{"insertions":1,"deletions":0}}},"6aa23d76a7b549521a03b63b6d5b7880ea87eab7":{"author":"Jeff Layton","email":"jlayton@redhat.com","date":"2013-11-14 12:25:19 UTC","message":"nfs: check if gssd is running before attempting to use krb5i auth in SETCLIENTID call\n\nCurrently, the client will attempt to use krb5i in the SETCLIENTID call\neven if rpc.gssd isn't running. When that fails, it'll then fall back to\nRPC_AUTH_UNIX. This introduced a delay when mounting if rpc.gssd isn't\nrunning, and causes warning messages to pop up in the ring buffer.\n\nCheck to see if rpc.gssd is running before even attempting to use krb5i\nauth, and just silently skip trying to do so if it isn't. In the event\nthat the admin is actually trying to mount with krb5*, it will still\nfail at a later stage of the mount attempt.\n\nSigned-off-by: Jeff Layton <jlayton@redhat.com>\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>","insertions":6,"deletions":1,"filepaths":{"fs/nfs/nfs4client.c":{"insertions":6,"deletions":1}}},"23631227a672de5e81e167c3178b39e9a50f6541":{"author":"Trond Myklebust","email":"Trond.Myklebust@netapp.com","date":"2013-04-04 20:14:11 UTC","message":"NFSv4: Fix the fallback to AUTH_NULL if krb5i is not available\n\nIf the rpcsec_gss_krb5 module cannot be loaded, the attempt to create\nan rpc_client in nfs4_init_client will currently fail with an EINVAL.\nFix is to retry with AUTH_NULL.\n\nRegression introduced by the commit \"NFS: Use \"krb5i\" to establish NFSv4\nstate whenever possible\"\n\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>\nCc: Chuck Lever <chuck.lever@oracle.com>\nCc: Bryan Schumaker <bjschuma@netapp.com>","insertions":2,"deletions":0,"filepaths":{"fs/nfs/nfs4client.c":{"insertions":2,"deletions":0}}},"60b7ed54a41b550d50caf7f2418db4a7e75b5bdc":{"author":"Athira Rajeev","email":"atrajeev@linux.vnet.ibm.com","date":"2021-06-17 17:55:06 UTC","message":"powerpc/perf: Fix crash in perf_instruction_pointer() when ppmu is not set\n\nOn systems without any specific PMU driver support registered, running\nperf record causes Oops.\n\nThe relevant portion from call trace:\n\n  BUG: Kernel NULL pointer dereference on read at 0x00000040\n  Faulting instruction address: 0xc0021f0c\n  Oops: Kernel access of bad area, sig: 11 [#1]\n  BE PAGE_SIZE=4K PREEMPT CMPCPRO\n  SAF3000 DIE NOTIFICATION\n  CPU: 0 PID: 442 Comm: null_syscall Not tainted 5.13.0-rc6-s3k-dev-01645-g7649ee3d2957 #5164\n  NIP:  c0021f0c LR: c00e8ad8 CTR: c00d8a5c\n  NIP perf_instruction_pointer+0x10/0x60\n  LR  perf_prepare_sample+0x344/0x674\n  Call Trace:\n    perf_prepare_sample+0x7c/0x674 (unreliable)\n    perf_event_output_forward+0x3c/0x94\n    __perf_event_overflow+0x74/0x14c\n    perf_swevent_hrtimer+0xf8/0x170\n    __hrtimer_run_queues.constprop.0+0x160/0x318\n    hrtimer_interrupt+0x148/0x3b0\n    timer_interrupt+0xc4/0x22c\n    Decrementer_virt+0xb8/0xbc\n\nDuring perf record session, perf_instr","insertions":1,"deletions":1,"filepaths":{"arch/powerpc/perf/core-book3s.c":{"insertions":1,"deletions":1}}},"2ca13a4cc56c920a6c9fc8ee45d02bccacd7f46c":{"author":"Madhavan Srinivasan","email":"maddy@linux.ibm.com","date":"2020-10-21 08:53:29 UTC","message":"powerpc/perf: Use regs->nip when SIAR is zero\n\nIn power10 DD1, there is an issue where the SIAR (Sampled Instruction\nAddress Register) is not latching to the sampled address during random\nsampling. This results in value of 0s in the SIAR. Add a check to use\nregs->nip when SIAR is zero.\n\nSigned-off-by: Madhavan Srinivasan <maddy@linux.ibm.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20201021085329.384535-5-maddy@linux.ibm.com","insertions":17,"deletions":4,"filepaths":{"arch/powerpc/perf/core-book3s.c":{"insertions":17,"deletions":4}}},"6d1c0f3d28f98ea2736128ed3e46821496dc3a8c":{"author":"Anna Schumaker","email":"Anna.Schumaker@Netapp.com","date":"2021-06-09 21:07:29 UTC","message":"sunrpc: Avoid a KASAN slab-out-of-bounds bug in xdr_set_page_base()\n\nThis seems to happen fairly easily during READ_PLUS testing on NFS v4.2.\nI found that we could end up accessing xdr->buf->pages[pgnr] with a pgnr\ngreater than the number of pages in the array. So let's just return\nearly if we're setting base to a point at the end of the page data and\nlet xdr_set_tail_base() handle setting up the buffer pointers instead.\n\nSigned-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>\nFixes: 8d86e373b0ef (\"SUNRPC: Clean up helpers xdr_set_iov() and xdr_set_page_base()\")\nSigned-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>","insertions":3,"deletions":4,"filepaths":{"net/sunrpc/xdr.c":{"insertions":3,"deletions":4}}},"8d86e373b0ef52d091ced9583ffbb33ad2771576":{"author":"Trond Myklebust","email":"trond.myklebust@hammerspace.com","date":"2020-11-21 19:50:43 UTC","message":"SUNRPC: Clean up helpers xdr_set_iov() and xdr_set_page_base()\n\nAllow xdr_set_iov() to set a base so that we can use it to set the\ncursor to a specific position in the kvec buffer.\n\nIf the new base overflows the kvec/pages buffer in either xdr_set_iov()\nor xdr_set_page_base(), then truncate it so that we point to the end of\nthe buffer.\n\nFinally, change both function to return the number of bytes remaining to\nread in their buffers.\n\nSigned-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>","insertions":19,"deletions":17,"filepaths":{"net/sunrpc/xdr.c":{"insertions":19,"deletions":17}}},"7b08cf62b1239a4322427d677ea9363f0ab677c6":{"author":"Chuck Lever","email":"chuck.lever@oracle.com","date":"2021-06-25 15:12:49 UTC","message":"NFSD: Prevent a possible oops in the nfs_dirent() tracepoint\n\nThe double copy of the string is a mistake, plus __assign_str()\nuses strlen(), which is wrong to do on a string that isn't\nguaranteed to be NUL-terminated.\n\nFixes: 6019ce0742ca (\"NFSD: Add a tracepoint to record directory entry encoding\")\nSigned-off-by: Chuck Lever <chuck.lever@oracle.com>\nSigned-off-by: J. Bruce Fields <bfields@redhat.com>","insertions":0,"deletions":1,"filepaths":{"fs/nfsd/trace.h":{"insertions":0,"deletions":1}}},"6019ce0742ca55d3e45279a19b07d1542747a098":{"author":"Chuck Lever","email":"chuck.lever@oracle.com","date":"2021-03-05 18:57:40 UTC","message":"NFSD: Add a tracepoint to record directory entry encoding\n\nEnable watching the progress of directory encoding to capture the\ntiming of any issues with reading or encoding a directory. The\nnew tracepoint captures dirent encoding for all NFS versions.\n\nFor example, here's what a few NFSv4 directory entries might look\nlike:\n\nnfsd-989   [002]   468.596265: nfsd_dirent:          fh_hash=0x5d162594 ino=2 name=.\nnfsd-989   [002]   468.596267: nfsd_dirent:          fh_hash=0x5d162594 ino=1 name=..\nnfsd-989   [002]   468.596299: nfsd_dirent:          fh_hash=0x5d162594 ino=3827 name=zlib.c\nnfsd-989   [002]   468.596325: nfsd_dirent:          fh_hash=0x5d162594 ino=3811 name=xdiff\nnfsd-989   [002]   468.596351: nfsd_dirent:          fh_hash=0x5d162594 ino=3810 name=xdiff-interface.h\nnfsd-989   [002]   468.596377: nfsd_dirent:          fh_hash=0x5d162594 ino=3809 name=xdiff-interface.c\n\nSigned-off-by: Chuck Lever <chuck.lever@oracle.com>","insertions":30,"deletions":3,"filepaths":{"fs/nfsd/trace.h":{"insertions":24,"deletions":0},"fs/nfsd/vfs.c":{"insertions":6,"deletions":3}}},"1cb3db1cf383a3c7dbda1aa0ce748b0958759947":{"author":"Filipe Manana","email":"fdmanana@suse.com","date":"2021-06-29 13:43:05 UTC","message":"btrfs: fix deadlock with concurrent chunk allocations involving system chunks\n\nWhen a task attempting to allocate a new chunk verifies that there is not\ncurrently enough free space in the system space_info and there is another\ntask that allocated a new system chunk but it did not finish yet the\ncreation of the respective block group, it waits for that other task to\nfinish creating the block group. This is to avoid exhaustion of the system\nchunk array in the superblock, which is limited, when we have a thundering\nherd of tasks allocating new chunks. This problem was described and fixed\nby commit eafa4fd0ad0607 (\"btrfs: fix exhaustion of the system chunk array\ndue to concurrent allocations\").\n\nHowever there are two very similar scenarios where this can lead to a\ndeadlock:\n\n1) Task B allocated a new system chunk and task A is waiting on task B\n   to finish creation of the respective system block group. However before\n   task B ends its transaction handle and finishes the creation of the\n  ","insertions":1,"deletions":69,"filepaths":{"fs/btrfs/block-group.c":{"insertions":1,"deletions":57},"fs/btrfs/transaction.c":{"insertions":0,"deletions":5},"fs/btrfs/transaction.h":{"insertions":0,"deletions":7}}},"eafa4fd0ad06074da8be4e28ff93b4dca9ffa407":{"author":"Filipe Manana","email":"fdmanana@suse.com","date":"2021-03-31 10:55:50 UTC","message":"btrfs: fix exhaustion of the system chunk array due to concurrent allocations\n\nWhen we are running out of space for updating the chunk tree, that is,\nwhen we are low on available space in the system space info, if we have\nmany task concurrently allocating block groups, via fallocate for example,\nmany of them can end up all allocating new system chunks when only one is\nneeded. In extreme cases this can lead to exhaustion of the system chunk\narray, which has a size limit of 2048 bytes, and results in a transaction\nabort with errno EFBIG, producing a trace in dmesg like the following,\nwhich was triggered on a PowerPC machine with a node/leaf size of 64K:\n\n  [1359.518899] ------------[ cut here ]------------\n  [1359.518980] BTRFS: Transaction aborted (error -27)\n  [1359.519135] WARNING: CPU: 3 PID: 16463 at ../fs/btrfs/block-group.c:1968 btrfs_create_pending_block_groups+0x340/0x3c0 [btrfs]\n  [1359.519152] Modules linked in: (...)\n  [1359.519239] Supported: Yes, External\n  [1359.519252] CPU","insertions":69,"deletions":1,"filepaths":{"fs/btrfs/block-group.c":{"insertions":57,"deletions":1},"fs/btrfs/transaction.c":{"insertions":5,"deletions":0},"fs/btrfs/transaction.h":{"insertions":7,"deletions":0}}},"07730d87ac7872b54efa02da5d20b42fd6bb165a":{"author":"Josef Bacik","email":"josef@toxicpanda.com","date":"2019-06-20 19:38:04 UTC","message":"btrfs: migrate the chunk allocation code\n\nThis feels more at home in block-group.c than in extent-tree.c.\n\nSigned-off-by: Josef Bacik <josef@toxicpanda.com>\nReviewed-by: David Sterba <dsterba@suse.com>i\n[ refresh ]\nSigned-off-by: David Sterba <dsterba@suse.com>","insertions":268,"deletions":268,"filepaths":{"fs/btrfs/block-group.c":{"insertions":246,"deletions":0},"fs/btrfs/block-group.h":{"insertions":21,"deletions":0},"fs/btrfs/ctree.h":{"insertions":0,"deletions":24},"fs/btrfs/delalloc-space.c":{"insertions":1,"deletions":0},"fs/btrfs/extent-tree.c":{"insertions":0,"deletions":244}}},"b5fdf5c6e6bee35837e160c00ac89327bdad031b":{"author":"Mark Tomlinson","email":"mark.tomlinson@alliedtelesis.co.nz","date":"2021-06-25 03:14:56 UTC","message":"usb: max-3421: Prevent corruption of freed memory\n\nThe MAX-3421 USB driver remembers the state of the USB toggles for a\ndevice/endpoint. To save SPI writes, this was only done when a new\ndevice/endpoint was being used. Unfortunately, if the old device was\nremoved, this would cause writes to freed memory.\n\nTo fix this, a simpler scheme is used. The toggles are read from\nhardware when a URB is completed, and the toggles are always written to\nhardware when any URB transaction is started. This will cause a few more\nSPI transactions, but no causes kernel panics.\n\nFixes: 2d53139f3162 (\"Add support for using a MAX3421E chip as a host driver.\")\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>\nLink: https://lore.kernel.org/r/20210625031456.8632-1-mark.tomlinson@alliedtelesis.co.nz\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":14,"deletions":30,"filepaths":{"drivers/usb/host/max3421-hcd.c":{"insertions":14,"deletions":30}}},"2d53139f31626bad6f8983d8e519ddde2cbba921":{"author":"David Mosberger","email":"davidm@egauge.net","date":"2014-04-29 04:14:07 UTC","message":"Add support for using a MAX3421E chip as a host driver.\n\nSigned-off-by: David Mosberger <davidm@egauge.net>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>","insertions":1973,"deletions":0,"filepaths":{"drivers/usb/Makefile":{"insertions":1,"deletions":0},"drivers/usb/host/Kconfig":{"insertions":11,"deletions":0},"drivers/usb/host/Makefile":{"insertions":1,"deletions":0},"drivers/usb/host/max3421-hcd.c":{"insertions":1937,"deletions":0},"include/linux/platform_data/max3421-hcd.h":{"insertions":23,"deletions":0}}},"d0d62baa7f505bd4c59cd169692ff07ec49dde37":{"author":"YueHaibing","email":"yuehaibing@huawei.com","date":"2021-05-19 02:47:04 UTC","message":"net: xilinx_emaclite: Do not print real IOMEM pointer\n\nPrinting kernel pointers is discouraged because they might leak kernel\nmemory layout.  This fixes smatch warning:\n\ndrivers/net/ethernet/xilinx/xilinx_emaclite.c:1191 xemaclite_of_probe() warn:\n argument 4 to %08lX specifier is cast from pointer\n\nSigned-off-by: YueHaibing <yuehaibing@huawei.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":2,"deletions":3,"filepaths":{"drivers/net/ethernet/xilinx/xilinx_emaclite.c":{"insertions":2,"deletions":3}}},"18af77c50fede5b3fc22aa9f0a9b255a5c5285c9":{"author":"Gary Guo","email":"gary@garyguo.net","date":"2021-02-16 22:33:42 UTC","message":"drivers: net: xilinx_emaclite: remove arch limitation\n\nThe changes made in eccd540 is enough for xilinx_emaclite to run\nwithout problem on 64-bit systems. I have tested it on a Xilinx\nFPGA with RV64 softcore. The architecture limitation in Kconfig\nseems no longer necessary.\n\nA small change is included to print address with %lx instead of\ncasting to int and print with %x.\n\nSigned-off-by: Gary Guo <gary@garyguo.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":2,"deletions":3,"filepaths":{"drivers/net/ethernet/xilinx/Kconfig":{"insertions":0,"deletions":1},"drivers/net/ethernet/xilinx/xilinx_emaclite.c":{"insertions":2,"deletions":2}}},"eccd5403814b4e762e270ef0464bb86fb217b1bf":{"author":"Andrew Lunn","email":"andrew@lunn.ch","date":"2020-11-10 02:40:23 UTC","message":"drivers: net: xilinx_emaclite: Fix -Wpointer-to-int-cast warnings with W=1\n\ndrivers/net/ethernet//xilinx/xilinx_emaclite.c:341:35: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]\n  341 |   addr = (void __iomem __force *)((u32 __force)addr ^\n\nUse uintptr_t instead of u32 to avoid problems on 64 bit systems.\n\nAlso, cast the address to an unsigned long for printing.\n\nSigned-off-by: Andrew Lunn <andrew@lunn.ch>\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>","insertions":7,"deletions":6,"filepaths":{"drivers/net/ethernet/xilinx/xilinx_emaclite.c":{"insertions":7,"deletions":6}}},"bddc0c411a45d3718ac535a070f349be8eca8d48":{"author":"Mathy Vanhoef","email":"Mathy.Vanhoef@kuleuven.be","date":"2021-05-30 13:32:26 UTC","message":"mac80211: Fix NULL ptr deref for injected rate info\n\nThe commit cb17ed29a7a5 (\"mac80211: parse radiotap header when selecting Tx\nqueue\") moved the code to validate the radiotap header from\nieee80211_monitor_start_xmit to ieee80211_parse_tx_radiotap. This made is\npossible to share more code with the new Tx queue selection code for\ninjected frames. But at the same time, it now required the call of\nieee80211_parse_tx_radiotap at the beginning of functions which wanted to\nhandle the radiotap header. And this broke the rate parser for radiotap\nheader parser.\n\nThe radiotap parser for rates is operating most of the time only on the\ndata in the actual radiotap header. But for the 802.11a/b/g rates, it must\nalso know the selected band from the chandef information. But this\ninformation is only written to the ieee80211_tx_info at the end of the\nieee80211_monitor_start_xmit - long after ieee80211_parse_tx_radiotap was\nalready called. The info->band information was therefore always 0\n(NL80211_BAND_2","insertions":42,"deletions":17,"filepaths":{"include/net/mac80211.h":{"insertions":6,"deletions":1},"net/mac80211/tx.c":{"insertions":36,"deletions":16}}},"b1e8eb11fb9cf666d8ae36bbcf533233a504c921":{"author":"Mauro Carvalho Chehab","email":"mchehab+huawei@kernel.org","date":"2020-10-23 16:33:08 UTC","message":"mac80211: fix kernel-doc markups\n\nSome identifiers have different names between their prototypes\nand the kernel-doc markup.\n\nOthers need to be fixed, as kernel-doc markups should use this format:\n        identifier - description\n\nIn the specific case of __sta_info_flush(), add a documentation\nfor sta_info_flush(), as this one is the one used outside\nsta_info.c.\n\nSigned-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>\nReviewed-by: Johannes Berg <johannes@sipsolutions.net>\nLink: https://lore.kernel.org/r/978d35eef2dc76e21c81931804e4eaefbd6d635e.1603469755.git.mchehab+huawei@kernel.org\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>","insertions":17,"deletions":8,"filepaths":{"include/net/cfg80211.h":{"insertions":5,"deletions":4},"include/net/mac80211.h":{"insertions":4,"deletions":3},"net/mac80211/sta_info.h":{"insertions":8,"deletions":1}}},"cb17ed29a7a5fea8c9bf70e8a05757d71650e025":{"author":"Mathy Vanhoef","email":"Mathy.Vanhoef@kuleuven.be","date":"2020-07-23 10:01:53 UTC","message":"mac80211: parse radiotap header when selecting Tx queue\n\nAlready parse the radiotap header in ieee80211_monitor_select_queue.\nIn a subsequent commit this will allow us to add a radiotap flag that\ninfluences the queue on which injected packets will be sent.\n\nThis also fixes the incomplete validation of the injected frame in\nieee80211_monitor_select_queue: currently an out of bounds memory\naccess may occur in in the called function ieee80211_select_queue_80211\nif the 802.11 header is too small.\n\nNote that in ieee80211_monitor_start_xmit the radiotap header is parsed\nagain, which is necessairy because ieee80211_monitor_select_queue is not\nalways called beforehand.\n\nSigned-off-by: Mathy Vanhoef <Mathy.Vanhoef@kuleuven.be>\nLink: https://lore.kernel.org/r/20200723100153.31631-6-Mathy.Vanhoef@kuleuven.be\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>","insertions":43,"deletions":34,"filepaths":{"include/net/mac80211.h":{"insertions":8,"deletions":0},"net/mac80211/iface.c":{"insertions":11,"deletions":4},"net/mac80211/tx.c":{"insertions":24,"deletions":30}}},"dfdfc2beb0dd7e3a067d2eeacb4623cb48e77658":{"author":"Sven Eckelmann","email":"sven@narfation.org","date":"2016-01-26 16:11:13 UTC","message":"mac80211: Parse legacy and HT rate in injected frames\n\nDrivers/devices without their own rate control algorithm can get the\ninformation what rates they should use from either the radiotap header of\ninjected frames or from the rate control algorithm. But the parsing of the\nlegacy rate information from the radiotap header was removed in commit\ne6a9854b05c1 (\"mac80211/drivers: rewrite the rate control API\").\n\nThe removal of this feature heavily reduced the usefulness of frame\ninjection when wanting to simulate specific transmission behavior. Having\nrate parsing together with MCS rates and retry support allows a fine\ngrained selection of the tx behavior of injected frames for these kind of\ntests.\n\nSigned-off-by: Sven Eckelmann <sven@narfation.org>\nCc: Simon Wunderlich <sw@simonwunderlich.de>\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>","insertions":89,"deletions":2,"filepaths":{"Documentation/networking/mac80211-injection.txt":{"insertions":17,"deletions":0},"include/net/mac80211.h":{"insertions":2,"deletions":0},"net/mac80211/tx.c":{"insertions":70,"deletions":2}}},"73b9f03a813d66484105c4ed648a1aa66fa267aa":{"author":"Johannes Berg","email":"johannes.berg@intel.com","date":"2011-10-07 12:01:26 UTC","message":"mac80211: parse radiotap header earlier\n\nWe can now move the radiotap header parsing into\nieee80211_monitor_start_xmit(). This moves it out of\nthe hotpath, and also helps the code since now the\nradiotap header will no longer be present in\nieee80211_xmit() etc. which is easier to understand.\n\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>","insertions":89,"deletions":116,"filepaths":{"include/net/mac80211.h":{"insertions":1,"deletions":3},"net/mac80211/tx.c":{"insertions":88,"deletions":113}}},"96a7109a16665255b65d021e24141c2edae0e202":{"author":"Johan Almbladh","email":"johan.almbladh@anyfinetworks.com","date":"2021-04-01 16:44:55 UTC","message":"mac80211: Set priority and queue mapping for injected frames\n\nSome drivers, for example mt76, use the skb priority field, and\nexpects that to be consistent with the skb queue mapping. On some\nframe injection code paths that was not true, and it broke frame\ninjection. Now the skb queue mapping is set according to the skb\npriority value when the frame is injected. The skb priority value\nis also derived from the frame data for all frame types, as it\nwas done prior to commit dbd50a851c50 (only allocate one queue\nwhen using iTXQs). Fixes frame injection with the mt76 driver on\nMT7610E chipset.\n\nSigned-off-by: Johan Almbladh <johan.almbladh@anyfinetworks.com>\nLink: https://lore.kernel.org/r/20210401164455.978245-1-johan.almbladh@anyfinetworks.com\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>","insertions":9,"deletions":11,"filepaths":{"net/mac80211/tx.c":{"insertions":9,"deletions":11}}},"e2ebc74d7e3d71600640db6fbb28cc2f362184c1":{"author":"Johannes Berg","email":"johannes@sipsolutions.net","date":"2007-07-27 13:43:22 UTC","message":"[MAC80211]: split TX path into own file\n\nSigned-off-by: Johannes Berg <johannes@sipsolutions.net>\nSigned-off-by: Jiri Benc <jbenc@suse.cz>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>","insertions":2016,"deletions":1981,"filepaths":{"net/mac80211/Makefile":{"insertions":1,"deletions":0},"net/mac80211/ieee80211.c":{"insertions":132,"deletions":1977},"net/mac80211/ieee80211_i.h":{"insertions":14,"deletions":4},"net/mac80211/tx.c":{"insertions":1869,"deletions":0}}},"08aca29aa8b18dec2e84bc97d27dabe133b75822":{"author":"Mathy Vanhoef","email":"Mathy.Vanhoef@kuleuven.be","date":"2020-07-23 10:01:52 UTC","message":"mac80211: remove unused flags argument in transmit functions\n\nThe flags argument in transmit functions is no longer being used\nand can be removed.\n\nSigned-off-by: Mathy Vanhoef <Mathy.Vanhoef@kuleuven.be>\nLink: https://lore.kernel.org/r/20200723100153.31631-5-Mathy.Vanhoef@kuleuven.be\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>","insertions":18,"deletions":22,"filepaths":{"net/mac80211/cfg.c":{"insertions":1,"deletions":1},"net/mac80211/ieee80211_i.h":{"insertions":5,"deletions":6},"net/mac80211/offchannel.c":{"insertions":1,"deletions":1},"net/mac80211/rx.c":{"insertions":1,"deletions":1},"net/mac80211/scan.c":{"insertions":1,"deletions":1},"net/mac80211/sta_info.c":{"insertions":1,"deletions":1},"net/mac80211/tx.c":{"insertions":8,"deletions":11}}},"109843b07aed8663a3c1fe9ef02c540b6ff203b4":{"author":"Lorenzo Bianconi","email":"lorenzo.bianconi83@gmail.com","date":"2016-02-19 11:18:01 UTC","message":"mac80211: fix wiphy supported_band access\n\nFix wiphy supported_band access in tx radiotap parsing introduced\nin commit 5ec3aed9ba4c (\"mac80211: Parse legacy and HT rate in\ninjected frames\"). In particular, info->band is always set to 0\n(IEEE80211_BAND_2GHZ) since it has not assigned yet.\nThis cause a kernel crash on 5GHz only devices.\nMove ieee80211_parse_tx_radiotap() after info->band assignment\n\nSigned-off-by: Lorenzo Bianconi <lorenzo.bianconi83@gmail.com>\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>","insertions":5,"deletions":4,"filepaths":{"net/mac80211/tx.c":{"insertions":5,"deletions":4}}},"c364df2489b8ef2f5e3159b1dff1ff1fdb16040d":{"author":"Esben Haabendal","email":"esben@geanix.com","date":"2021-06-18 10:52:33 UTC","message":"net: ll_temac: Fix TX BD buffer overwrite\n\nJust as the initial check, we need to ensure num_frag+1 buffers available,\nas that is the number of buffers we are going to use.\n\nThis fixes a buffer overflow, which might be seen during heavy network\nload. Complete lockup of TEMAC was reproducible within about 10 minutes of\na particular load.\n\nFixes: 84823ff80f74 (\"net: ll_temac: Fix race condition causing TX hang\")\nCc: stable@vger.kernel.org # v5.4+\nSigned-off-by: Esben Haabendal <esben@geanix.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":1,"deletions":1,"filepaths":{"drivers/net/ethernet/xilinx/ll_temac_main.c":{"insertions":1,"deletions":1}}},"84823ff80f7403752b59e00bb198724100dc611c":{"author":"Esben Haabendal","email":"esben@geanix.com","date":"2020-02-21 06:47:21 UTC","message":"net: ll_temac: Fix race condition causing TX hang\n\nIt is possible that the interrupt handler fires and frees up space in\nthe TX ring in between checking for sufficient TX ring space and\nstopping the TX queue in temac_start_xmit. If this happens, the\nqueue wake from the interrupt handler will occur before the queue is\nstopped, causing a lost wakeup and the adapter's transmit hanging.\n\nTo avoid this, after stopping the queue, check again whether there is\nsufficient space in the TX ring. If so, wake up the queue again.\n\nThis is a port of the similar fix in axienet driver,\ncommit 7de44285c1f6 (\"net: axienet: Fix race condition causing TX hang\").\n\nFixes: 23ecc4bde21f (\"net: ll_temac: fix checksum offload logic\")\nSigned-off-by: Esben Haabendal <esben@geanix.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":16,"deletions":3,"filepaths":{"drivers/net/ethernet/xilinx/ll_temac_main.c":{"insertions":16,"deletions":3}}},"4ac06a1e013cf5fdd963317ffd3b968560f33bba":{"author":"Krzysztof Kozlowski","email":"krzysztof.kozlowski@canonical.com","date":"2021-05-31 07:21:38 UTC","message":"nfc: fix NULL ptr dereference in llcp_sock_getname() after failed connect\n\nIt's possible to trigger NULL pointer dereference by local unprivileged\nuser, when calling getsockname() after failed bind() (e.g. the bind\nfails because LLCP_SAP_MAX used as SAP):\n\n  BUG: kernel NULL pointer dereference, address: 0000000000000000\n  CPU: 1 PID: 426 Comm: llcp_sock_getna Not tainted 5.13.0-rc2-next-20210521+ #9\n  Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-1 04/01/2014\n  Call Trace:\n   llcp_sock_getname+0xb1/0xe0\n   __sys_getpeername+0x95/0xc0\n   ? lockdep_hardirqs_on_prepare+0xd5/0x180\n   ? syscall_enter_from_user_mode+0x1c/0x40\n   __x64_sys_getpeername+0x11/0x20\n   do_syscall_64+0x36/0x70\n   entry_SYSCALL_64_after_hwframe+0x44/0xae\n\nThis can be reproduced with Syzkaller C repro (bind followed by\ngetpeername):\nhttps://syzkaller.appspot.com/x/repro.c?x=14def446e00000\n\nCc: <stable@vger.kernel.org>\nFixes: d646960f7986 (\"NFC: Initial LLCP support\")\nReported-by: syzbot+80fb126e7","insertions":2,"deletions":0,"filepaths":{"net/nfc/llcp_sock.c":{"insertions":2,"deletions":0}}},"a0c2dc1fe63e2869b74c1c7f6a81d1745c8a695d":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2019-10-04 18:08:34 UTC","message":"nfc: fix memory leak in llcp_sock_bind()\n\nsysbot reported a memory leak after a bind() has failed.\n\nWhile we are at it, abort the operation if kmemdup() has failed.\n\nBUG: memory leak\nunreferenced object 0xffff888105d83ec0 (size 32):\n  comm \"syz-executor067\", pid 7207, jiffies 4294956228 (age 19.430s)\n  hex dump (first 32 bytes):\n    00 69 6c 65 20 72 65 61 64 00 6e 65 74 3a 5b 34  .ile read.net:[4\n    30 32 36 35 33 33 30 39 37 5d 00 00 00 00 00 00  026533097]......\n  backtrace:\n    [<0000000036bac473>] kmemleak_alloc_recursive /./include/linux/kmemleak.h:43 [inline]\n    [<0000000036bac473>] slab_post_alloc_hook /mm/slab.h:522 [inline]\n    [<0000000036bac473>] slab_alloc /mm/slab.c:3319 [inline]\n    [<0000000036bac473>] __do_kmalloc /mm/slab.c:3653 [inline]\n    [<0000000036bac473>] __kmalloc_track_caller+0x169/0x2d0 /mm/slab.c:3670\n    [<000000000cd39d07>] kmemdup+0x27/0x60 /mm/util.c:120\n    [<000000008e57e5fc>] kmemdup /./include/linux/string.h:432 [inline]\n    [<000000008e57e5fc>] ll","insertions":1,"deletions":6,"filepaths":{"net/nfc/llcp_sock.c":{"insertions":1,"deletions":6}}},"c61760e6940dd4039a7f5e84a6afc9cdbf4d82b6":{"author":"Or Cohen","email":"orcohen@paloaltonetworks.com","date":"2021-05-04 07:16:46 UTC","message":"net/nfc: fix use-after-free llcp_sock_bind/connect\n\nCommits 8a4cd82d (\"nfc: fix refcount leak in llcp_sock_connect()\")\nand c33b1cc62 (\"nfc: fix refcount leak in llcp_sock_bind()\")\nfixed a refcount leak bug in bind/connect but introduced a\nuse-after-free if the same local is assigned to 2 different sockets.\n\nThis can be triggered by the following simple program:\n    int sock1 = socket( AF_NFC, SOCK_STREAM, NFC_SOCKPROTO_LLCP );\n    int sock2 = socket( AF_NFC, SOCK_STREAM, NFC_SOCKPROTO_LLCP );\n    memset( &addr, 0, sizeof(struct sockaddr_nfc_llcp) );\n    addr.sa_family = AF_NFC;\n    addr.nfc_protocol = NFC_PROTO_NFC_DEP;\n    bind( sock1, (struct sockaddr*) &addr, sizeof(struct sockaddr_nfc_llcp) )\n    bind( sock2, (struct sockaddr*) &addr, sizeof(struct sockaddr_nfc_llcp) )\n    close(sock1);\n    close(sock2);\n\nFix this by assigning NULL to llcp_sock->local after calling\nnfc_llcp_local_put.\n\nThis addresses CVE-2021-23134.\n\nReported-by: Or Cohen <orcohen@paloaltonetworks.com>\nReported-by: ","insertions":4,"deletions":0,"filepaths":{"net/nfc/llcp_sock.c":{"insertions":4,"deletions":0}}},"8b7e8eda58cc09974708dcc6db4c202c419d6cd9":{"author":"Samuel Ortiz","email":"sameo@linux.intel.com","date":"2012-06-22 13:32:20 UTC","message":"NFC: Forbid LLCP service name reusing\n\nThis patch fixes a typo and return the correct error when trying to\nbind 2 sockets to the same service name.\n\nSigned-off-by: Samuel Ortiz <sameo@linux.intel.com>","insertions":1,"deletions":3,"filepaths":{"net/nfc/llcp/sock.c":{"insertions":1,"deletions":3}}},"c33b1cc62ac05c1dbb1cdafe2eb66da01c76ca8d":{"author":"Xiaoming Ni","email":"nixiaoming@huawei.com","date":"2021-03-25 03:51:10 UTC","message":"nfc: fix refcount leak in llcp_sock_bind()\n\nnfc_llcp_local_get() is invoked in llcp_sock_bind(),\nbut nfc_llcp_local_put() is not invoked in subsequent failure branches.\nAs a result, refcount leakage occurs.\nTo fix it, add calling nfc_llcp_local_put().\n\nfix CVE-2020-25670\nFixes: c7aa12252f51 (\"NFC: Take a reference on the LLCP local pointer when creating a socket\")\nReported-by: \"kiyin(尹亮)\" <kiyin@tencent.com>\nLink: https://www.openwall.com/lists/oss-security/2020/11/01/1\nCc: <stable@vger.kernel.org> #v3.6\nSigned-off-by: Xiaoming Ni <nixiaoming@huawei.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":2,"deletions":0,"filepaths":{"net/nfc/llcp_sock.c":{"insertions":2,"deletions":0}}},"d646960f7986fefb460a2b062d5ccc8ccfeacc3a":{"author":"Samuel Ortiz","email":"sameo@linux.intel.com","date":"2011-12-14 15:43:12 UTC","message":"NFC: Initial LLCP support\n\nThis patch is an initial implementation for the NFC Logical Link Control\nprotocol. It's also known as NFC peer to peer mode.\nThis is a basic implementation as it lacks SDP (services Discovery\nProtocol), frames aggregation support, and frame rejecion parsing.\nFollow up patches will implement those missing features.\nThis code has been tested against a Nexus S phone implementing LLCP 1.0.\n\nSigned-off-by: Samuel Ortiz <sameo@linux.intel.com>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>","insertions":3,"deletions":2335,"filepaths":{"include/linux/nfc.h":{"insertions":1,"deletions":14},"net/nfc/Kconfig":{"insertions":0,"deletions":1},"net/nfc/Makefile":{"insertions":0,"deletions":1},"net/nfc/core.c":{"insertions":2,"deletions":18},"net/nfc/llcp/Kconfig":{"insertions":0,"deletions":7},"net/nfc/llcp/commands.c":{"insertions":0,"deletions":399},"net/nfc/llcp/llcp.c":{"insertions":0,"deletions":973},"net/nfc/llcp/llcp.h":{"insertions":0,"deletions":193},"net/nfc/llcp/sock.c":{"insertions":0,"deletions":675},"net/nfc/nfc.h":{"insertions":0,"deletions":54}}},"2671fa4dc0109d3fb581bc3078fdf17b5d9080f6":{"author":"Jonathon Reinhart","email":"jonathon.reinhart@gmail.com","date":"2021-04-12 04:24:53 UTC","message":"netfilter: conntrack: Make global sysctls readonly in non-init netns\n\nThese sysctls point to global variables:\n- NF_SYSCTL_CT_MAX (&nf_conntrack_max)\n- NF_SYSCTL_CT_EXPECT_MAX (&nf_ct_expect_max)\n- NF_SYSCTL_CT_BUCKETS (&nf_conntrack_htable_size_user)\n\nBecause their data pointers are not updated to point to per-netns\nstructures, they must be marked read-only in a non-init_net ns.\nOtherwise, changes in any net namespace are reflected in (leaked into)\nall other net namespaces. This problem has existed since the\nintroduction of net namespaces.\n\nThe current logic marks them read-only only if the net namespace is\nowned by an unprivileged user (other than init_user_ns).\n\nCommit d0febd81ae77 (\"netfilter: conntrack: re-visit sysctls in\nunprivileged namespaces\") \"exposes all sysctls even if the namespace is\nunpriviliged.\" Since we need to mark them readonly in any case, we can\nforego the unprivileged user check altogether.\n\nFixes: d0febd81ae77 (\"netfilter: conntrack: re-visit sysctls in unprivil","insertions":2,"deletions":8,"filepaths":{"net/netfilter/nf_conntrack_standalone.c":{"insertions":2,"deletions":8}}},"d0febd81ae77a0e13717f1412ff9589e43fc4f8b":{"author":"Florian Westphal","email":"fw@strlen.de","date":"2020-03-11 19:52:01 UTC","message":"netfilter: conntrack: re-visit sysctls in unprivileged namespaces\n\nsince commit b884fa46177659 (\"netfilter: conntrack: unify sysctl handling\")\nconntrack no longer exposes most of its sysctls (e.g. tcp timeouts\nsettings) to network namespaces that are not owned by the initial user\nnamespace.\n\nThis patch exposes all sysctls even if the namespace is unpriviliged.\n\ncompared to a 4.19 kernel, the newly visible and writeable sysctls are:\n  net.netfilter.nf_conntrack_acct\n  net.netfilter.nf_conntrack_timestamp\n  .. to allow to enable accouting and timestamp extensions.\n\n  net.netfilter.nf_conntrack_events\n  .. to turn off conntrack event notifications.\n\n  net.netfilter.nf_conntrack_checksum\n  .. to disable checksum validation.\n\n  net.netfilter.nf_conntrack_log_invalid\n  .. to enable logging of packets deemed invalid by conntrack.\n\nnewly visible sysctls that are only exported as read-only:\n\n  net.netfilter.nf_conntrack_count\n  .. current number of conntrack entries living in this netns.\n\n  net.","insertions":8,"deletions":11,"filepaths":{"net/netfilter/nf_conntrack_standalone.c":{"insertions":8,"deletions":11}}},"cb2833ed0044f910877b810077bc6da2ac5f09a2":{"author":"Florian Westphal","email":"fw@strlen.de","date":"2018-12-18 22:04:48 UTC","message":"netfilter: conntrack: merge ecache and timestamp sysctl tables with main one\n\nSimilar to previous change, this time for eache and timestamp.\nUnlike helper and acct, these can be disabled at build time, so they\nneed ifdef guards.\n\nNext patch will remove a few (now obsolete) functions.\n\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":35,"deletions":128,"filepaths":{"net/netfilter/nf_conntrack_ecache.c":{"insertions":1,"deletions":64},"net/netfilter/nf_conntrack_standalone.c":{"insertions":33,"deletions":0},"net/netfilter/nf_conntrack_timestamp.c":{"insertions":1,"deletions":64}}},"d912dec124288553c734e25fef3ecfef92f894db":{"author":"Florian Westphal","email":"fw@strlen.de","date":"2018-12-18 22:04:47 UTC","message":"netfilter: conntrack: merge acct and helper sysctl table with main one\n\nNeedless copy&paste, just handle all in one.  Next patch will handle\nacct and timestamp, which have similar functions.\n\nIntentionally leaves cruft behind, will be cleaned up in a followup\npatch.\n\nThe obsolete sysctl pointers in netns_ct struct are left in place and\nremoved in a single change, as changes to netns trigger rebuild of\nalmost all files.\n\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":22,"deletions":128,"filepaths":{"net/netfilter/nf_conntrack_acct.c":{"insertions":1,"deletions":64},"net/netfilter/nf_conntrack_helper.c":{"insertions":1,"deletions":63},"net/netfilter/nf_conntrack_standalone.c":{"insertions":20,"deletions":1}}},"4a65798a94089f31883eee705f580e4b2d734ecf":{"author":"Florian Westphal","email":"fw@strlen.de","date":"2018-12-18 22:04:46 UTC","message":"netfilter: conntrack: add mnemonics for sysctl table\n\nIts a bit hard to see what table[3] really lines up with, so add\nhuman-readable mnemonics and use them for initialisation.\n\nThis makes it easier to see e.g. which sysctls are not exported to\nunprivileged userns.\n\nobjdiff shows no changes.\n\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":20,"deletions":11,"filepaths":{"net/netfilter/nf_conntrack_standalone.c":{"insertions":20,"deletions":11}}},"37cb28ec7d3a36a5bace7063a3dba633ab110f8b":{"author":"Piotr Krysiuk","email":"piotras@gmail.com","date":"2021-09-15 16:04:37 UTC","message":"bpf, mips: Validate conditional branch offsets\n\nThe conditional branch instructions on MIPS use 18-bit signed offsets\nallowing for a branch range of 128 KBytes (backward and forward).\nHowever, this limit is not observed by the cBPF JIT compiler, and so\nthe JIT compiler emits out-of-range branches when translating certain\ncBPF programs. A specific example of such a cBPF program is included in\nthe \"BPF_MAXINSNS: exec all MSH\" test from lib/test_bpf.c that executes\nanomalous machine code containing incorrect branch offsets under JIT.\n\nFurthermore, this issue can be abused to craft undesirable machine\ncode, where the control flow is hijacked to execute arbitrary Kernel\ncode.\n\nThe following steps can be used to reproduce the issue:\n\n  # echo 1 > /proc/sys/net/core/bpf_jit_enable\n  # modprobe test_bpf test_name=\"BPF_MAXINSNS: exec all MSH\"\n\nThis should produce multiple warnings from build_bimm() similar to:\n\n  ------------[ cut here ]------------\n  WARNING: CPU: 0 PID: 209 at arch/mips/mm/uas","insertions":43,"deletions":14,"filepaths":{"arch/mips/net/bpf_jit.c":{"insertions":43,"deletions":14}}},"36366e367ee93ced84fddb8fae6675e12985f5a4":{"author":"Paul Burton","email":"paulburton@kernel.org","date":"2019-12-05 18:23:18 UTC","message":" iIwEABYIADQWIQRgLjeFAZEXQzy86/s+p5+stXUA3QUCXhexgRYccGF1bGJ1cnRv\n bkBrZXJuZWwub3JnAAoJED6nn6y1dQDd6tUA/RXpOKol3culdCBr0nsdKoqnYDLX\n F56C8SCiT0cwv0KqAP0cyLCMsi6d0JeWKJn7mxwBTWwWE3aznCAD8B4aZ5oLAA==\n =I89+\n -----END PGP SIGNATURE-----\n\nMIPS: BPF: Restore MIPS32 cBPF JIT\n\nCommit 716850ab104d (\"MIPS: eBPF: Initial eBPF support for MIPS32\narchitecture.\") enabled our eBPF JIT for MIPS32 kernels, whereas it has\npreviously only been availailable for MIPS64. It was my understanding at\nthe time that the BPF test suite was passing & JITing a comparable\nnumber of tests to our cBPF JIT [1], but it turns out that was not the\ncase.\n\nThe eBPF JIT has a number of problems on MIPS32:\n\n- Most notably various code paths still result in emission of MIPS64\n  instructions which will cause reserved instruction exceptions & kernel\n  panics when run on MIPS32 CPUs.\n\n- The eBPF JIT doesn't account for differences between the O32 ABI used\n  by MIPS32 kernels versus the N64 ABI used by MIPS64 kernels. Notably\n  ar","insertions":1557,"deletions":0,"filepaths":{"arch/mips/Kconfig":{"insertions":1,"deletions":0},"arch/mips/net/Makefile":{"insertions":1,"deletions":0},"arch/mips/net/bpf_jit.c":{"insertions":1270,"deletions":0},"arch/mips/net/bpf_jit_asm.S":{"insertions":285,"deletions":0}}},"353050be4c19e102178ccc05988101887c25ae53":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-11-09 18:48:08 UTC","message":"bpf: Fix toctou on read-only map's constant scalar tracking\n\nCommit a23740ec43ba (\"bpf: Track contents of read-only maps as scalars\") is\nchecking whether maps are read-only both from BPF program side and user space\nside, and then, given their content is constant, reading out their data via\nmap->ops->map_direct_value_addr() which is then subsequently used as known\nscalar value for the register, that is, it is marked as __mark_reg_known()\nwith the read value at verification time. Before a23740ec43ba, the register\ncontent was marked as an unknown scalar so the verifier could not make any\nassumptions about the map content.\n\nThe current implementation however is prone to a TOCTOU race, meaning, the\nvalue read as known scalar for the register is not guaranteed to be exactly\nthe same at a later point when the program is executed, and as such, the\nprior made assumptions of the verifier with regards to the program will be\ninvalid which can cause issues such as OOB access, etc.\n\nWhile the BPF_F_R","insertions":54,"deletions":23,"filepaths":{"include/linux/bpf.h":{"insertions":2,"deletions":1},"kernel/bpf/syscall.c":{"insertions":36,"deletions":21},"kernel/bpf/verifier.c":{"insertions":16,"deletions":1}}},"196e8ca74886c433dcfc64a809707074b936aaf5":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2019-11-20 22:04:44 UTC","message":"bpf: Switch bpf_map_{area_alloc,area_mmapable_alloc}() to u64 size\n\nGiven we recently extended the original bpf_map_area_alloc() helper in\ncommit fc9702273e2e (\"bpf: Add mmap() support for BPF_MAP_TYPE_ARRAY\"),\nwe need to apply the same logic as in ff1c08e1f74b (\"bpf: Change size\nto u64 for bpf_map_{area_alloc, charge_init}()\"). To avoid conflicts,\nextend it for bpf-next.\n\nReported-by: Stephen Rothwell <sfr@canb.auug.org.au>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>","insertions":7,"deletions":10,"filepaths":{"include/linux/bpf.h":{"insertions":3,"deletions":3},"kernel/bpf/syscall.c":{"insertions":4,"deletions":7}}},"cb4d03ab499d4c040f4ab6fd4389d2b49f42b5a5":{"author":"Brian Vazquez","email":"brianvv@google.com","date":"2020-01-15 18:43:01 UTC","message":"bpf: Add generic support for lookup batch op\n\nThis commit introduces generic support for the bpf_map_lookup_batch.\nThis implementation can be used by almost all the bpf maps since its core\nimplementation is relying on the existing map_get_next_key and\nmap_lookup_elem. The bpf syscall subcommand introduced is:\n\n  BPF_MAP_LOOKUP_BATCH\n\nThe UAPI attribute is:\n\n  struct { /* struct used by BPF_MAP_*_BATCH commands */\n         __aligned_u64   in_batch;       /* start batch,\n                                          * NULL to start from beginning\n                                          */\n         __aligned_u64   out_batch;      /* output: next start batch */\n         __aligned_u64   keys;\n         __aligned_u64   values;\n         __u32           count;          /* input/output:\n                                          * input: # of key/value\n                                          * elements\n                                          * output: # of filled elements\n                       ","insertions":4,"deletions":179,"filepaths":{"include/linux/bpf.h":{"insertions":0,"deletions":5},"include/uapi/linux/bpf.h":{"insertions":0,"deletions":18},"kernel/bpf/syscall.c":{"insertions":4,"deletions":156}}},"fc9702273e2edb90400a34b3be76f7b08fa3344b":{"author":"Andrii Nakryiko","email":"andriin@fb.com","date":"2019-11-17 17:28:04 UTC","message":"bpf: Add mmap() support for BPF_MAP_TYPE_ARRAY\n\nAdd ability to memory-map contents of BPF array map. This is extremely useful\nfor working with BPF global data from userspace programs. It allows to avoid\ntypical bpf_map_{lookup,update}_elem operations, improving both performance\nand usability.\n\nThere had to be special considerations for map freezing, to avoid having\nwritable memory view into a frozen map. To solve this issue, map freezing and\nmmap-ing is happening under mutex now:\n  - if map is already frozen, no writable mapping is allowed;\n  - if map has writable memory mappings active (accounted in map->writecnt),\n    map freezing will keep failing with -EBUSY;\n  - once number of writable memory mappings drops to zero, map freezing can be\n    performed again.\n\nOnly non-per-CPU plain arrays are supported right now. Maps with spinlocks\ncan't be memory mapped either.\n\nFor BPF_F_MMAPABLE array, memory allocation has to be done through vmalloc()\nto be mmap()'able. We also need to make sure","insertions":12,"deletions":183,"filepaths":{"include/linux/bpf.h":{"insertions":3,"deletions":8},"include/linux/vmalloc.h":{"insertions":0,"deletions":1},"include/uapi/linux/bpf.h":{"insertions":0,"deletions":3},"kernel/bpf/arraymap.c":{"insertions":6,"deletions":52},"kernel/bpf/syscall.c":{"insertions":3,"deletions":96},"mm/vmalloc.c":{"insertions":0,"deletions":20},"tools/include/uapi/linux/bpf.h":{"insertions":0,"deletions":3}}},"d407bd25a204bd66b7346dde24bd3d37ef0e0b05":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2017-01-18 14:14:17 UTC","message":"bpf: don't trigger OOM killer under pressure with map alloc\n\nThis patch adds two helpers, bpf_map_area_alloc() and bpf_map_area_free(),\nthat are to be used for map allocations. Using kmalloc() for very large\nallocations can cause excessive work within the page allocator, so i) fall\nback earlier to vmalloc() when the attempt is considered costly anyway,\nand even more importantly ii) don't trigger OOM killer with any of the\nallocators.\n\nSince this is based on a user space request, for example, when creating\nmaps with element pre-allocation, we really want such requests to fail\ninstead of killing other user space processes.\n\nAlso, don't spam the kernel log with warnings should any of the allocations\nfail under pressure. Given that, we can make backend selection in\nbpf_map_area_alloc() generic, and convert all maps over to use this API\nfor spots with potentially large allocation requests.\n\nNote, replacing the one kmalloc_array() is fine as overflow checks happen\nearlier in htab_map_alloc(),","insertions":36,"deletions":52,"filepaths":{"include/linux/bpf.h":{"insertions":0,"deletions":2},"kernel/bpf/arraymap.c":{"insertions":11,"deletions":7},"kernel/bpf/hashtab.c":{"insertions":13,"deletions":9},"kernel/bpf/stackmap.c":{"insertions":12,"deletions":8},"kernel/bpf/syscall.c":{"insertions":0,"deletions":26}}},"bd475643d74e8ed78bfd36d941053b0e45974e8e":{"author":"Jakub Kicinski","email":"jakub.kicinski@netronome.com","date":"2018-01-12 04:29:06 UTC","message":"bpf: add helper for copying attrs to struct bpf_map\n\nAll map types reimplement the field-by-field copy of union bpf_attr\nmembers into struct bpf_map.  Add a helper to perform this operation.\n\nSigned-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>\nReviewed-by: Quentin Monnet <quentin.monnet@netronome.com>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>","insertions":40,"deletions":17,"filepaths":{"include/linux/bpf.h":{"insertions":0,"deletions":1},"kernel/bpf/cpumap.c":{"insertions":7,"deletions":1},"kernel/bpf/devmap.c":{"insertions":7,"deletions":1},"kernel/bpf/hashtab.c":{"insertions":8,"deletions":1},"kernel/bpf/lpm_trie.c":{"insertions":6,"deletions":1},"kernel/bpf/sockmap.c":{"insertions":7,"deletions":1},"kernel/bpf/stackmap.c":{"insertions":5,"deletions":1},"kernel/bpf/syscall.c":{"insertions":0,"deletions":10}}},"db20fd2b01087bdfbe30bce314a198eefedcc42e":{"author":"Alexei Starovoitov","email":"ast@plumgrid.com","date":"2014-09-26 07:16:59 UTC","message":"bpf: add lookup/update/delete/iterate methods to BPF maps\n\n'maps' is a generic storage of different types for sharing data between kernel\nand userspace.\n\nThe maps are accessed from user space via BPF syscall, which has commands:\n\n- create a map with given type and attributes\n  fd = bpf(BPF_MAP_CREATE, union bpf_attr *attr, u32 size)\n  returns fd or negative error\n\n- lookup key in a given map referenced by fd\n  err = bpf(BPF_MAP_LOOKUP_ELEM, union bpf_attr *attr, u32 size)\n  using attr->map_fd, attr->key, attr->value\n  returns zero and stores found elem into value or negative error\n\n- create or update key/value pair in a given map\n  err = bpf(BPF_MAP_UPDATE_ELEM, union bpf_attr *attr, u32 size)\n  using attr->map_fd, attr->key, attr->value\n  returns zero or negative error\n\n- find and delete element by key in a given map\n  err = bpf(BPF_MAP_DELETE_ELEM, union bpf_attr *attr, u32 size)\n  using attr->map_fd, attr->key\n\n- iterate map elements (based on input key return next_key)\n  err = bpf(B","insertions":0,"deletions":281,"filepaths":{"include/linux/bpf.h":{"insertions":0,"deletions":8},"include/uapi/linux/bpf.h":{"insertions":0,"deletions":38},"kernel/bpf/syscall.c":{"insertions":0,"deletions":235}}},"bd513cd08f10cbe28856f99ae951e86e86803861":{"author":"Mauricio Vasquez B","email":"mauricio.vasquez@polito.it","date":"2018-10-18 13:16:30 UTC","message":"bpf: add MAP_LOOKUP_AND_DELETE_ELEM syscall\n\nThe previous patch implemented a bpf queue/stack maps that\nprovided the peek/pop/push functions.  There is not a direct\nrelationship between those functions and the current maps\nsyscalls, hence a new MAP_LOOKUP_AND_DELETE_ELEM syscall is added,\nthis is mapped to the pop operation in the queue/stack maps\nand it is still to implement in other kind of maps.\n\nSigned-off-by: Mauricio Vasquez B <mauricio.vasquez@polito.it>\nAcked-by: Song Liu <songliubraving@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>","insertions":0,"deletions":67,"filepaths":{"include/uapi/linux/bpf.h":{"insertions":0,"deletions":1},"kernel/bpf/syscall.c":{"insertions":0,"deletions":66}}},"6e71b04a82248ccf13a94b85cbc674a9fefe53f5":{"author":"Chenbo Feng","email":"fengc@google.com","date":"2017-10-18 20:00:22 UTC","message":"bpf: Add file mode configuration into bpf maps\n\nIntroduce the map read/write flags to the eBPF syscalls that returns the\nmap fd. The flags is used to set up the file mode when construct a new\nfile descriptor for bpf maps. To not break the backward capability, the\nf_flags is set to O_RDWR if the flag passed by syscall is 0. Otherwise\nit should be O_RDONLY or O_WRONLY. When the userspace want to modify or\nread the map content, it will check the file mode to see if it is\nallowed to make the change.\n\nSigned-off-by: Chenbo Feng <fengc@google.com>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nAcked-by: Daniel Borkmann <daniel@iogearbox.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":26,"deletions":122,"filepaths":{"include/linux/bpf.h":{"insertions":3,"deletions":5},"include/uapi/linux/bpf.h":{"insertions":0,"deletions":6},"kernel/bpf/arraymap.c":{"insertions":1,"deletions":5},"kernel/bpf/devmap.c":{"insertions":1,"deletions":4},"kernel/bpf/hashtab.c":{"insertions":2,"deletions":3},"kernel/bpf/inode.c":{"insertions":5,"deletions":10},"kernel/bpf/lpm_trie.c":{"insertions":1,"deletions":2},"kernel/bpf/sockmap.c":{"insertions":1,"deletions":4},"kernel/bpf/stackmap.c":{"insertions":1,"deletions":4},"kernel/bpf/syscall.c":{"insertions":10,"deletions":78},"net/netfilter/xt_bpf.c":{"insertions":1,"deletions":1}}},"99c55f7d47c0dc6fc64729f37bf435abf43f4c60":{"author":"Alexei Starovoitov","email":"ast@plumgrid.com","date":"2014-09-26 07:16:57 UTC","message":"bpf: introduce BPF syscall and maps\n\nBPF syscall is a multiplexor for a range of different operations on eBPF.\nThis patch introduces syscall with single command to create a map.\nNext patch adds commands to access maps.\n\n'maps' is a generic storage of different types for sharing data between kernel\nand userspace.\n\nUserspace example:\n/* this syscall wrapper creates a map with given type and attributes\n * and returns map_fd on success.\n * use close(map_fd) to delete the map\n */\nint bpf_create_map(enum bpf_map_type map_type, int key_size,\n                   int value_size, int max_entries)\n{\n    union bpf_attr attr = {\n        .map_type = map_type,\n        .key_size = key_size,\n        .value_size = value_size,\n        .max_entries = max_entries\n    };\n\n    return bpf(BPF_MAP_CREATE, &attr, sizeof(attr));\n}\n\n'union bpf_attr' is backwards compatible with future extensions.\n\nMore details in Documentation/networking/filter.txt and in manpage\n\nSigned-off-by: Alexei Starovoitov <ast@plumgrid.com","insertions":1,"deletions":273,"filepaths":{"Documentation/networking/filter.txt":{"insertions":0,"deletions":39},"include/linux/bpf.h":{"insertions":0,"deletions":41},"include/uapi/linux/bpf.h":{"insertions":0,"deletions":23},"kernel/bpf/Makefile":{"insertions":1,"deletions":1},"kernel/bpf/syscall.c":{"insertions":0,"deletions":169}}},"44779a4b85abd1d1dab9e5b90bd5e6adcfc8143a":{"author":"Stanislav Fomichev","email":"sdf@google.com","date":"2021-08-18 23:52:16 UTC","message":"bpf: Use kvmalloc for map keys in syscalls\n\nSame as previous patch but for the keys. memdup_bpfptr is renamed\nto kvmemdup_bpfptr (and converted to kvmalloc).\n\nSigned-off-by: Stanislav Fomichev <sdf@google.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Song Liu <songliubraving@fb.com>\nLink: https://lore.kernel.org/bpf/20210818235216.1159202-2-sdf@google.com","insertions":19,"deletions":27,"filepaths":{"include/linux/bpfptr.h":{"insertions":2,"deletions":10},"kernel/bpf/syscall.c":{"insertions":17,"deletions":17}}},"15c14a3dca421f086c187155afba3222b879472d":{"author":"Brian Vazquez","email":"brianvv@google.com","date":"2020-01-15 18:43:00 UTC","message":"bpf: Add bpf_map_{value_size, update_value, map_copy_value} functions\n\nThis commit moves reusable code from map_lookup_elem and map_update_elem\nto avoid code duplication in kernel/bpf/syscall.c.\n\nSigned-off-by: Brian Vazquez <brianvv@google.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nAcked-by: John Fastabend <john.fastabend@gmail.com>\nAcked-by: Yonghong Song <yhs@fb.com>\nLink: https://lore.kernel.org/bpf/20200115184308.162644-2-brianvv@google.com","insertions":128,"deletions":152,"filepaths":{"kernel/bpf/syscall.c":{"insertions":128,"deletions":152}}},"1f6cb19be2e231fe092f40decb71f066eba090d7":{"author":"Andrii Nakryiko","email":"andriin@fb.com","date":"2020-04-10 20:26:12 UTC","message":"bpf: Prevent re-mmap()'ing BPF map as writable for initially r/o mapping\n\nVM_MAYWRITE flag during initial memory mapping determines if already mmap()'ed\npages can be later remapped as writable ones through mprotect() call. To\nprevent user application to rewrite contents of memory-mapped as read-only and\nsubsequently frozen BPF map, remove VM_MAYWRITE flag completely on initially\nread-only mapping.\n\nAlternatively, we could treat any memory-mapping on unfrozen map as writable\nand bump writecnt instead. But there is little legitimate reason to map\nBPF map as read-only and then re-mmap() it as writable through mprotect(),\ninstead of just mmap()'ing it as read/write from the very beginning.\n\nAlso, at the suggestion of Jann Horn, drop unnecessary refcounting in mmap\noperations. We can just rely on VMA holding reference to BPF map's file\nproperly.\n\nFixes: fc9702273e2e (\"bpf: Add mmap() support for BPF_MAP_TYPE_ARRAY\")\nReported-by: Jann Horn <jannh@google.com>\nSigned-off-by: Andrii Nakryiko <an","insertions":9,"deletions":7,"filepaths":{"kernel/bpf/syscall.c":{"insertions":9,"deletions":7}}},"c210129760a010b555372ef74f4e1a46d4eb8a22":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2015-10-29 13:58:07 UTC","message":"bpf: align and clean bpf_{map,prog}_get helpers\n\nAdd a bpf_map_get() function that we're going to use later on and\nalign/clean the remaining helpers a bit so that we have them a bit\nmore consistent:\n\n  - __bpf_map_get() and __bpf_prog_get() that both work on the fd\n    struct, check whether the descriptor is eBPF and return the\n    pointer to the map/prog stored in the private data.\n\n    Also, we can return f.file->private_data directly, the function\n    signature is enough of a documentation already.\n\n  - bpf_map_get() and bpf_prog_get() that both work on u32 user fd,\n    call their respective __bpf_map_get()/__bpf_prog_get() variants,\n    and take a reference.\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":21,"deletions":25,"filepaths":{"include/linux/bpf.h":{"insertions":1,"deletions":1},"kernel/bpf/syscall.c":{"insertions":18,"deletions":23},"kernel/bpf/verifier.c":{"insertions":2,"deletions":1}}},"87df15de441bd4add7876ef584da8cabdd9a042a":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2019-04-09 21:20:06 UTC","message":"bpf: add syscall side map freeze support\n\nThis patch adds a new BPF_MAP_FREEZE command which allows to\n\"freeze\" the map globally as read-only / immutable from syscall\nside.\n\nMap permission handling has been refactored into map_get_sys_perms()\nand drops FMODE_CAN_WRITE in case of locked map. Main use case is\nto allow for setting up .rodata sections from the BPF ELF which\nare loaded into the kernel, meaning BPF loader first allocates\nmap, sets up map value by copying .rodata section into it and once\ncomplete, it calls BPF_MAP_FREEZE on the map fd to prevent further\nmodifications.\n\nRight now BPF_MAP_FREEZE only takes map fd as argument while remaining\nbpf_attr members are required to be zero. I didn't add write-only\nlocking here as counterpart since I don't have a concrete use-case\nfor it on my side, and I think it makes probably more sense to wait\nonce there is actually one. In that case bpf_attr can be extended\nas usual with a flag field and/or others where flag 0 means that\nwe lock the ","insertions":13,"deletions":57,"filepaths":{"include/linux/bpf.h":{"insertions":1,"deletions":2},"include/uapi/linux/bpf.h":{"insertions":0,"deletions":1},"kernel/bpf/syscall.c":{"insertions":12,"deletions":54}}},"1ea0f9120c8ce105ca181b070561df5cbd6bc049":{"author":"Anton Protopopov","email":"a.s.protopopov@gmail.com","date":"2020-05-27 18:56:59 UTC","message":"bpf: Fix map permissions check\n\nThe map_lookup_and_delete_elem() function should check for both FMODE_CAN_WRITE\nand FMODE_CAN_READ permissions because it returns a map element to user space.\n\nFixes: bd513cd08f10 (\"bpf: add MAP_LOOKUP_AND_DELETE_ELEM syscall\")\nSigned-off-by: Anton Protopopov <a.s.protopopov@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20200527185700.14658-5-a.s.protopopov@gmail.com\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>","insertions":1,"deletions":2,"filepaths":{"kernel/bpf/syscall.c":{"insertions":1,"deletions":2}}},"80ee81e0403c48f4eb342f7c8d40477c89b8836a":{"author":"Roman Gushchin","email":"guro@fb.com","date":"2020-12-01 21:58:58 UTC","message":"bpf: Eliminate rlimit-based memory accounting infra for bpf maps\n\nRemove rlimit-based accounting infrastructure code, which is not used\nanymore.\n\nTo provide a backward compatibility, use an approximation of the\nbpf map memory footprint as a \"memlock\" value, available to a user\nvia map info. The approximation is based on the maximal number of\nelements and key and value sizes.\n\nSigned-off-by: Roman Gushchin <guro@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nAcked-by: Song Liu <songliubraving@fb.com>\nLink: https://lore.kernel.org/bpf/20201201215900.3569844-33-guro@fb.com","insertions":100,"deletions":17,"filepaths":{"include/linux/bpf.h":{"insertions":12,"deletions":0},"kernel/bpf/syscall.c":{"insertions":80,"deletions":16},"tools/testing/selftests/bpf/progs/bpf_iter_bpf_map.c":{"insertions":1,"deletions":1},"tools/testing/selftests/bpf/progs/map_ptr_kern.c":{"insertions":7,"deletions":0}}},"a38845729ea3985db5d2544ec3ef3dc8f6313a27":{"author":"Jakub Kicinski","email":"jakub.kicinski@netronome.com","date":"2018-01-12 04:29:09 UTC","message":"bpf: offload: add map offload infrastructure\n\nBPF map offload follow similar path to program offload.  At creation\ntime users may specify ifindex of the device on which they want to\ncreate the map.  Map will be validated by the kernel's\n.map_alloc_check callback and device driver will be called for the\nactual allocation.  Map will have an empty set of operations\nassociated with it (save for alloc and free callbacks).  The real\ndevice callbacks are kept in map->offload->dev_ops because they\nhave slightly different signatures.  Map operations are called in\nprocess context so the driver may communicate with HW freely,\nmsleep(), wait() etc.\n\nMap alloc and free callbacks are muxed via existing .ndo_bpf, and\nare always called with rtnl lock held.  Maps and programs are\nguaranteed to be destroyed before .ndo_uninit (i.e. before\nunregister_netdev() returns).  Map callbacks are invoked with\nbpf_devs_lock *read* locked, drivers must take care of exclusive\nlocking if necessary.\n\nAll offload-specif","insertions":13,"deletions":293,"filepaths":{"include/linux/bpf.h":{"insertions":0,"deletions":59},"include/linux/netdevice.h":{"insertions":0,"deletions":6},"include/uapi/linux/bpf.h":{"insertions":0,"deletions":1},"kernel/bpf/offload.c":{"insertions":7,"deletions":181},"kernel/bpf/syscall.c":{"insertions":6,"deletions":38},"kernel/bpf/verifier.c":{"insertions":0,"deletions":7},"tools/include/uapi/linux/bpf.h":{"insertions":0,"deletions":1}}},"a23740ec43ba022dbfd139d0fe3eff193216272b":{"author":"Andrii Nakryiko","email":"andriin@fb.com","date":"2019-10-09 20:14:57 UTC","message":"bpf: Track contents of read-only maps as scalars\n\nMaps that are read-only both from BPF program side and user space side\nhave their contents constant, so verifier can track referenced values\nprecisely and use that knowledge for dead code elimination, branch\npruning, etc. This patch teaches BPF verifier how to do this.\n\nSigned-off-by: Andrii Nakryiko <andriin@fb.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20191009201458.2679171-2-andriin@fb.com","insertions":55,"deletions":2,"filepaths":{"kernel/bpf/verifier.c":{"insertions":55,"deletions":2}}},"13e4ad2ce8df6e058ef482a31fdd81c725b0f7ea":{"author":"Nadav Amit","email":"namit@vmware.com","date":"2021-11-21 20:40:08 UTC","message":"hugetlbfs: flush before unlock on move_hugetlb_page_tables()\n\nWe must flush the TLB before releasing i_mmap_rwsem to avoid the\npotential reuse of an unshared PMDs page.  This is not true in the case\nof move_hugetlb_page_tables().  The last reference on the page table can\ntherefore be dropped before the TLB flush took place.\n\nPrevent it by reordering the operations and flushing the TLB before\nreleasing i_mmap_rwsem.\n\nFixes: 550a7d60bd5e (\"mm, hugepages: add mremap() support for hugepage backed vma\")\nSigned-off-by: Nadav Amit <namit@vmware.com>\nReviewed-by: Mike Kravetz <mike.kravetz@oracle.com>\nCc: Mina Almasry <almasrymina@google.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":1,"deletions":1,"filepaths":{"mm/hugetlb.c":{"insertions":1,"deletions":1}}},"a4a118f2eead1d6c49e00765de89878288d4b890":{"author":"Nadav Amit","email":"namit@vmware.com","date":"2021-11-21 20:40:07 UTC","message":"hugetlbfs: flush TLBs correctly after huge_pmd_unshare\n\nWhen __unmap_hugepage_range() calls to huge_pmd_unshare() succeed, a TLB\nflush is missing.  This TLB flush must be performed before releasing the\ni_mmap_rwsem, in order to prevent an unshared PMDs page from being\nreleased and reused before the TLB flush took place.\n\nArguably, a comprehensive solution would use mmu_gather interface to\nbatch the TLB flushes and the PMDs page release, however it is not an\neasy solution: (1) try_to_unmap_one() and try_to_migrate_one() also call\nhuge_pmd_unshare() and they cannot use the mmu_gather interface; and (2)\ndeferring the release of the page reference for the PMDs page until\nafter i_mmap_rwsem is dropeed can confuse huge_pmd_unshare() into\nthinking PMDs are shared when they are not.\n\nFix __unmap_hugepage_range() by adding the missing TLB flush, and\nforcing a flush when unshare is successful.\n\nFixes: 24669e58477e (\"hugetlb: use mmu_gather instead of a temporary linked list for accumulating pages","insertions":19,"deletions":4,"filepaths":{"mm/hugetlb.c":{"insertions":19,"deletions":4}}},"550a7d60bd5e35a56942dba6d8a26752beb26c9f":{"author":"Mina Almasry","email":"almasrymina@google.com","date":"2021-11-05 20:41:40 UTC","message":"mm, hugepages: add mremap() support for hugepage backed vma\n\nSupport mremap() for hugepage backed vma segment by simply repositioning\npage table entries.  The page table entries are repositioned to the new\nvirtual address on mremap().\n\nHugetlb mremap() support is of course generic; my motivating use case is\na library (hugepage_text), which reloads the ELF text of executables in\nhugepages.  This significantly increases the execution performance of\nsaid executables.\n\nRestrict the mremap operation on hugepages to up to the size of the\noriginal mapping as the underlying hugetlb reservation is not yet\ncapable of handling remapping to a larger size.\n\nDuring the mremap() operation we detect pmd_share'd mappings and we\nunshare those during the mremap().  On access and fault the sharing is\nestablished again.\n\nLink: https://lkml.kernel.org/r/20211013195825.3058275-1-almasrymina@google.com\nSigned-off-by: Mina Almasry <almasrymina@google.com>\nReviewed-by: Mike Kravetz <mike.kravetz@oracle.com>\nCc: ","insertions":157,"deletions":9,"filepaths":{"include/linux/hugetlb.h":{"insertions":19,"deletions":0},"mm/hugetlb.c":{"insertions":105,"deletions":6},"mm/mremap.c":{"insertions":33,"deletions":3}}},"a5516438959d90b071ff0a484ce4f3f523dc3152":{"author":"Andi Kleen","email":"ak@suse.de","date":"2008-07-24 04:27:41 UTC","message":"hugetlb: modular state for hugetlb page size\n\nThe goal of this patchset is to support multiple hugetlb page sizes.  This\nis achieved by introducing a new struct hstate structure, which\nencapsulates the important hugetlb state and constants (eg.  huge page\nsize, number of huge pages currently allocated, etc).\n\nThe hstate structure is then passed around the code which requires these\nfields, they will do the right thing regardless of the exact hstate they\nare operating on.\n\nThis patch adds the hstate structure, with a single global instance of it\n(default_hstate), and does the basic work of converting hugetlb to use the\nhstate.\n\nFuture patches will add more hstate structures to allow for different\nhugetlbfs mounts to have different page sizes.\n\n[akpm@linux-foundation.org: coding-style fixes]\nAcked-by: Adam Litke <agl@us.ibm.com>\nAcked-by: Nishanth Aravamudan <nacc@us.ibm.com>\nSigned-off-by: Andi Kleen <ak@suse.de>\nSigned-off-by: Nick Piggin <npiggin@suse.de>\nSigned-off-by: Andrew Morton <a","insertions":356,"deletions":218,"filepaths":{"arch/ia64/mm/hugetlbpage.c":{"insertions":4,"deletions":3},"arch/powerpc/mm/hugetlbpage.c":{"insertions":2,"deletions":1},"arch/s390/mm/hugetlbpage.c":{"insertions":2,"deletions":1},"arch/sh/mm/hugetlbpage.c":{"insertions":2,"deletions":1},"arch/sparc64/mm/hugetlbpage.c":{"insertions":3,"deletions":2},"arch/x86/mm/hugetlbpage.c":{"insertions":3,"deletions":2},"fs/hugetlbfs/inode.c":{"insertions":30,"deletions":22},"include/asm-ia64/hugetlb.h":{"insertions":2,"deletions":1},"include/asm-powerpc/hugetlb.h":{"insertions":2,"deletions":1},"include/asm-s390/hugetlb.h":{"insertions":2,"deletions":1},"include/asm-sh/hugetlb.h":{"insertions":2,"deletions":1},"include/asm-sparc/hugetlb.h":{"insertions":2,"deletions":1},"include/asm-x86/hugetlb.h":{"insertions":5,"deletions":3},"include/linux/hugetlb.h":{"insertions":83,"deletions":5},"ipc/shm.c":{"insertions":2,"deletions":1},"mm/hugetlb.c":{"insertions":201,"deletions":167},"mm/memory.c":{"insertions":1,"deletions":1},"mm/mempolicy.c":{"insertions":6,"deletions":3},"mm/mmap.c":{"insertions":2,"deletions":1}}},"dff11abe280b47c21b804a8ace318e0638bb9a49":{"author":"Mike Kravetz","email":"mike.kravetz@oracle.com","date":"2018-10-05 22:51:33 UTC","message":"hugetlb: take PMD sharing into account when flushing tlb/caches\n\nWhen fixing an issue with PMD sharing and migration, it was discovered via\ncode inspection that other callers of huge_pmd_unshare potentially have an\nissue with cache and tlb flushing.\n\nUse the routine adjust_range_if_pmd_sharing_possible() to calculate worst\ncase ranges for mmu notifiers.  Ensure that this range is flushed if\nhuge_pmd_unshare succeeds and unmaps a PUD_SUZE area.\n\nLink: http://lkml.kernel.org/r/20180823205917.16297-3-mike.kravetz@oracle.com\nSigned-off-by: Mike Kravetz <mike.kravetz@oracle.com>\nAcked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nReviewed-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: Davidlohr Bueso <dave@stgolabs.net>\nCc: Michal Hocko <mhocko@kernel.org>\nCc: Jerome Glisse <jglisse@redhat.com>\nCc: Mike Kravetz <mike.kravetz@oracle.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linux","insertions":44,"deletions":9,"filepaths":{"mm/hugetlb.c":{"insertions":44,"deletions":9}}},"ac46d4f3c43241ffa23d5bf36153a0830c0e02cc":{"author":"Jérôme Glisse","email":"jglisse@redhat.com","date":"2018-12-28 08:38:09 UTC","message":"mm/mmu_notifier: use structure for invalidate_range_start/end calls v2\n\nTo avoid having to change many call sites everytime we want to add a\nparameter use a structure to group all parameters for the mmu_notifier\ninvalidate_range_start/end cakks.  No functional changes with this patch.\n\n[akpm@linux-foundation.org: coding style fixes]\nLink: http://lkml.kernel.org/r/20181205053628.3210-3-jglisse@redhat.com\nSigned-off-by: Jérôme Glisse <jglisse@redhat.com>\nAcked-by: Christian König <christian.koenig@amd.com>\nAcked-by: Jan Kara <jack@suse.cz>\nCc: Matthew Wilcox <mawilcox@microsoft.com>\nCc: Ross Zwisler <zwisler@kernel.org>\nCc: Dan Williams <dan.j.williams@intel.com>\nCc: Paolo Bonzini <pbonzini@redhat.com>\nCc: Radim Krcmar <rkrcmar@redhat.com>\nCc: Michal Hocko <mhocko@kernel.org>\nCc: Felix Kuehling <felix.kuehling@amd.com>\nCc: Ralph Campbell <rcampbell@nvidia.com>\nCc: John Hubbard <jhubbard@nvidia.com>\nFrom: Jérôme Glisse <jglisse@redhat.com>\nSubject: mm/mmu_notifier: use structure for invali","insertions":262,"deletions":250,"filepaths":{"fs/dax.c":{"insertions":5,"deletions":3},"fs/proc/task_mmu.c":{"insertions":5,"deletions":2},"include/linux/mm.h":{"insertions":4,"deletions":2},"include/linux/mmu_notifier.h":{"insertions":58,"deletions":29},"kernel/events/uprobes.c":{"insertions":5,"deletions":5},"mm/huge_memory.c":{"insertions":25,"deletions":29},"mm/hugetlb.c":{"insertions":25,"deletions":27},"mm/khugepaged.c":{"insertions":4,"deletions":6},"mm/ksm.c":{"insertions":9,"deletions":12},"mm/madvise.c":{"insertions":11,"deletions":10},"mm/memory.c":{"insertions":50,"deletions":49},"mm/migrate.c":{"insertions":13,"deletions":15},"mm/mmu_notifier.c":{"insertions":9,"deletions":28},"mm/mprotect.c":{"insertions":8,"deletions":7},"mm/mremap.c":{"insertions":4,"deletions":6},"mm/oom_kill.c":{"insertions":9,"deletions":8},"mm/rmap.c":{"insertions":18,"deletions":12}}},"63551ae0feaaa23807ebea60de1901564bbef32e":{"author":"David Gibson","email":"david@gibson.dropbear.id.au","date":"2005-06-22 00:14:44 UTC","message":"[PATCH] Hugepage consolidation\n\nA lot of the code in arch/*/mm/hugetlbpage.c is quite similar.  This patch\nattempts to consolidate a lot of the code across the arch's, putting the\ncombined version in mm/hugetlb.c.  There are a couple of uglyish hacks in\norder to covert all the hugepage archs, but the result is a very large\nreduction in the total amount of code.  It also means things like hugepage\nlazy allocation could be implemented in one place, instead of six.\n\nTested, at least a little, on ppc64, i386 and x86_64.\n\nNotes:\n\t- this patch changes the meaning of set_huge_pte() to be more\n\t  analagous to set_pte()\n\t- does SH4 need s special huge_ptep_get_and_clear()??\n\nAcked-by: William Lee Irwin <wli@holomorphy.com>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>","insertions":300,"deletions":850,"filepaths":{"arch/i386/mm/hugetlbpage.c":{"insertions":8,"deletions":162},"arch/ia64/mm/hugetlbpage.c":{"insertions":2,"deletions":156},"arch/ppc64/mm/hugetlbpage.c":{"insertions":2,"deletions":178},"arch/sh/mm/hugetlbpage.c":{"insertions":24,"deletions":172},"arch/sh64/mm/hugetlbpage.c":{"insertions":16,"deletions":2},"arch/sparc64/mm/hugetlbpage.c":{"insertions":24,"deletions":171},"include/asm-i386/page.h":{"insertions":1,"deletions":0},"include/asm-i386/pgtable.h":{"insertions":1,"deletions":1},"include/asm-ia64/pgtable.h":{"insertions":1,"deletions":0},"include/asm-sh/page.h":{"insertions":1,"deletions":0},"include/asm-sh/pgtable.h":{"insertions":1,"deletions":0},"include/asm-sh64/page.h":{"insertions":1,"deletions":0},"include/asm-sh64/pgtable.h":{"insertions":2,"deletions":0},"include/asm-sparc64/page.h":{"insertions":2,"deletions":0},"include/asm-sparc64/pgtable.h":{"insertions":1,"deletions":0},"include/asm-x86_64/page.h":{"insertions":1,"deletions":0},"include/asm-x86_64/pgtable.h":{"insertions":2,"deletions":1},"include/linux/hugetlb.h":{"insertions":34,"deletions":6},"mm/hugetlb.c":{"insertions":176,"deletions":1}}},"fe1668ae5bf0145014c71797febd9ad5670d5d05":{"author":"Chen, Kenneth W","email":"kenneth.w.chen@intel.com","date":"2006-10-04 09:15:24 UTC","message":"[PATCH] enforce proper tlb flush in unmap_hugepage_range\n\nSpotted by Hugh that hugetlb page is free'ed back to global pool before\nperforming any TLB flush in unmap_hugepage_range().  This potentially allow\nthreads to abuse free-alloc race condition.\n\nThe generic tlb gather code is unsuitable to use by hugetlb, I just open\ncoded a page gathering list and delayed put_page until tlb flush is\nperformed.\n\nCc: Hugh Dickins <hugh@veritas.com>\nSigned-off-by: Ken Chen <kenneth.w.chen@intel.com>\nAcked-by: William Irwin <wli@holomorphy.com>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>","insertions":7,"deletions":1,"filepaths":{"mm/hugetlb.c":{"insertions":7,"deletions":1}}},"24669e58477e2752c1fbca9c1c988e9dd0d79d15":{"author":"Aneesh Kumar K.V","email":"aneesh.kumar@linux.vnet.ibm.com","date":"2012-07-31 23:42:03 UTC","message":"hugetlb: use mmu_gather instead of a temporary linked list for accumulating pages\n\nUse a mmu_gather instead of a temporary linked list for accumulating pages\nwhen we unmap a hugepage range\n\nSigned-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>\nReviewed-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>\nCc: David Rientjes <rientjes@google.com>\nCc: Hillf Danton <dhillf@gmail.com>\nCc: Michal Hocko <mhocko@suse.cz>\nCc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>","insertions":59,"deletions":33,"filepaths":{"fs/hugetlbfs/inode.c":{"insertions":2,"deletions":2},"include/linux/hugetlb.h":{"insertions":17,"deletions":5},"mm/hugetlb.c":{"insertions":35,"deletions":24},"mm/memory.c":{"insertions":5,"deletions":2}}},"d833352a4338dc31295ed832a30c9ccff5c7a183":{"author":"Mel Gorman","email":"mgorman@suse.de","date":"2012-07-31 23:46:20 UTC","message":"mm: hugetlbfs: close race during teardown of hugetlbfs shared page tables\n\nIf a process creates a large hugetlbfs mapping that is eligible for page\ntable sharing and forks heavily with children some of whom fault and\nothers which destroy the mapping then it is possible for page tables to\nget corrupted.  Some teardowns of the mapping encounter a \"bad pmd\" and\noutput a message to the kernel log.  The final teardown will trigger a\nBUG_ON in mm/filemap.c.\n\nThis was reproduced in 3.4 but is known to have existed for a long time\nand goes back at least as far as 2.6.37.  It was probably was introduced\nin 2.6.20 by [39dde65c: shared page table for hugetlb page].  The messages\nlook like this;\n\n[  ..........] Lots of bad pmd messages followed by this\n[  127.164256] mm/memory.c:391: bad pmd ffff880412e04fe8(80000003de4000e7).\n[  127.164257] mm/memory.c:391: bad pmd ffff880412e04ff0(80000003de6000e7).\n[  127.164258] mm/memory.c:391: bad pmd ffff880412e04ff8(80000003de0000e7).\n[  127.186778] -------","insertions":38,"deletions":3,"filepaths":{"include/linux/hugetlb.h":{"insertions":11,"deletions":0},"mm/hugetlb.c":{"insertions":26,"deletions":2},"mm/memory.c":{"insertions":1,"deletions":1}}},"f7d8a19f9a056a05c5c509fa65af472a322abfee":{"author":"Sean Christopherson","email":"seanjc@google.com","date":"2021-10-13 00:35:53 UTC","message":"Revert \"KVM: x86: Open code necessary bits of kvm_lapic_set_base() at vCPU RESET\"\n\nRevert a change to open code bits of kvm_lapic_set_base() when emulating\nAPIC RESET to fix an apic_hw_disabled underflow bug due to arch.apic_base\nand apic_hw_disabled being unsyncrhonized when the APIC is created.  If\nkvm_arch_vcpu_create() fails after creating the APIC, kvm_free_lapic()\nwill see the initialized-to-zero vcpu->arch.apic_base and decrement\napic_hw_disabled without KVM ever having incremented apic_hw_disabled.\n\nUsing kvm_lapic_set_base() in kvm_lapic_reset() is also desirable for a\npotential future where KVM supports RESET outside of vCPU creation, in\nwhich case all the side effects of kvm_lapic_set_base() are needed, e.g.\nto handle the transition from x2APIC => xAPIC.\n\nAlternatively, KVM could temporarily increment apic_hw_disabled (and call\nkvm_lapic_set_base() at RESET), but that's a waste of cycles and would\nimpact the performance of other vCPUs and VMs.  The other subtle side\neffect is","insertions":11,"deletions":7,"filepaths":{"arch/x86/kvm/lapic.c":{"insertions":11,"deletions":7}}},"97222cc8316328965851ed28d23f6b64b4c912d2":{"author":"Eddie Dong","email":"eddie.dong@intel.com","date":"2007-09-12 07:58:04 UTC","message":"KVM: Emulate local APIC in kernel\n\nBecause lightweight exits (exits which don't involve userspace) are many\ntimes faster than heavyweight exits, it makes sense to emulate high usage\ndevices in the kernel.  The local APIC is one such device, especially for\nWindows and for SMP, so we add an APIC model to kvm.\n\nIt also allows in-kernel host-side drivers to inject interrupts without\ngoing through userspace.\n\n[compile fix on i386 from Jindrich Makovicka]\n\nSigned-off-by: Yaozu (Eddie) Dong <Eddie.Dong@intel.com>\nSigned-off-by: Qing He <qing.he@intel.com>\nSigned-off-by: Avi Kivity <avi@qumranet.com>","insertions":1067,"deletions":33,"filepaths":{"drivers/kvm/Makefile":{"insertions":1,"deletions":1},"drivers/kvm/irq.c":{"insertions":36,"deletions":17},"drivers/kvm/irq.h":{"insertions":40,"deletions":1},"drivers/kvm/kvm.h":{"insertions":1,"deletions":2},"drivers/kvm/kvm_main.c":{"insertions":42,"deletions":10},"drivers/kvm/lapic.c":{"insertions":933,"deletions":0},"drivers/kvm/svm.c":{"insertions":6,"deletions":0},"drivers/kvm/vmx.c":{"insertions":6,"deletions":0},"include/linux/kvm.h":{"insertions":2,"deletions":2}}},"4547700a4d190ac419abffa317069aaccf1ac118":{"author":"Sean Christopherson","email":"seanjc@google.com","date":"2021-07-13 16:32:56 UTC","message":"KVM: x86: Consolidate APIC base RESET initialization code\n\nConsolidate the APIC base RESET logic, which is currently spread out\nacross both x86 and vendor code.  For an in-kernel APIC, the vendor code\nis redundant.  But for a userspace APIC, KVM relies on the vendor code\nto initialize vcpu->arch.apic_base.  Hoist the vcpu->arch.apic_base\ninitialization above the !apic check so that it applies to both flavors\nof APIC emulation, and delete the vendor code.\n\nReviewed-by: Reiji Watanabe <reijiw@google.com>\nSigned-off-by: Sean Christopherson <seanjc@google.com>\nMessage-Id: <20210713163324.627647-19-seanjc@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":7,"deletions":18,"filepaths":{"arch/x86/kvm/lapic.c":{"insertions":7,"deletions":5},"arch/x86/kvm/svm/svm.c":{"insertions":0,"deletions":6},"arch/x86/kvm/vmx/vmx.c":{"insertions":0,"deletions":7}}},"4d8e772bf8e3fcf55fe17e84ce68c20e03041efc":{"author":"Radim Krčmář","email":"rkrcmar@redhat.com","date":"2016-07-12 20:09:25 UTC","message":"KVM: x86: reset lapic base in kvm_lapic_reset\n\nLAPIC is reset in xAPIC mode and the surrounding code expects that.\nKVM never resets after initialization.  This patch is just for sanity.\n\nReviewed-by: Paolo Bonzini <pbonzini@redhat.com>\nSigned-off-by: Radim Krčmář <rkrcmar@redhat.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":4,"deletions":4,"filepaths":{"arch/x86/kvm/lapic.c":{"insertions":4,"deletions":4}}},"421221234ada41b4a9f0beeb08e30b07388bd4bd":{"author":"Sean Christopherson","email":"seanjc@google.com","date":"2021-07-13 16:32:55 UTC","message":"KVM: x86: Open code necessary bits of kvm_lapic_set_base() at vCPU RESET\n\nStuff vcpu->arch.apic_base and apic->base_address directly during APIC\nreset, as opposed to bouncing through kvm_set_apic_base() while fudging\nthe ENABLE bit during creation to avoid the other, unwanted side effects.\n\nThis is a step towards consolidating the APIC RESET logic across x86,\nVMX, and SVM.\n\nSigned-off-by: Sean Christopherson <seanjc@google.com>\nMessage-Id: <20210713163324.627647-18-seanjc@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":6,"deletions":9,"filepaths":{"arch/x86/kvm/lapic.c":{"insertions":6,"deletions":9}}},"c3941d9e0ccd48920e4811f133235b3597e5310b":{"author":"Sean Christopherson","email":"sean.j.christopherson@intel.com","date":"2019-04-17 17:15:33 UTC","message":"KVM: lapic: Allow user to disable adaptive tuning of timer advancement\n\nThe introduction of adaptive tuning of lapic timer advancement did not\nallow for the scenario where userspace would want to disable adaptive\ntuning but still employ timer advancement, e.g. for testing purposes or\nto handle a use case where adaptive tuning is unable to settle on a\nsuitable time.  This is epecially pertinent now that KVM places a hard\nthreshold on the maximum advancment time.\n\nRework the timer semantics to accept signed values, with a value of '-1'\nbeing interpreted as \"use adaptive tuning with KVM's internal default\",\nand any other value being used as an explicit advancement time, e.g. a\ntime of '0' effectively disables advancement.\n\nNote, this does not completely restore the original behavior of\nlapic_timer_advance_ns.  Prior to tracking the advancement per vCPU,\nwhich is necessary to support autotuning, userspace could adjust\nlapic_timer_advance_ns for *running* vCPU.  With per-vCPU tracking, the\nm","insertions":17,"deletions":5,"filepaths":{"arch/x86/kvm/lapic.c":{"insertions":9,"deletions":2},"arch/x86/kvm/lapic.h":{"insertions":1,"deletions":1},"arch/x86/kvm/x86.c":{"insertions":7,"deletions":2}}},"d28bc9dd25ce023270d2e039e7c98d38ecbf7758":{"author":"Nadav Amit","email":"namit@cs.technion.ac.il","date":"2015-04-13 11:34:08 UTC","message":"KVM: x86: INIT and reset sequences are different\n\nx86 architecture defines differences between the reset and INIT sequences.\nINIT does not initialize the FPU (including MMX, XMM, YMM, etc.), TSC, PMU,\nMSRs (in general), MTRRs machine-check, APIC ID, APIC arbitration ID and BSP.\n\nReferences (from Intel SDM):\n\n\"If the MP protocol has completed and a BSP is chosen, subsequent INITs (either\nto a specific processor or system wide) do not cause the MP protocol to be\nrepeated.\" [8.4.2: MP Initialization Protocol Requirements and Restrictions]\n\n[Table 9-1. IA-32 Processor States Following Power-up, Reset, or INIT]\n\n\"If the processor is reset by asserting the INIT# pin, the x87 FPU state is not\nchanged.\" [9.2: X87 FPU INITIALIZATION]\n\n\"The state of the local APIC following an INIT reset is the same as it is after\na power-up or hardware reset, except that the APIC ID and arbitration ID\nregisters are not affected.\" [10.4.7.3: Local APIC State After an INIT Reset\n(\"Wait-for-SIPI\" State)]\n\nSigned-of","insertions":63,"deletions":51,"filepaths":{"arch/x86/include/asm/kvm_host.h":{"insertions":3,"deletions":3},"arch/x86/kvm/lapic.c":{"insertions":6,"deletions":5},"arch/x86/kvm/lapic.h":{"insertions":1,"deletions":1},"arch/x86/kvm/svm.c":{"insertions":14,"deletions":13},"arch/x86/kvm/vmx.c":{"insertions":29,"deletions":22},"arch/x86/kvm/x86.c":{"insertions":10,"deletions":7}}},"b7e31be385584afe7f073130e8e570d53c95f7fe":{"author":"Radim Krčmář","email":"rkrcmar@redhat.com","date":"2018-03-01 14:24:25 UTC","message":"KVM: x86: fix vcpu initialization with userspace lapic\n\nMoving the code around broke this rare configuration.\nUse this opportunity to finally call lapic reset from vcpu reset.\n\nReported-by: syzbot+fb7a33a4b6c35007a72b@syzkaller.appspotmail.com\nSuggested-by: Paolo Bonzini <pbonzini@redhat.com>\nFixes: 0b2e9904c159 (\"KVM: x86: move LAPIC initialization after VMCS creation\")\nCc: stable@vger.kernel.org\nSigned-off-by: Radim Krčmář <rkrcmar@redhat.com>","insertions":6,"deletions":7,"filepaths":{"arch/x86/kvm/lapic.c":{"insertions":4,"deletions":6},"arch/x86/kvm/x86.c":{"insertions":2,"deletions":1}}},"d0f5a86a34072c46b7fe1b8f8768e666d9d6f87f":{"author":"Wanpeng Li","email":"wanpengli@tencent.com","date":"2019-09-17 08:16:26 UTC","message":"KVM: LAPIC: Tune lapic_timer_advance_ns smoothly\n\nFilter out drastic fluctuation and random fluctuation, remove\ntimer_advance_adjust_done altogether, the adjustment would be\ncontinuous.\n\nSigned-off-by: Wanpeng Li <wanpengli@tencent.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":14,"deletions":15,"filepaths":{"arch/x86/kvm/lapic.c":{"insertions":14,"deletions":14},"arch/x86/kvm/lapic.h":{"insertions":0,"deletions":1}}},"6e4e3b4df4e31ed679de994540f308306f12234b":{"author":"Cun Li","email":"cun.jia.li@gmail.com","date":"2021-01-11 15:24:35 UTC","message":"KVM: Stop using deprecated jump label APIs\n\nThe use of 'struct static_key' and 'static_key_false' is\ndeprecated. Use the new API.\n\nSigned-off-by: Cun Li <cun.jia.li@gmail.com>\nMessage-Id: <20210111152435.50275-1-cun.jia.li@gmail.com>\n[Make it compile.  While at it, rename kvm_no_apic_vcpu to\n kvm_has_noapic_vcpu; the former reads too much like \"true if\n no vCPU has an APIC\". - Paolo]\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":23,"deletions":32,"filepaths":{"arch/x86/kvm/lapic.c":{"insertions":9,"deletions":16},"arch/x86/kvm/lapic.h":{"insertions":6,"deletions":7},"arch/x86/kvm/mmu/mmu_audit.c":{"insertions":4,"deletions":4},"arch/x86/kvm/x86.c":{"insertions":4,"deletions":5}}},"d76685c4a074041ed168e0b04dd604c3df5dcaa5":{"author":"Gregory Haskins","email":"ghaskins@novell.com","date":"2009-06-01 16:54:50 UTC","message":"KVM: cleanup io_device code\n\nWe modernize the io_device code so that we use container_of() instead of\ndev->private, and move the vtable to a separate ops structure\n(theoretically allows better caching for multiple instances of the same\nops structure)\n\nSigned-off-by: Gregory Haskins <ghaskins@novell.com>\nAcked-by: Chris Wright <chrisw@sous-sol.org>\nSigned-off-by: Avi Kivity <avi@redhat.com>","insertions":109,"deletions":53,"filepaths":{"arch/x86/kvm/i8254.c":{"insertions":28,"deletions":12},"arch/x86/kvm/i8259.c":{"insertions":14,"deletions":6},"arch/x86/kvm/lapic.c":{"insertions":15,"deletions":7},"arch/x86/kvm/x86.c":{"insertions":1,"deletions":1},"virt/kvm/coalesced_mmio.c":{"insertions":15,"deletions":10},"virt/kvm/ioapic.c":{"insertions":15,"deletions":7},"virt/kvm/iodev.h":{"insertions":20,"deletions":9},"virt/kvm/kvm_main.c":{"insertions":1,"deletions":1}}},"9e445093e523f3277081314c864f708fd4bd34aa":{},"16c8d2df7ec0eed31b7d3b61cb13206a7fb930cc":{"author":"Jens Axboe","email":"axboe@kernel.dk","date":"2021-09-12 12:45:07 UTC","message":"io_uring: ensure symmetry in handling iter types in loop_rw_iter()\n\nWhen setting up the next segment, we check what type the iter is and\nhandle it accordingly. However, when incrementing and processed amount\nwe do not, and both iter advance and addr/len are adjusted, regardless\nof type. Split the increment side just like we do on the setup side.\n\nFixes: 4017eb91a9e7 (\"io_uring: make loop_rw_iter() use original user supplied pointers\")\nCc: stable@vger.kernel.org\nReported-by: Valentina Palmiotti <vpalmiotti@gmail.com>\nReviewed-by: Pavel Begunkov <asml.silence@gmail.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>","insertions":6,"deletions":3,"filepaths":{"fs/io_uring.c":{"insertions":6,"deletions":3}}},"32960613b7c3352ddf38c42596e28a16ae36335e":{"author":"Jens Axboe","email":"axboe@kernel.dk","date":"2019-09-23 17:05:34 UTC","message":"io_uring: correctly handle non ->{read,write}_iter() file_operations\n\nCurrently we just -EINVAL a read or write to an fd that isn't backed\nby ->read_iter() or ->write_iter(). But we can handle them just fine,\nas long as we punt fo async context first.\n\nImplement a simple loop function for doing ->read() or ->write()\ninstead, and ensure we call it appropriately.\n\nReported-by: 李通洲 <carter.li@eoitek.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>","insertions":54,"deletions":6,"filepaths":{"fs/io_uring.c":{"insertions":54,"deletions":6}}},"4017eb91a9e79bbb5d14868c207436f4a6a0af50":{"author":"Jens Axboe","email":"axboe@kernel.dk","date":"2020-10-22 20:14:12 UTC","message":"io_uring: make loop_rw_iter() use original user supplied pointers\n\nWe jump through a hoop for fixed buffers, where we first map these to\na bvec(), then kmap() the bvec to obtain the pointer we copy to/from.\nThis was always a bit ugly, and with the set_fs changes, it ends up\nbeing practically problematic as well.\n\nThere's no need to jump through these hoops, just use the original user\npointers and length for the non iter based read/write.\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>","insertions":12,"deletions":14,"filepaths":{"fs/io_uring.c":{"insertions":12,"deletions":14}}},"3b0462726e7ef281c35a7a4ae33e93ee2bc9975b":{"author":"Christian Brauner","email":"christian.brauner@ubuntu.com","date":"2021-07-14 13:47:49 UTC","message":"cgroup: verify that source is a string\n\nThe following sequence can be used to trigger a UAF:\n\n    int fscontext_fd = fsopen(\"cgroup\");\n    int fd_null = open(\"/dev/null, O_RDONLY);\n    int fsconfig(fscontext_fd, FSCONFIG_SET_FD, \"source\", fd_null);\n    close_range(3, ~0U, 0);\n\nThe cgroup v1 specific fs parser expects a string for the \"source\"\nparameter.  However, it is perfectly legitimate to e.g.  specify a file\ndescriptor for the \"source\" parameter.  The fs parser doesn't know what\na filesystem allows there.  So it's a bug to assume that \"source\" is\nalways of type fs_value_is_string when it can reasonably also be\nfs_value_is_file.\n\nThis assumption in the cgroup code causes a UAF because struct\nfs_parameter uses a union for the actual value.  Access to that union is\nguarded by the param->type member.  Since the cgroup paramter parser\ndidn't check param->type but unconditionally moved param->string into\nfc->source a close on the fscontext_fd would trigger a UAF during\nput_fs_context() w","insertions":2,"deletions":0,"filepaths":{"kernel/cgroup/cgroup-v1.c":{"insertions":2,"deletions":0}}},"8d2451f4994fa60a57617282bab91b98266a00b1":{"author":"Al Viro","email":"viro@zeniv.linux.org.uk","date":"2019-01-17 05:15:11 UTC","message":"cgroup1: switch to option-by-option parsing\n\n[dhowells should be the author - it's carved out of his patch]\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>","insertions":117,"deletions":98,"filepaths":{"kernel/cgroup/cgroup-internal.h":{"insertions":2,"deletions":1},"kernel/cgroup/cgroup-v1.c":{"insertions":109,"deletions":83},"kernel/cgroup/cgroup.c":{"insertions":6,"deletions":14}}},"2d18e54dd8662442ef5898c6bdadeaf90b3cebbc":{"author":"Qinglang Miao","email":"miaoqinglang@huawei.com","date":"2020-12-10 01:29:43 UTC","message":"cgroup: Fix memory leak when parsing multiple source parameters\n\nA memory leak is found in cgroup1_parse_param() when multiple source\nparameters overwrite fc->source in the fs_context struct without free.\n\nunreferenced object 0xffff888100d930e0 (size 16):\n  comm \"mount\", pid 520, jiffies 4303326831 (age 152.783s)\n  hex dump (first 16 bytes):\n    74 65 73 74 6c 65 61 6b 00 00 00 00 00 00 00 00  testleak........\n  backtrace:\n    [<000000003e5023ec>] kmemdup_nul+0x2d/0xa0\n    [<00000000377dbdaa>] vfs_parse_fs_string+0xc0/0x150\n    [<00000000cb2b4882>] generic_parse_monolithic+0x15a/0x1d0\n    [<000000000f750198>] path_mount+0xee1/0x1820\n    [<0000000004756de2>] do_mount+0xea/0x100\n    [<0000000094cafb0a>] __x64_sys_mount+0x14b/0x1f0\n\nFix this bug by permitting a single source parameter and rejecting with\nan error all subsequent ones.\n\nFixes: 8d2451f4994f (\"cgroup1: switch to option-by-option parsing\")\nReported-by: Hulk Robot <hulkci@huawei.com>\nSigned-off-by: Qinglang Miao <miaoqinglang@hua","insertions":0,"deletions":2,"filepaths":{"kernel/cgroup/cgroup-v1.c":{"insertions":0,"deletions":2}}},"d7167b149943e38ad610191ecbb0800c78bbced9":{"author":"Al Viro","email":"viro@zeniv.linux.org.uk","date":"2019-09-07 11:23:15 UTC","message":"fs_parse: fold fs_parameter_desc/fs_parameter_spec\n\nThe former contains nothing but a pointer to an array of the latter...\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>","insertions":198,"deletions":106,"filepaths":{"arch/powerpc/platforms/cell/spufs/inode.c":{"insertions":7,"deletions":3},"arch/s390/hypfs/inode.c":{"insertions":7,"deletions":3},"arch/x86/kernel/cpu/resctrl/rdtgroup.c":{"insertions":7,"deletions":3},"drivers/base/devtmpfs.c":{"insertions":2,"deletions":2},"drivers/block/rbd.c":{"insertions":6,"deletions":2},"drivers/usb/gadget/function/f_fs.c":{"insertions":7,"deletions":3},"fs/afs/super.c":{"insertions":8,"deletions":4},"fs/ceph/super.c":{"insertions":6,"deletions":2},"fs/fs_parser.c":{"insertions":28,"deletions":25},"fs/fuse/inode.c":{"insertions":8,"deletions":4},"fs/gfs2/ops_fstype.c":{"insertions":7,"deletions":3},"fs/hugetlbfs/inode.c":{"insertions":7,"deletions":3},"fs/jffs2/super.c":{"insertions":7,"deletions":3},"fs/nfs/fs_context.c":{"insertions":8,"deletions":4},"fs/proc/root.c":{"insertions":7,"deletions":3},"fs/ramfs/inode.c":{"insertions":7,"deletions":3},"fs/xfs/xfs_super.c":{"insertions":7,"deletions":3},"include/linux/fs.h":{"insertions":2,"deletions":2},"include/linux/fs_parser.h":{"insertions":8,"deletions":4},"include/linux/ramfs.h":{"insertions":1,"deletions":3},"include/linux/shmem_fs.h":{"insertions":1,"deletions":2},"kernel/bpf/inode.c":{"insertions":7,"deletions":3},"kernel/cgroup/cgroup-internal.h":{"insertions":2,"deletions":2},"kernel/cgroup/cgroup-v1.c":{"insertions":6,"deletions":2},"kernel/cgroup/cgroup.c":{"insertions":8,"deletions":4},"mm/shmem.c":{"insertions":8,"deletions":4},"net/ceph/ceph_common.c":{"insertions":6,"deletions":2},"security/selinux/hooks.c":{"insertions":7,"deletions":3},"security/smack/smack_lsm.c":{"insertions":6,"deletions":2}}},"983d8e60f50806f90534cc5373d0ce867e5aaf79":{"author":"Darrick J. Wong","email":"djwong@kernel.org","date":"2021-12-22 22:19:18 UTC","message":"xfs: map unwritten blocks in XFS_IOC_{ALLOC,FREE}SP just like fallocate\n\nThe old ALLOCSP/FREESP ioctls in XFS can be used to preallocate space at\nthe end of files, just like fallocate and RESVSP.  Make the behavior\nconsistent with the other ioctls.\n\nReported-by: Kirill Tkhai <ktkhai@virtuozzo.com>\nSigned-off-by: Darrick J. Wong <djwong@kernel.org>\nSigned-off-by: Darrick J. Wong <darrick.wong@oracle.com>\nReviewed-by: Dave Chinner <dchinner@redhat.com>\nReviewed-by: Eric Sandeen <sandeen@redhat.com>","insertions":2,"deletions":1,"filepaths":{"fs/xfs/xfs_ioctl.c":{"insertions":2,"deletions":1}}},"865e9446b4c17f78be0b1387426394b6bfc278f3":{"author":"Christoph Hellwig","email":"hch@infradead.org","date":"2013-10-12 07:55:08 UTC","message":"xfs: fold xfs_change_file_space into xfs_ioc_space\n\nNow that only one caller of xfs_change_file_space is left it can be merged\ninto said caller.\n\nSigned-off-by: Christoph Hellwig <hch@lst.de>\nReviewed-by: Dave Chinner <dchinner@redhat.com>\nSigned-off-by: Ben Myers <bpm@sgi.com>","insertions":126,"deletions":191,"filepaths":{"fs/xfs/xfs_bmap_util.c":{"insertions":1,"deletions":177},"fs/xfs/xfs_bmap_util.h":{"insertions":2,"deletions":3},"fs/xfs/xfs_ioctl.c":{"insertions":122,"deletions":8},"fs/xfs/xfs_iops.h":{"insertions":1,"deletions":3}}},"294f2fc6da27620a506e6c050241655459ccd6bd":{"author":"John Fastabend","email":"john.fastabend@gmail.com","date":"2020-03-24 17:38:37 UTC","message":"bpf: Verifer, adjust_scalar_min_max_vals to always call update_reg_bounds()\n\nCurrently, for all op verification we call __red_deduce_bounds() and\n__red_bound_offset() but we only call __update_reg_bounds() in bitwise\nops. However, we could benefit from calling __update_reg_bounds() in\nBPF_ADD, BPF_SUB, and BPF_MUL cases as well.\n\nFor example, a register with state 'R1_w=invP0' when we subtract from\nit,\n\n w1 -= 2\n\nBefore coerce we will now have an smin_value=S64_MIN, smax_value=U64_MAX\nand unsigned bounds umin_value=0, umax_value=U64_MAX. These will then\nbe clamped to S32_MIN, U32_MAX values by coerce in the case of alu32 op\nas done in above example. However tnum will be a constant because the\nALU op is done on a constant.\n\nWithout update_reg_bounds() we have a scenario where tnum is a const\nbut our unsigned bounds do not reflect this. By calling update_reg_bounds\nafter coerce to 32bit we further refine the umin_value to U64_MAX in the\nalu64 case or U32_MAX in the alu32 case above.\n\nSign","insertions":1,"deletions":0,"filepaths":{"kernel/bpf/verifier.c":{"insertions":1,"deletions":0}}},"468f6eafa6c44cb2c5d8aad35e12f06c240a812a":{"author":"Jann Horn","email":"jannh@google.com","date":"2017-12-19 04:11:56 UTC","message":"bpf: fix 32-bit ALU op verification\n\n32-bit ALU ops operate on 32-bit values and have 32-bit outputs.\nAdjust the verifier accordingly.\n\nFixes: f1174f77b50c (\"bpf/verifier: rework value tracking\")\nSigned-off-by: Jann Horn <jannh@google.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>","insertions":17,"deletions":11,"filepaths":{"kernel/bpf/verifier.c":{"insertions":17,"deletions":11}}},"b03c9f9fdc37dab81ea04d5dacdc5995d4c224c2":{"author":"Edward Cree","email":"ecree@solarflare.com","date":"2017-08-07 14:26:36 UTC","message":"bpf/verifier: track signed and unsigned min/max values\n\nAllows us to, sometimes, combine information from a signed check of one\n bound and an unsigned check of the other.\nWe now track the full range of possible values, rather than restricting\n ourselves to [0, 1<<30) and considering anything beyond that as\n unknown.  While this is probably not necessary, it makes the code more\n straightforward and symmetrical between signed and unsigned bounds.\n\nSigned-off-by: Edward Cree <ecree@solarflare.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":461,"deletions":317,"filepaths":{"include/linux/bpf_verifier.h":{"insertions":14,"deletions":9},"include/linux/tnum.h":{"insertions":2,"deletions":0},"kernel/bpf/tnum.c":{"insertions":16,"deletions":0},"kernel/bpf/verifier.c":{"insertions":429,"deletions":308}}},"f1174f77b50c94eecaa658fdc56fa69b421de4b8":{"author":"Edward Cree","email":"ecree@solarflare.com","date":"2017-08-07 14:26:19 UTC","message":"bpf/verifier: rework value tracking\n\nUnifies adjusted and unadjusted register value types (e.g. FRAME_POINTER is\n now just a PTR_TO_STACK with zero offset).\nTracks value alignment by means of tracking known & unknown bits.  This\n also replaces the 'reg->imm' (leading zero bits) calculations for (what\n were) UNKNOWN_VALUEs.\nIf pointer leaks are allowed, and adjust_ptr_min_max_vals returns -EACCES,\n treat the pointer as an unknown scalar and try again, because we might be\n able to conclude something about the result (e.g. pointer & 0x40 is either\n 0 or 0x40).\nVerifier hooks in the netronome/nfp driver were changed to match the new\n data structures.\n\nSigned-off-by: Edward Cree <ecree@solarflare.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":1265,"deletions":852,"filepaths":{"drivers/net/ethernet/netronome/nfp/bpf/verifier.c":{"insertions":14,"deletions":10},"include/linux/bpf.h":{"insertions":12,"deletions":22},"include/linux/bpf_verifier.h":{"insertions":21,"deletions":13},"include/linux/tnum.h":{"insertions":79,"deletions":0},"kernel/bpf/Makefile":{"insertions":1,"deletions":1},"kernel/bpf/tnum.c":{"insertions":164,"deletions":0},"kernel/bpf/verifier.c":{"insertions":974,"deletions":806}}},"30e29a9a2bc6a4888335a6ede968b75cd329657a":{"author":"Tatsuhiko Yasumatsu","email":"th.yasumatsu@gmail.com","date":"2021-09-30 13:55:45 UTC","message":"bpf: Fix integer overflow in prealloc_elems_and_freelist()\n\nIn prealloc_elems_and_freelist(), the multiplication to calculate the\nsize passed to bpf_map_area_alloc() could lead to an integer overflow.\nAs a result, out-of-bounds write could occur in pcpu_freelist_populate()\nas reported by KASAN:\n\n[...]\n[   16.968613] BUG: KASAN: slab-out-of-bounds in pcpu_freelist_populate+0xd9/0x100\n[   16.969408] Write of size 8 at addr ffff888104fc6ea0 by task crash/78\n[   16.970038]\n[   16.970195] CPU: 0 PID: 78 Comm: crash Not tainted 5.15.0-rc2+ #1\n[   16.970878] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1ubuntu1.1 04/01/2014\n[   16.972026] Call Trace:\n[   16.972306]  dump_stack_lvl+0x34/0x44\n[   16.972687]  print_address_description.constprop.0+0x21/0x140\n[   16.973297]  ? pcpu_freelist_populate+0xd9/0x100\n[   16.973777]  ? pcpu_freelist_populate+0xd9/0x100\n[   16.974257]  kasan_report.cold+0x7f/0x11b\n[   16.974681]  ? pcpu_freelist_populate+0xd9/0x100\n[   16.975190]  pcpu","insertions":2,"deletions":1,"filepaths":{"kernel/bpf/stackmap.c":{"insertions":2,"deletions":1}}},"557c0c6e7df8e14a46bd7560d193fa5bbc00a858":{"author":"Alexei Starovoitov","email":"ast@fb.com","date":"2016-03-08 05:57:17 UTC","message":"bpf: convert stackmap to pre-allocation\n\nIt was observed that calling bpf_get_stackid() from a kprobe inside\nslub or from spin_unlock causes similar deadlock as with hashmap,\ntherefore convert stackmap to use pre-allocated memory.\n\nThe call_rcu is no longer feasible mechanism, since delayed freeing\ncauses bpf_get_stackid() to fail unpredictably when number of actual\nstacks is significantly less than user requested max_entries.\nSince elements are no longer freed into slub, we can push elements into\nfreelist immediately and let them be recycled.\nHowever the very unlikley race between user space map_lookup() and\nprogram-side recycling is possible:\n     cpu0                          cpu1\n     ----                          ----\nuser does lookup(stackidX)\nstarts copying ips into buffer\n                                   delete(stackidX)\n                                   calls bpf_get_stackid()\n\t\t\t\t   which recyles the element and\n                                   overwrites with new stack t","insertions":71,"deletions":18,"filepaths":{"include/linux/bpf.h":{"insertions":1,"deletions":0},"kernel/bpf/stackmap.c":{"insertions":68,"deletions":18},"kernel/bpf/syscall.c":{"insertions":2,"deletions":0}}},"19d1532a187669ce86d5a2696eb7275310070793":{"author":"Pavel Skripkin","email":"paskripkin@gmail.com","date":"2021-08-13 15:14:33 UTC","message":"net: 6pack: fix slab-out-of-bounds in decode_data\n\nSyzbot reported slab-out-of bounds write in decode_data().\nThe problem was in missing validation checks.\n\nSyzbot's reproducer generated malicious input, which caused\ndecode_data() to be called a lot in sixpack_decode(). Since\nrx_count_cooked is only 400 bytes and noone reported before,\nthat 400 bytes is not enough, let's just check if input is malicious\nand complain about buffer overrun.\n\nFail log:\n==================================================================\nBUG: KASAN: slab-out-of-bounds in drivers/net/hamradio/6pack.c:843\nWrite of size 1 at addr ffff888087c5544e by task kworker/u4:0/7\n\nCPU: 0 PID: 7 Comm: kworker/u4:0 Not tainted 5.6.0-rc3-syzkaller #0\n...\nWorkqueue: events_unbound flush_to_ldisc\nCall Trace:\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0x197/0x210 lib/dump_stack.c:118\n print_address_description.constprop.0.cold+0xd4/0x30b mm/kasan/report.c:374\n __kasan_report.cold+0x1b/0x32 mm/kasan/report.c:506\n kasan","insertions":6,"deletions":0,"filepaths":{"drivers/net/hamradio/6pack.c":{"insertions":6,"deletions":0}}},"3e3b5dfcd16a3e254aab61bd1e8c417dd4503102":{"author":"Lin Ma","email":"linma@zju.edu.cn","date":"2021-11-16 15:26:52 UTC","message":"NFC: reorder the logic in nfc_{un,}register_device\n\nThere is a potential UAF between the unregistration routine and the NFC\nnetlink operations.\n\nThe race that cause that UAF can be shown as below:\n\n (FREE)                      |  (USE)\nnfcmrvl_nci_unregister_dev   |  nfc_genl_dev_up\n  nci_close_device           |\n  nci_unregister_device      |    nfc_get_device\n    nfc_unregister_device    |    nfc_dev_up\n      rfkill_destory         |\n      device_del             |      rfkill_blocked\n  ...                        |    ...\n\nThe root cause for this race is concluded below:\n1. The rfkill_blocked (USE) in nfc_dev_up is supposed to be placed after\nthe device_is_registered check.\n2. Since the netlink operations are possible just after the device_add\nin nfc_register_device, the nfc_dev_up() can happen anywhere during the\nrfkill creation process, which leads to data race.\n\nThis patch reorder these actions to permit\n1. Once device_del is finished, the nfc_dev_up cannot dereference the\nrfkill ob","insertions":18,"deletions":14,"filepaths":{"net/nfc/core.c":{"insertions":18,"deletions":14}}},"48b71a9e66c2eab60564b1b1c85f4928ed04e406":{"author":"Lin Ma","email":"linma@zju.edu.cn","date":"2021-11-16 15:27:32 UTC","message":"NFC: add NCI_UNREG flag to eliminate the race\n\nThere are two sites that calls queue_work() after the\ndestroy_workqueue() and lead to possible UAF.\n\nThe first site is nci_send_cmd(), which can happen after the\nnci_close_device as below\n\nnfcmrvl_nci_unregister_dev   |  nfc_genl_dev_up\n  nci_close_device           |\n    flush_workqueue          |\n    del_timer_sync           |\n  nci_unregister_device      |    nfc_get_device\n    destroy_workqueue        |    nfc_dev_up\n    nfc_unregister_device    |      nci_dev_up\n      device_del             |        nci_open_device\n                             |          __nci_request\n                             |            nci_send_cmd\n                             |              queue_work !!!\n\nAnother site is nci_cmd_timer, awaked by the nci_cmd_work from the\nnci_send_cmd.\n\n  ...                        |  ...\n  nci_unregister_device      |  queue_work\n    destroy_workqueue        |\n    nfc_unregister_device    |  ...\n      device_del             |  ","insertions":18,"deletions":2,"filepaths":{"include/net/nfc/nci_core.h":{"insertions":1,"deletions":0},"net/nfc/nci/core.c":{"insertions":17,"deletions":2}}},"86cdf8e38792545161dbe3350a7eced558ba4d15":{"author":"Lin Ma","email":"linma@zju.edu.cn","date":"2021-11-15 14:56:00 UTC","message":"NFC: reorganize the functions in nci_request\n\nThere is a possible data race as shown below:\n\nthread-A in nci_request()       | thread-B in nci_close_device()\n                                | mutex_lock(&ndev->req_lock);\ntest_bit(NCI_UP, &ndev->flags); |\n...                             | test_and_clear_bit(NCI_UP, &ndev->flags)\nmutex_lock(&ndev->req_lock);    |\n                                |\n\nThis race will allow __nci_request() to be awaked while the device is\ngetting removed.\n\nSimilar to commit e2cb6b891ad2 (\"bluetooth: eliminate the potential race\ncondition when removing the HCI controller\"). this patch alters the\nfunction sequence in nci_request() to prevent the data races between the\nnci_close_device().\n\nSigned-off-by: Lin Ma <linma@zju.edu.cn>\nFixes: 6a2968aaf50c (\"NFC: basic NCI protocol implementation\")\nLink: https://lore.kernel.org/r/20211115145600.8320-1-linma@zju.edu.cn\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>","insertions":7,"deletions":4,"filepaths":{"net/nfc/nci/core.c":{"insertions":7,"deletions":4}}},"be055b2f89b5842f41363b5655a33dffb51a8294":{"author":"Samuel Ortiz","email":"sameo@linux.intel.com","date":"2013-04-11 09:52:20 UTC","message":"NFC: RFKILL support\n\nAll NFC devices will now get proper RFKILL support as long as they provide\nsome dev_up and dev_down hooks. Rfkilling an NFC device will bring it down\nwhile it is left to userspace to bring it back up when being rfkill unblocked.\nThis is very similar to what Bluetooth does.\n\nAcked-by: Marcel Holtmann <marcel@holtmann.org>\nSigned-off-by: Samuel Ortiz <sameo@linux.intel.com>","insertions":40,"deletions":0,"filepaths":{"include/net/nfc/nfc.h":{"insertions":2,"deletions":0},"net/nfc/core.c":{"insertions":38,"deletions":0}}},"4d12b8b129f170d0fc3188de1e51a2a1b0f87730":{"author":"Lauro Ramos Venancio","email":"lauro.venancio@openbossa.org","date":"2011-07-01 22:31:34 UTC","message":"NFC: add nfc generic netlink interface\n\nThe NFC generic netlink interface exports the NFC control operations\nto the user space.\n\nSigned-off-by: Lauro Ramos Venancio <lauro.venancio@openbossa.org>\nSigned-off-by: Aloisio Almeida Jr <aloisio.almeida@openbossa.org>\nSigned-off-by: Samuel Ortiz <sameo@linux.intel.com>\nReviewed-by: Johannes Berg <johannes@sipsolutions.net>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>","insertions":773,"deletions":3,"filepaths":{"include/linux/nfc.h":{"insertions":112,"deletions":0},"include/net/nfc.h":{"insertions":21,"deletions":0},"net/nfc/Makefile":{"insertions":1,"deletions":1},"net/nfc/core.c":{"insertions":91,"deletions":2},"net/nfc/netlink.c":{"insertions":537,"deletions":0},"net/nfc/nfc.h":{"insertions":11,"deletions":0}}},"f0c9103813b3045bd5b43220b6a78c9908a45d24":{"author":"Eric Lapuyade","email":"eric.lapuyade@linux.intel.com","date":"2012-11-26 17:06:27 UTC","message":"NFC: Fixed nfc core and hci unregistration and cleanup\n\nWhen an adapter is removed, it will unregister itself from hci and/or\nnfc core. In order to do that safely, work tasks must first be canceled\nand prevented to be scheduled again, before the hci or nfc device can be\ndestroyed.\n\nSigned-off-by: Eric Lapuyade <eric.lapuyade@intel.com>\nSigned-off-by: Samuel Ortiz <sameo@linux.intel.com>","insertions":57,"deletions":32,"filepaths":{"include/net/nfc/hci.h":{"insertions":2,"deletions":0},"include/net/nfc/nfc.h":{"insertions":2,"deletions":0},"net/nfc/core.c":{"insertions":22,"deletions":25},"net/nfc/hci/core.c":{"insertions":24,"deletions":7},"net/nfc/hci/hcp.c":{"insertions":7,"deletions":0}}},"20c239c1390bd6f3bb389fe1a7e8307f29f52563":{"author":"Joe Perches","email":"joe@perches.com","date":"2011-11-29 19:37:33 UTC","message":"nfc: Convert nfc_dbg to pr_debug\n\nUsing the standard debugging mechanisms is better than\nsubsystem specific ones when the subsystem doesn't use\na specific struct.\n\nCoalesce long formats.\n\nSigned-off-by: Joe Perches <joe@perches.com>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>","insertions":160,"deletions":158,"filepaths":{"net/nfc/core.c":{"insertions":19,"deletions":18},"net/nfc/nci/core.c":{"insertions":28,"deletions":28},"net/nfc/nci/data.c":{"insertions":11,"deletions":11},"net/nfc/nci/ntf.c":{"insertions":33,"deletions":34},"net/nfc/nci/rsp.c":{"insertions":40,"deletions":40},"net/nfc/netlink.c":{"insertions":17,"deletions":15},"net/nfc/rawsock.c":{"insertions":12,"deletions":12}}},"3e256b8f8dfa309a80b5dece388d85d9a9801a29":{"author":"Lauro Ramos Venancio","email":"lauro.venancio@openbossa.org","date":"2011-07-01 22:31:33 UTC","message":"NFC: add nfc subsystem core\n\nThe NFC subsystem core is responsible for providing the device driver\ninterface. It is also responsible for providing an interface to the control\noperations and data exchange.\n\nSigned-off-by: Lauro Ramos Venancio <lauro.venancio@openbossa.org>\nSigned-off-by: Aloisio Almeida Jr <aloisio.almeida@openbossa.org>\nSigned-off-by: Samuel Ortiz <sameo@linux.intel.com>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>","insertions":609,"deletions":15,"filepaths":{"drivers/Kconfig":{"insertions":0,"deletions":2},"drivers/Makefile":{"insertions":1,"deletions":0},"drivers/nfc/Kconfig":{"insertions":3,"deletions":13},"drivers/nfc/Makefile":{"insertions":2,"deletions":0},"include/net/nfc.h":{"insertions":135,"deletions":0},"net/Kconfig":{"insertions":1,"deletions":0},"net/Makefile":{"insertions":1,"deletions":0},"net/nfc/Kconfig":{"insertions":16,"deletions":0},"net/nfc/Makefile":{"insertions":7,"deletions":0},"net/nfc/core.c":{"insertions":365,"deletions":0},"net/nfc/nfc.h":{"insertions":78,"deletions":0}}},"8b3fe7b591b3c50061a8701f8eda14033420577b":{"author":"Ilan Elias","email":"ilane@ti.com","date":"2011-09-18 08:19:33 UTC","message":"NFC: Add dev_up and dev_down control operations\n\nAdd 2 new nfc control operations:\ndev_up to turn on the nfc device\ndev_down to turn off the nfc device\n\nSigned-off-by: Ilan Elias <ilane@ti.com>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>","insertions":149,"deletions":0,"filepaths":{"drivers/nfc/pn533.c":{"insertions":2,"deletions":0},"include/linux/nfc.h":{"insertions":6,"deletions":0},"include/net/nfc.h":{"insertions":4,"deletions":0},"net/nfc/core.c":{"insertions":77,"deletions":0},"net/nfc/netlink.c":{"insertions":56,"deletions":0},"net/nfc/nfc.h":{"insertions":4,"deletions":0}}},"6a2968aaf50c7a22fced77a5e24aa636281efca8":{"author":"Ilan Elias","email":"ilane@ti.com","date":"2011-09-18 08:19:35 UTC","message":"NFC: basic NCI protocol implementation\n\nThe NFC Controller Interface (NCI) is a standard\ncommunication protocol between an NFC Controller (NFCC)\nand a Device Host (DH), defined by the NFC Forum.\n\nSigned-off-by: Ilan Elias <ilane@ti.com>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>","insertions":2129,"deletions":0,"filepaths":{"include/net/nfc/nci.h":{"insertions":313,"deletions":0},"include/net/nfc/nci_core.h":{"insertions":183,"deletions":0},"net/nfc/Kconfig":{"insertions":2,"deletions":0},"net/nfc/Makefile":{"insertions":1,"deletions":0},"net/nfc/nci/Kconfig":{"insertions":10,"deletions":0},"net/nfc/nci/Makefile":{"insertions":7,"deletions":0},"net/nfc/nci/core.c":{"insertions":790,"deletions":0},"net/nfc/nci/data.c":{"insertions":245,"deletions":0},"net/nfc/nci/lib.c":{"insertions":94,"deletions":0},"net/nfc/nci/ntf.c":{"insertions":258,"deletions":0},"net/nfc/nci/rsp.c":{"insertions":226,"deletions":0}}},"38f04c6b1b682f1879441e2925403ad9aff9e229":{"author":"Ilan Elias","email":"ilane@ti.com","date":"2011-09-22 08:36:19 UTC","message":"NFC: protect nci_data_exchange transactions\n\nProtect 'cb' and 'cb_context' arguments in nci_data_exchange.\nIn fact, this implements a queue with max length of 1 data\nexchange transactions in parallel.\n\nSigned-off-by: Ilan Elias <ilane@ti.com>\nAcked-by: Lauro Ramos Venancio <lauro.venancio@openbossa.org>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>","insertions":13,"deletions":2,"filepaths":{"include/net/nfc/nci_core.h":{"insertions":1,"deletions":0},"net/nfc/nci/core.c":{"insertions":9,"deletions":1},"net/nfc/nci/data.c":{"insertions":2,"deletions":0},"net/nfc/nci/ntf.c":{"insertions":1,"deletions":1}}},"c4bf98b220cba7a8618405261d69ee53a265110e":{"author":"Ilan Elias","email":"ilane@ti.com","date":"2012-01-17 10:03:50 UTC","message":"NFC: Add NCI data exchange timer\n\nAdd NCI data exchange timer to catch timeouts,\nand call the data exchange callback with an error.\n\nSigned-off-by: Ilan Elias <ilane@ti.com>\nAcked-by: Samuel Ortiz <sameo@linux.intel.com>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>","insertions":31,"deletions":0,"filepaths":{"include/net/nfc/nci_core.h":{"insertions":3,"deletions":0},"net/nfc/nci/core.c":{"insertions":24,"deletions":0},"net/nfc/nci/data.c":{"insertions":4,"deletions":0}}},"8939e47fc953cce6ef53e79e9ff9b53319d1a72d":{"author":"Ilan Elias","email":"ilane@ti.com","date":"2012-01-18 11:16:12 UTC","message":"NFC: Clearly separate NCI states from flags\n\nMake a clear separation between NCI states and flags.\nThis is required in order to support more NCI states (e.g.\nfor multiple targets support).\n\nSigned-off-by: Ilan Elias <ilane@ti.com>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>","insertions":22,"deletions":16,"filepaths":{"include/net/nfc/nci_core.h":{"insertions":10,"deletions":4},"net/nfc/nci/core.c":{"insertions":6,"deletions":5},"net/nfc/nci/ntf.c":{"insertions":2,"deletions":3},"net/nfc/nci/rsp.c":{"insertions":4,"deletions":4}}},"4aeee6871e8c3b043ef02996db8ac70a1af8be92":{"author":"Christophe Ricard","email":"christophe.ricard@gmail.com","date":"2015-02-01 21:26:08 UTC","message":"NFC: nci: Add dynamic logical connections support\n\nThe current NCI core only support the RF static connection.\nFor other NFC features such as Secure Element communication, we\nmay need to create logical connections to the NFCEE (Execution\nEnvironment.\n\nIn order to track each logical connection ID dynamically, we add a\nlinked list of connection info pointers to the nci_dev structure.\n\nSigned-off-by: Christophe Ricard <christophe-h.ricard@st.com>\nSigned-off-by: Samuel Ortiz <sameo@linux.intel.com>","insertions":152,"deletions":40,"filepaths":{"include/net/nfc/nci_core.h":{"insertions":25,"deletions":7},"net/nfc/nci/core.c":{"insertions":40,"deletions":7},"net/nfc/nci/data.c":{"insertions":41,"deletions":15},"net/nfc/nci/ntf.c":{"insertions":27,"deletions":10},"net/nfc/nci/rsp.c":{"insertions":19,"deletions":1}}},"b49a0e69a7b1a68c8d3f64097d06dabb770fec96":{"author":"Iwona Winiarska","email":"iwona.winiarska@intel.com","date":"2021-08-03 23:48:18 UTC","message":"soc: aspeed: lpc-ctrl: Fix boundary check for mmap\n\nThe check mixes pages (vm_pgoff) with bytes (vm_start, vm_end) on one\nside of the comparison, and uses resource address (rather than just the\nresource size) on the other side of the comparison.\nThis can allow malicious userspace to easily bypass the boundary check and\nmap pages that are located outside memory-region reserved by the driver.\n\nFixes: 6c4e97678501 (\"drivers/misc: Add Aspeed LPC control driver\")\nCc: stable@vger.kernel.org\nSigned-off-by: Iwona Winiarska <iwona.winiarska@intel.com>\nReviewed-by: Andrew Jeffery <andrew@aj.id.au>\nTested-by: Andrew Jeffery <andrew@aj.id.au>\nReviewed-by: Joel Stanley <joel@aj.id.au>\nSigned-off-by: Joel Stanley <joel@jms.id.au>","insertions":1,"deletions":1,"filepaths":{"drivers/soc/aspeed/aspeed-lpc-ctrl.c":{"insertions":1,"deletions":1}}},"6c4e976785011dfbe461821d0bfc58cfd60eac56":{"author":"Cyril Bur","email":"cyrilbur@gmail.com","date":"2017-02-17 03:28:49 UTC","message":"drivers/misc: Add Aspeed LPC control driver\n\nIn order to manage server systems, there is typically another processor\nknown as a BMC (Baseboard Management Controller) which is responsible\nfor powering the server and other various elements, sometimes fans,\noften the system flash.\n\nThe Aspeed BMC family which is what is used on OpenPOWER machines and a\nnumber of x86 as well is typically connected to the host via an LPC\n(Low Pin Count) bus (among others).\n\nThe LPC bus is an ISA bus on steroids. It's generally used by the\nBMC chip to provide the host with access to the system flash (via MEM/FW\ncycles) that contains the BIOS or other host firmware along with a\nnumber of SuperIO-style IOs (via IO space) such as UARTs, IPMI\ncontrollers.\n\nOn the BMC chip side, this is all configured via a bunch of registers\nwhose content is related to a given policy of what devices are exposed\nat a per system level, which is system/vendor specific, so we don't want\nto bolt that into the BMC kernel. This started ","insertions":336,"deletions":0,"filepaths":{"drivers/misc/Kconfig":{"insertions":8,"deletions":0},"drivers/misc/Makefile":{"insertions":1,"deletions":0},"drivers/misc/aspeed-lpc-ctrl.c":{"insertions":267,"deletions":0},"include/uapi/linux/aspeed-lpc-ctrl.h":{"insertions":60,"deletions":0}}},"cdeb5d7d890e14f3b70e8087e745c4a6a7d9f337":{"author":"Michael Ellerman","email":"mpe@ellerman.id.au","date":"2021-10-15 12:02:08 UTC","message":"KVM: PPC: Book3S HV: Make idle_kvm_start_guest() return 0 if it went to guest\n\nWe call idle_kvm_start_guest() from power7_offline() if the thread has\nbeen requested to enter KVM. We pass it the SRR1 value that was returned\nfrom power7_idle_insn() which tells us what sort of wakeup we're\nprocessing.\n\nDepending on the SRR1 value we pass in, the KVM code might enter the\nguest, or it might return to us to do some host action if the wakeup\nrequires it.\n\nIf idle_kvm_start_guest() is able to handle the wakeup, and enter the\nguest it is supposed to indicate that by returning a zero SRR1 value to\nus.\n\nThat was the behaviour prior to commit 10d91611f426 (\"powerpc/64s:\nReimplement book3s idle code in C\"), however in that commit the\nhandling of SRR1 was reworked, and the zeroing behaviour was lost.\n\nReturning from idle_kvm_start_guest() without zeroing the SRR1 value can\nconfuse the host offline code, causing the guest to crash and other\nweirdness.\n\nFixes: 10d91611f426 (\"powerpc/64s: Reimplement bo","insertions":7,"deletions":2,"filepaths":{"arch/powerpc/kvm/book3s_hv_rmhandlers.S":{"insertions":7,"deletions":2}}},"9b4416c5095c20e110c82ae602c254099b83b72f":{"author":"Michael Ellerman","email":"mpe@ellerman.id.au","date":"2021-10-15 12:01:48 UTC","message":"KVM: PPC: Book3S HV: Fix stack handling in idle_kvm_start_guest()\n\nIn commit 10d91611f426 (\"powerpc/64s: Reimplement book3s idle code in\nC\") kvm_start_guest() became idle_kvm_start_guest(). The old code\nallocated a stack frame on the emergency stack, but didn't use the\nframe to store anything, and also didn't store anything in its caller's\nframe.\n\nidle_kvm_start_guest() on the other hand is written more like a normal C\nfunction, it creates a frame on entry, and also stores CR/LR into its\ncallers frame (per the ABI). The problem is that there is no caller\nframe on the emergency stack.\n\nThe emergency stack for a given CPU is allocated with:\n\n  paca_ptrs[i]->emergency_sp = alloc_stack(limit, i) + THREAD_SIZE;\n\nSo emergency_sp actually points to the first address above the emergency\nstack allocation for a given CPU, we must not store above it without\nfirst decrementing it to create a frame. This is different to the\nregular kernel stack, paca->kstack, which is initialised to point at an\ninit","insertions":10,"deletions":9,"filepaths":{"arch/powerpc/kvm/book3s_hv_rmhandlers.S":{"insertions":10,"deletions":9}}},"10d91611f426d4bafd2a83d966c36da811b2f7ad":{"author":"Nicholas Piggin","email":"npiggin@gmail.com","date":"2019-04-12 14:30:52 UTC","message":"powerpc/64s: Reimplement book3s idle code in C\n\nReimplement Book3S idle code in C, moving POWER7/8/9 implementation\nspeific HV idle code to the powernv platform code.\n\nBook3S assembly stubs are kept in common code and used only to save\nthe stack frame and non-volatile GPRs before executing architected\nidle instructions, and restoring the stack and reloading GPRs then\nreturning to C after waking from idle.\n\nThe complex logic dealing with threads and subcores, locking, SPRs,\nHMIs, timebase resync, etc., is all done in C which makes it more\nmaintainable.\n\nThis is not a strict translation to C code, there are some\nsignificant differences:\n\n- Idle wakeup no longer uses the ->cpu_restore call to reinit SPRs,\n  but saves and restores them itself.\n\n- The optimisation where EC=ESL=0 idle modes did not have to save GPRs\n  or change MSR is restored, because it's now simple to do. ESL=1\n  sleeps that do not lose GPRs can use this optimization too.\n\n- KVM secondary entry and cede is now more of a ca","insertions":969,"deletions":1218,"filepaths":{"arch/powerpc/include/asm/cpuidle.h":{"insertions":3,"deletions":16},"arch/powerpc/include/asm/paca.h":{"insertions":22,"deletions":18},"arch/powerpc/include/asm/processor.h":{"insertions":6,"deletions":3},"arch/powerpc/include/asm/reg.h":{"insertions":4,"deletions":4},"arch/powerpc/kernel/asm-offsets.c":{"insertions":0,"deletions":18},"arch/powerpc/kernel/exceptions-64s.S":{"insertions":14,"deletions":9},"arch/powerpc/kernel/idle_book3s.S":{"insertions":146,"deletions":914},"arch/powerpc/kernel/setup-common.c":{"insertions":2,"deletions":2},"arch/powerpc/kvm/book3s_hv_rmhandlers.S":{"insertions":72,"deletions":46},"arch/powerpc/platforms/powernv/idle.c":{"insertions":689,"deletions":173},"arch/powerpc/platforms/powernv/subcore.c":{"insertions":1,"deletions":1},"arch/powerpc/xmon/xmon.c":{"insertions":10,"deletions":14}}},"56548fc0e86cb9156af7a7e1f15ba78f251dafaf":{"author":"Paul Mackerras","email":"paulus@samba.org","date":"2014-12-03 03:48:40 UTC","message":"powerpc/powernv: Return to cpu offline loop when finished in KVM guest\n\nWhen a secondary hardware thread has finished running a KVM guest, we\ncurrently put that thread into nap mode using a nap instruction in\nthe KVM code.  This changes the code so that instead of doing a nap\ninstruction directly, we instead cause the call to power7_nap() that\nput the thread into nap mode to return.  The reason for doing this is\nto avoid having the KVM code having to know what low-power mode to\nput the thread into.\n\nIn the case of a secondary thread used to run a KVM guest, the thread\nwill be offline from the point of view of the host kernel, and the\nrelevant power7_nap() call is the one in pnv_smp_cpu_disable().\nIn this case we don't want to clear pending IPIs in the offline loop\nin that function, since that might cause us to miss the wakeup for\nthe next time the thread needs to run a guest.  To tell whether or\nnot to clear the interrupt, we use the SRR1 value returned from\npower7_nap(), and check if i","insertions":68,"deletions":25,"filepaths":{"arch/powerpc/include/asm/processor.h":{"insertions":1,"deletions":1},"arch/powerpc/kernel/exceptions-64s.S":{"insertions":2,"deletions":0},"arch/powerpc/kernel/idle_power7.S":{"insertions":10,"deletions":2},"arch/powerpc/kvm/book3s_hv_rmhandlers.S":{"insertions":37,"deletions":17},"arch/powerpc/platforms/powernv/smp.c":{"insertions":18,"deletions":5}}},"e0b7ec058c0eb7ba8d5d937d81de2bd16db6970e":{"author":"Paul Mackerras","email":"paulus@samba.org","date":"2014-01-08 10:25:20 UTC","message":"KVM: PPC: Book3S HV: Align physical and virtual CPU thread numbers\n\nOn a threaded processor such as POWER7, we group VCPUs into virtual\ncores and arrange that the VCPUs in a virtual core run on the same\nphysical core.  Currently we don't enforce any correspondence between\nvirtual thread numbers within a virtual core and physical thread\nnumbers.  Physical threads are allocated starting at 0 on a first-come\nfirst-served basis to runnable virtual threads (VCPUs).\n\nPOWER8 implements a new \"msgsndp\" instruction which guest kernels can\nuse to interrupt other threads in the same core or sub-core.  Since\nthe instruction takes the destination physical thread ID as a parameter,\nit becomes necessary to align the physical thread IDs with the virtual\nthread IDs, that is, to make sure virtual thread N within a virtual\ncore always runs on physical thread N.\n\nThis means that it's possible that thread 0, which is where we call\n__kvmppc_vcore_entry, may end up running some other vcpu than the\none whose t","insertions":397,"deletions":337,"filepaths":{"arch/powerpc/include/asm/kvm_book3s_asm.h":{"insertions":1,"deletions":0},"arch/powerpc/include/asm/kvm_host.h":{"insertions":2,"deletions":0},"arch/powerpc/kernel/asm-offsets.c":{"insertions":2,"deletions":1},"arch/powerpc/kvm/book3s_hv.c":{"insertions":17,"deletions":29},"arch/powerpc/kvm/book3s_hv_interrupts.S":{"insertions":2,"deletions":4},"arch/powerpc/kvm/book3s_hv_rmhandlers.S":{"insertions":373,"deletions":303}}},"fd17dc7b9a8d57150ee0121c4c83edbb7e26eece":{"author":"Preeti U Murthy","email":"preeti@linux.vnet.ibm.com","date":"2014-04-11 10:31:58 UTC","message":"ppc/kvm: Set the runlatch bit of a CPU just before starting guest\n\nThe secondary threads in the core are kept offline before launching guests\nin kvm on powerpc: \"371fefd6f2dc4666:KVM: PPC: Allow book3s_hv guests to use\nSMT processor modes.\"\n\nHence their runlatch bits are cleared. When the secondary threads are called\nin to start a guest, their runlatch bits need to be set to indicate that they\nare busy. The primary thread has its runlatch bit set though, but there is no\nharm in setting this bit once again. Hence set the runlatch bit for all\nthreads before they start guest.\n\nSigned-off-by: Preeti U Murthy <preeti@linux.vnet.ibm.com>\nAcked-by: Paul Mackerras <paulus@samba.org>\nReviewed-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>\nSigned-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>","insertions":6,"deletions":0,"filepaths":{"arch/powerpc/kvm/book3s_hv_rmhandlers.S":{"insertions":6,"deletions":0}}},"9d29250136f60438fc0839871bae0a0e9cbbd47e":{"author":"Nicholas Piggin","email":"npiggin@gmail.com","date":"2017-06-13 13:05:51 UTC","message":"powerpc/64s/idle: Avoid SRR usage in idle sleep/wake paths\n\nIdle code now always runs at the 0xc... effective address whether\nin real or virtual mode. This means rfid can be ditched, along\nwith a lot of SRR manipulations.\n\nIn the wakeup path, carry SRR1 around in r12. Use mtmsrd to change\nMSR states as required.\n\nThis also balances the return prediction for the idle call, by\ndoing blr rather than rfid to return to the idle caller.\n\nOn POWER9, 2-process context switch on different cores, with snooze\ndisabled, increases performance by 2%.\n\nSigned-off-by: Nicholas Piggin <npiggin@gmail.com>\n[mpe: Incorporate v2 fixes from Nick]\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>","insertions":38,"deletions":32,"filepaths":{"arch/powerpc/kernel/exceptions-64s.S":{"insertions":1,"deletions":0},"arch/powerpc/kernel/idle_book3s.S":{"insertions":27,"deletions":30},"arch/powerpc/kvm/book3s_hv_rmhandlers.S":{"insertions":10,"deletions":2}}},"f0888f70151c7f53de2b45ee20ff1905837943e8":{"author":"Paul Mackerras","email":"paulus@samba.org","date":"2012-02-03 00:54:17 UTC","message":"KVM: PPC: Book3S HV: Make secondary threads more robust against stray IPIs\n\nCurrently on POWER7, if we are running the guest on a core and we don't\nneed all the hardware threads, we do nothing to ensure that the unused\nthreads aren't executing in the kernel (other than checking that they\nare offline).  We just assume they're napping and we don't do anything\nto stop them trying to enter the kernel while the guest is running.\nThis means that a stray IPI can wake up the hardware thread and it will\nthen try to enter the kernel, but since the core is in guest context,\nit will execute code from the guest in hypervisor mode once it turns the\nMMU on, which tends to lead to crashes or hangs in the host.\n\nThis fixes the problem by adding two new one-byte flags in the\nkvmppc_host_state structure in the PACA which are used to interlock\nbetween the primary thread and the unused secondary threads when entering\nthe guest.  With these flags, the primary thread can ensure that the\nunused secondaries are","insertions":124,"deletions":46,"filepaths":{"arch/powerpc/include/asm/kvm_book3s_asm.h":{"insertions":8,"deletions":0},"arch/powerpc/kernel/asm-offsets.c":{"insertions":2,"deletions":0},"arch/powerpc/kernel/exceptions-64s.S":{"insertions":7,"deletions":5},"arch/powerpc/kernel/idle_power7.S":{"insertions":7,"deletions":0},"arch/powerpc/kvm/book3s_hv.c":{"insertions":46,"deletions":3},"arch/powerpc/kvm/book3s_hv_rmhandlers.S":{"insertions":54,"deletions":38}}},"1db365258ad9c3624897f48c764f8c557f492b26":{"author":"Anshuman Khandual","email":"khandual@linux.vnet.ibm.com","date":"2015-05-21 06:43:03 UTC","message":"powerpc/kernel: Rename PACA_DSCR to PACA_DSCR_DEFAULT\n\nPACA_DSCR offset macro tracks dscr_default element in the paca\nstructure. Better change the name of this macro to match that of the\ndata element it tracks. Makes the code more readable.\n\nSigned-off-by: Anshuman Khandual <khandual@linux.vnet.ibm.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>","insertions":5,"deletions":5,"filepaths":{"arch/powerpc/kernel/asm-offsets.c":{"insertions":1,"deletions":1},"arch/powerpc/kernel/entry_64.S":{"insertions":1,"deletions":1},"arch/powerpc/kernel/tm.S":{"insertions":2,"deletions":2},"arch/powerpc/kvm/book3s_hv_rmhandlers.S":{"insertions":1,"deletions":1}}},"a3727a8bac0a9e77c70820655fd8715523ba3db7":{"author":"Paul Moore","email":"paul@paul-moore.com","date":"2021-09-23 13:50:11 UTC","message":"selinux,smack: fix subjective/objective credential use mixups\n\nJann Horn reported a problem with commit eb1231f73c4d (\"selinux:\nclarify task subjective and objective credentials\") where some LSM\nhooks were attempting to access the subjective credentials of a task\nother than the current task.  Generally speaking, it is not safe to\naccess another task's subjective credentials and doing so can cause\na number of problems.\n\nFurther, while looking into the problem, I realized that Smack was\nsuffering from a similar problem brought about by a similar commit\n1fb057dcde11 (\"smack: differentiate between subjective and objective\ntask credentials\").\n\nThis patch addresses this problem by restoring the use of the task's\nobjective credentials in those cases where the task is other than the\ncurrent executing task.  Not only does this resolve the problem\nreported by Jann, it is arguably the correct thing to do in these\ncases.\n\nCc: stable@vger.kernel.org\nFixes: eb1231f73c4d (\"selinux: clarify task subjec","insertions":4,"deletions":4,"filepaths":{"security/selinux/hooks.c":{"insertions":2,"deletions":2},"security/smack/smack_lsm.c":{"insertions":2,"deletions":2}}},"eb1231f73c4d7dc26db55e08c070e6526eaf7ee5":{"author":"Paul Moore","email":"paul@paul-moore.com","date":"2021-02-18 20:13:40 UTC","message":"selinux: clarify task subjective and objective credentials\n\nSELinux has a function, task_sid(), which returns the task's\nobjective credentials, but unfortunately is used in a few places\nwhere the subjective task credentials should be used.  Most notably\nin the new security_task_getsecid_subj() LSM hook.\n\nThis patch fixes this and attempts to make things more obvious by\nintroducing a new function, task_sid_subj(), and renaming the\nexisting task_sid() function to task_sid_obj().\n\nThis patch also adds an interesting function in task_sid_binder().\nThe task_sid_binder() function has a comment which hopefully\ndescribes it's reason for being, but it basically boils down to the\nsimple fact that we can't safely access another task's subjective\ncredentials so in the case of binder we need to stick with the\nobjective credentials regardless.\n\nReviewed-by: Richard Guy Briggs <rgb@redhat.com>\nSigned-off-by: Paul Moore <paul@paul-moore.com>","insertions":73,"deletions":39,"filepaths":{"security/selinux/hooks.c":{"insertions":73,"deletions":39}}},"1fb057dcde11b355fc9acde95cee3b2caa5dafb0":{"author":"Paul Moore","email":"paul@paul-moore.com","date":"2021-02-19 20:04:58 UTC","message":"smack: differentiate between subjective and objective task credentials\n\nWith the split of the security_task_getsecid() into subjective and\nobjective variants it's time to update Smack to ensure it is using\nthe correct task creds.\n\nAcked-by: Casey Schaufler <casey@schaufler-ca.com>\nReviewed-by: Richard Guy Briggs <rgb@redhat.com>\nReviewed-by: John Johansen <john.johansen@canonical.com>\nSigned-off-by: Paul Moore <paul@paul-moore.com>","insertions":44,"deletions":14,"filepaths":{"security/smack/smack.h":{"insertions":17,"deletions":1},"security/smack/smack_lsm.c":{"insertions":27,"deletions":13}}},"fa40d9734a57bcbfa79a280189799f76c88f7bb0":{"author":"Max VA","email":"maxv@sentinelone.com","date":"2021-10-25 15:31:53 UTC","message":"tipc: fix size validations for the MSG_CRYPTO type\n\nThe function tipc_crypto_key_rcv is used to parse MSG_CRYPTO messages\nto receive keys from other nodes in the cluster in order to decrypt any\nfurther messages from them.\nThis patch verifies that any supplied sizes in the message body are\nvalid for the received message.\n\nFixes: 1ef6f7c9390f (\"tipc: add automatic session key exchange\")\nSigned-off-by: Max VA <maxv@sentinelone.com>\nAcked-by: Ying Xue <ying.xue@windriver.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nAcked-by: Jon Maloy <jmaloy@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":21,"deletions":11,"filepaths":{"net/tipc/crypto.c":{"insertions":21,"deletions":11}}},"1ef6f7c9390ff5308c940ff8d0a53533a4673ad9":{"author":"Tuong Lien","email":"tuong.t.lien@dektech.com.au","date":"2020-09-18 01:17:28 UTC","message":"tipc: add automatic session key exchange\n\nWith support from the master key option in the previous commit, it\nbecomes easy to make frequent updates/exchanges of session keys between\nauthenticated cluster nodes.\nBasically, there are two situations where the key exchange will take in\nplace:\n\n- When a new node joins the cluster (with the master key), it will need\n  to get its peer's TX key, so that be able to decrypt further messages\n  from that peer.\n\n- When a new session key is generated (by either user manual setting or\n  later automatic rekeying feature), the key will be distributed to all\n  peer nodes in the cluster.\n\nA key to be exchanged is encapsulated in the data part of a 'MSG_CRYPTO\n/KEY_DISTR_MSG' TIPC v2 message, then xmit-ed as usual and encrypted by\nusing the master key before sending out. Upon receipt of the message it\nwill be decrypted in the same way as regular messages, then attached as\nthe sender's RX key in the receiver node.\n\nIn this way, the key exchange is reliable b","insertions":405,"deletions":20,"filepaths":{"net/tipc/crypto.c":{"insertions":345,"deletions":19},"net/tipc/crypto.h":{"insertions":24,"deletions":0},"net/tipc/link.c":{"insertions":5,"deletions":0},"net/tipc/msg.h":{"insertions":4,"deletions":0},"net/tipc/node.c":{"insertions":16,"deletions":1},"net/tipc/node.h":{"insertions":2,"deletions":0},"net/tipc/sysctl.c":{"insertions":9,"deletions":0}}},"1f3e2e97c003f80c4b087092b225c8787ff91e4d":{"author":"Xiaolong Huang","email":"butterflyhuangxx@gmail.com","date":"2021-10-08 06:58:30 UTC","message":"isdn: cpai: check ctr->cnr to avoid array index out of bound\n\nThe cmtp_add_connection() would add a cmtp session to a controller\nand run a kernel thread to process cmtp.\n\n\t__module_get(THIS_MODULE);\n\tsession->task = kthread_run(cmtp_session, session, \"kcmtpd_ctr_%d\",\n\t\t\t\t\t\t\t\tsession->num);\n\nDuring this process, the kernel thread would call detach_capi_ctr()\nto detach a register controller. if the controller\nwas not attached yet, detach_capi_ctr() would\ntrigger an array-index-out-bounds bug.\n\n[   46.866069][ T6479] UBSAN: array-index-out-of-bounds in\ndrivers/isdn/capi/kcapi.c:483:21\n[   46.867196][ T6479] index -1 is out of range for type 'capi_ctr *[32]'\n[   46.867982][ T6479] CPU: 1 PID: 6479 Comm: kcmtpd_ctr_0 Not tainted\n5.15.0-rc2+ #8\n[   46.869002][ T6479] Hardware name: QEMU Standard PC (i440FX + PIIX,\n1996), BIOS 1.14.0-2 04/01/2014\n[   46.870107][ T6479] Call Trace:\n[   46.870473][ T6479]  dump_stack_lvl+0x57/0x7d\n[   46.870974][ T6479]  ubsan_epilogue+0x5/0x40\n[   46.871458][ T","insertions":5,"deletions":0,"filepaths":{"drivers/isdn/capi/kcapi.c":{"insertions":5,"deletions":0}}},"0ca3a017a7373a4545dd7b345a8a0cecc16bc7e2":{"author":"Jan Kiszka","email":"jan.kiszka@web.de","date":"2010-02-08 10:12:14 UTC","message":"CAPI: Rework locking of controller data structures\n\nThis patch applies the mutex so far only protecting the controller list\nto (almost) all accesses of controller data structures. It also reworks\nwaiting on state changes in old_capi_manufacturer so that it no longer\npoll and holds a module reference to the controller owner while waiting\n(the latter was partly done already). Modification and checking of the\nblocked state remains racy by design, the caller is responsible for\ndealing with this.\n\nSigned-off-by: Jan Kiszka <jan.kiszka@web.de>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":217,"deletions":89,"filepaths":{"drivers/isdn/capi/kcapi.c":{"insertions":205,"deletions":86},"drivers/isdn/capi/kcapi.h":{"insertions":4,"deletions":1},"drivers/isdn/capi/kcapi_proc.c":{"insertions":5,"deletions":0},"include/linux/isdn/capilli.h":{"insertions":3,"deletions":2}}},"b922f622592af76b57cbc566eaeccda0b31a3496":{"author":"Zekun Shen","email":"bruceshenzk@gmail.com","date":"2021-11-14 03:24:40 UTC","message":"atlantic: Fix OOB read and write in hw_atl_utils_fw_rpc_wait\n\nThis bug report shows up when running our research tools. The\nreports is SOOB read, but it seems SOOB write is also possible\na few lines below.\n\nIn details, fw.len and sw.len are inputs coming from io. A len\nover the size of self->rpc triggers SOOB. The patch fixes the\nbugs by adding sanity checks.\n\nThe bugs are triggerable with compromised/malfunctioning devices.\nThey are potentially exploitable given they first leak up to\n0xffff bytes and able to overwrite the region later.\n\nThe patch is tested with QEMU emulater.\nThis is NOT tested with a real device.\n\nAttached is the log we found by fuzzing.\n\nBUG: KASAN: slab-out-of-bounds in\n\thw_atl_utils_fw_upload_dwords+0x393/0x3c0 [atlantic]\nRead of size 4 at addr ffff888016260b08 by task modprobe/213\nCPU: 0 PID: 213 Comm: modprobe Not tainted 5.6.0 #1\nCall Trace:\n dump_stack+0x76/0xa0\n print_address_description.constprop.0+0x16/0x200\n ? hw_atl_utils_fw_upload_dwords+0x393/0x3c0 [atla","insertions":10,"deletions":0,"filepaths":{"drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c":{"insertions":10,"deletions":0}}},"98c4c20142e985faeb693d8546e53d2ff7eebe26":{"author":"David VomLehn","email":"vomlehn@texas.net","date":"2017-01-24 06:09:16 UTC","message":"net: ethernet: aquantia: Atlantic hardware abstraction layer\n\nAdd common functions for Atlantic hardware abstraction layer.\n\nSigned-off-by: Alexander Loktionov <Alexander.Loktionov@aquantia.com>\nSigned-off-by: Dmitrii Tarakanov <Dmitrii.Tarakanov@aquantia.com>\nSigned-off-by: Pavel Belous <Pavel.Belous@aquantia.com>\nSigned-off-by: Dmitry Bezrukov <Dmitry.Bezrukov@aquantia.com>\nSigned-off-by: David M. VomLehn <vomlehn@texas.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":780,"deletions":0,"filepaths":{"drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c":{"insertions":570,"deletions":0},"drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h":{"insertions":210,"deletions":0}}},"e7b5f97e6574dc4918e375d5f8d24ec31653cd6d":{"author":"Igor Russkikh","email":"irusskikh@marvell.com","date":"2020-02-14 15:44:52 UTC","message":"net: atlantic: check rpc result and wait for rpc address\n\nArtificial HW reliability tests revealed a possible hangup in\nthe driver. Normally, when device disappears from bus, all\nregister reads returns 0xFFFFFFFF.\n\nAt remote procedure invocation towards FW there is a logic\nwhere result is compared with -1 in a loop.\nThat caused an infinite loop if hardware due to some issues\ndisappears from bus.\n\nAdd extra result checks to prevent this.\n\nSigned-off-by: Dmitry Bogdanov <dbogdanov@marvell.com>\nSigned-off-by: Igor Russkikh <irusskikh@marvell.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":17,"deletions":2,"filepaths":{"drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c":{"insertions":17,"deletions":2}}},"1a713f87a0914ccaa9532e61ee73ac691c1f9e3d":{"author":"Igor Russkikh","email":"igor.russkikh@aquantia.com","date":"2018-01-15 13:41:15 UTC","message":"net: aquantia: Cleanup hardware access modules\n\nUse direct aq_hw_s *self reference where possible\nEliminate useless abstraction PHAL, duplicated structures definitions,\nSimplify nic config structure creation and management.\n\nSigned-off-by: Igor Russkikh <igor.russkikh@aquantia.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":71,"deletions":97,"filepaths":{"drivers/net/ethernet/aquantia/atlantic/aq_hw.h":{"insertions":17,"deletions":5},"drivers/net/ethernet/aquantia/atlantic/aq_nic.c":{"insertions":4,"deletions":4},"drivers/net/ethernet/aquantia/atlantic/aq_nic.h":{"insertions":1,"deletions":0},"drivers/net/ethernet/aquantia/atlantic/aq_pci_func.h":{"insertions":1,"deletions":0},"drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c":{"insertions":9,"deletions":18},"drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c":{"insertions":9,"deletions":17},"drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c":{"insertions":25,"deletions":29},"drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h":{"insertions":5,"deletions":24}}},"9056d6489f5a41cfbb67f719d2c0ce61ead72d9f":{"author":"Chao Yu","email":"chao@kernel.org","date":"2021-12-06 14:44:19 UTC","message":"f2fs: fix to do sanity check on inode type during garbage collection\n\nAs report by Wenqing Liu in bugzilla:\n\nhttps://bugzilla.kernel.org/show_bug.cgi?id=215231\n\n- Overview\nkernel NULL pointer dereference triggered  in folio_mark_dirty() when mount and operate on a crafted f2fs image\n\n- Reproduce\ntested on kernel 5.16-rc3, 5.15.X under root\n\n1. mkdir mnt\n2. mount -t f2fs tmp1.img mnt\n3. touch tmp\n4. cp tmp mnt\n\nF2FS-fs (loop0): sanity_check_inode: inode (ino=49) extent info [5942, 4294180864, 4] is incorrect, run fsck to fix\nF2FS-fs (loop0): f2fs_check_nid_range: out-of-range nid=31340049, run fsck to fix.\nBUG: kernel NULL pointer dereference, address: 0000000000000000\n folio_mark_dirty+0x33/0x50\n move_data_page+0x2dd/0x460 [f2fs]\n do_garbage_collect+0xc18/0x16a0 [f2fs]\n f2fs_gc+0x1d3/0xd90 [f2fs]\n f2fs_balance_fs+0x13a/0x570 [f2fs]\n f2fs_create+0x285/0x840 [f2fs]\n path_openat+0xe6d/0x1040\n do_filp_open+0xc5/0x140\n do_sys_openat2+0x23a/0x310\n do_sys_open+0x57/0x80\n\nThe root cause is for ","insertions":2,"deletions":1,"filepaths":{"fs/f2fs/gc.c":{"insertions":2,"deletions":1}}},"132e3209789c647e37dc398ef36af4de13f104b4":{"author":"Jaegeuk Kim","email":"jaegeuk@kernel.org","date":"2021-06-22 19:56:44 UTC","message":"f2fs: remove false alarm on iget failure during GC\n\nThis patch removes setting SBI_NEED_FSCK when GC gets an error on f2fs_iget,\nsince f2fs_iget can give ENOMEM and others by race condition.\nIf we set this critical fsck flag, we'll get EIO during fsync via the below\ncode path.\n\nIn f2fs_inplace_write_data(),\n\n\tif (is_sbi_flag_set(sbi, SBI_NEED_FSCK) || f2fs_cp_error(sbi)) {\n\t\terr = -EIO;\n\t\tgoto drop_bio;\n\t}\n\nFixes: 9557727876674 (\"f2fs: drop inplace IO if fs status is abnormal\")\nReviewed-by: Chao Yu <chao@kernel.org>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>","insertions":1,"deletions":3,"filepaths":{"fs/f2fs/gc.c":{"insertions":1,"deletions":3}}},"bcd0f93353326954817a4f9fa55ec57fb38acbb0":{"author":"Hangyu Hua","email":"hbh25y@gmail.com","date":"2021-12-09 08:28:39 UTC","message":"phonet: refcount leak in pep_sock_accep\n\nsock_hold(sk) is invoked in pep_sock_accept(), but __sock_put(sk) is not\ninvoked in subsequent failure branches(pep_accept_conn() != 0).\n\nSigned-off-by: Hangyu Hua <hbh25y@gmail.com>\nLink: https://lore.kernel.org/r/20211209082839.33985-1-hbh25y@gmail.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>","insertions":1,"deletions":0,"filepaths":{"net/phonet/pep.c":{"insertions":1,"deletions":0}}},"f7ae8d59f66154df0424fd94035c89981fed3379":{"author":"Rémi Denis-Courmont","email":"remi.denis-courmont@nokia.com","date":"2011-03-08 22:44:10 UTC","message":"Phonet: allocate sock from accept syscall rather than soft IRQ\n\nThis moves most of the accept logic to process context like other\nsocket stacks do. Then we can use a few more common socket helpers\nand simplify a bit.\n\nSigned-off-by: Rémi Denis-Courmont <remi.denis-courmont@nokia.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":121,"deletions":174,"filepaths":{"include/net/phonet/pep.h":{"insertions":0,"deletions":1},"net/phonet/pep.c":{"insertions":117,"deletions":167},"net/phonet/socket.c":{"insertions":4,"deletions":6}}},"9641458d3ec42def729fde64669abf07f3220cd5":{"author":"Rémi Denis-Courmont","email":"remi.denis-courmont@nokia.com","date":"2008-10-05 18:15:13 UTC","message":"Phonet: Pipe End Point for Phonet Pipes protocol\n\nThis protocol provides some connection handling and negotiated\ncongestion control. Nokia cellular modems use it for bulk transfers.\nIt provides packet boundaries (hence SOCK_SEQPACKET). Congestion\ncontrol is per packet rather per byte, so we do not re-use the\ngeneric socket memory accounting.\n\nSigned-off-by: Rémi Denis-Courmont <remi.denis-courmont@nokia.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":1031,"deletions":2,"filepaths":{"include/linux/phonet.h":{"insertions":3,"deletions":1},"include/net/phonet/pep.h":{"insertions":114,"deletions":0},"net/phonet/Makefile":{"insertions":3,"deletions":1},"net/phonet/af_phonet.c":{"insertions":3,"deletions":0},"net/phonet/pep.c":{"insertions":908,"deletions":0}}},"3cf2b61eb06765e27fec6799292d9fb46d0b7e60":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-12-15 22:02:19 UTC","message":"bpf: Fix signed bounds propagation after mov32\n\nFor the case where both s32_{min,max}_value bounds are positive, the\n__reg_assign_32_into_64() directly propagates them to their 64 bit\ncounterparts, otherwise it pessimises them into [0,u32_max] universe and\ntries to refine them later on by learning through the tnum as per comment\nin mentioned function. However, that does not always happen, for example,\nin mov32 operation we call zext_32_to_64(dst_reg) which invokes the\n__reg_assign_32_into_64() as is without subsequent bounds update as\nelsewhere thus no refinement based on tnum takes place.\n\nThus, not calling into the __update_reg_bounds() / __reg_deduce_bounds() /\n__reg_bound_offset() triplet as we do, for example, in case of ALU ops via\nadjust_scalar_min_max_vals(), will lead to more pessimistic bounds when\ndumping the full register state:\n\nBefore fix:\n\n  0: (b4) w0 = -1\n  1: R0_w=invP4294967295\n     (id=0,imm=ffffffff,\n      smin_value=4294967295,smax_value=4294967295,\n      umin_valu","insertions":4,"deletions":0,"filepaths":{"kernel/bpf/verifier.c":{"insertions":4,"deletions":0}}},"b1a7288dedc6caf9023f2676b4f5ed34cf0d4029":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-12-15 23:48:54 UTC","message":"bpf, selftests: Add test case trying to taint map value pointer\n\nAdd a test case which tries to taint map value pointer arithmetic into a\nunknown scalar with subsequent export through the map.\n\nBefore fix:\n\n  # ./test_verifier 1186\n  #1186/u map access: trying to leak tained dst reg FAIL\n  Unexpected success to load!\n  verification time 24 usec\n  stack depth 8\n  processed 15 insns (limit 1000000) max_states_per_insn 0 total_states 1 peak_states 1 mark_read 1\n  #1186/p map access: trying to leak tained dst reg FAIL\n  Unexpected success to load!\n  verification time 8 usec\n  stack depth 8\n  processed 15 insns (limit 1000000) max_states_per_insn 0 total_states 1 peak_states 1 mark_read 1\n  Summary: 0 PASSED, 0 SKIPPED, 2 FAILED\n\nAfter fix:\n\n  # ./test_verifier 1186\n  #1186/u map access: trying to leak tained dst reg OK\n  #1186/p map access: trying to leak tained dst reg OK\n  Summary: 2 PASSED, 0 SKIPPED, 0 FAILED\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: John Fasta","insertions":23,"deletions":0,"filepaths":{"tools/testing/selftests/bpf/verifier/value_ptr_arith.c":{"insertions":23,"deletions":0}}},"e572ff80f05c33cd0cb4860f864f5c9c044280b6":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-12-15 22:28:48 UTC","message":"bpf: Make 32->64 bounds propagation slightly more robust\n\nMake the bounds propagation in __reg_assign_32_into_64() slightly more\nrobust and readable by aligning it similarly as we did back in the\n__reg_combine_64_into_32() counterpart. Meaning, only propagate or\npessimize them as a smin/smax pair.\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: John Fastabend <john.fastabend@gmail.com>\nAcked-by: Alexei Starovoitov <ast@kernel.org>","insertions":15,"deletions":9,"filepaths":{"kernel/bpf/verifier.c":{"insertions":15,"deletions":9}}},"e434b8cdf788568ba65a0a0fd9f3cb41f3ca1803":{"author":"Jiong Wang","email":"jiong.wang@netronome.com","date":"2018-12-07 17:16:18 UTC","message":"bpf: relax verifier restriction on BPF_MOV | BPF_ALU\n\nCurrently, the destination register is marked as unknown for 32-bit\nsub-register move (BPF_MOV | BPF_ALU) whenever the source register type is\nSCALAR_VALUE.\n\nThis is too conservative that some valid cases will be rejected.\nEspecially, this may turn a constant scalar value into unknown value that\ncould break some assumptions of verifier.\n\nFor example, test_l4lb_noinline.c has the following C code:\n\n    struct real_definition *dst\n\n1:  if (!get_packet_dst(&dst, &pckt, vip_info, is_ipv6))\n2:    return TC_ACT_SHOT;\n3:\n4:  if (dst->flags & F_IPV6) {\n\nget_packet_dst is responsible for initializing \"dst\" into valid pointer and\nreturn true (1), otherwise return false (0). The compiled instruction\nsequence using alu32 will be:\n\n  412: (54) (u32) r7 &= (u32) 1\n  413: (bc) (u32) r0 = (u32) r7\n  414: (95) exit\n\ninsn 413, a BPF_MOV | BPF_ALU, however will turn r0 into unknown value even\nr7 contains SCALAR_VALUE 1.\n\nThis causes trouble when verifi","insertions":25,"deletions":4,"filepaths":{"kernel/bpf/verifier.c":{"insertions":12,"deletions":4},"tools/testing/selftests/bpf/test_verifier.c":{"insertions":13,"deletions":0}}},"1be7f75d1668d6296b80bf35dcf6762393530afc":{"author":"Alexei Starovoitov","email":"ast@plumgrid.com","date":"2015-10-08 05:23:21 UTC","message":"bpf: enable non-root eBPF programs\n\nIn order to let unprivileged users load and execute eBPF programs\nteach verifier to prevent pointer leaks.\nVerifier will prevent\n- any arithmetic on pointers\n  (except R10+Imm which is used to compute stack addresses)\n- comparison of pointers\n  (except if (map_value_ptr == 0) ... )\n- passing pointers to helper functions\n- indirectly passing pointers in stack to helper functions\n- returning pointer from bpf program\n- storing pointers into ctx or maps\n\nSpill/fill of pointers into stack is allowed, but mangling\nof pointers stored in the stack or reading them byte by byte is not.\n\nWithin bpf programs the pointers do exist, since programs need to\nbe able to access maps, pass skb pointer to LD_ABS insns, etc\nbut programs cannot pass such pointer values to the outside\nor obfuscate them.\n\nOnly allow BPF_PROG_TYPE_SOCKET_FILTER unprivileged programs,\nso that socket filters (tcpdump), af_packet (quic acceleration)\nand future kcm can use it.\ntracing and tc cls/a","insertions":120,"deletions":15,"filepaths":{"include/linux/bpf.h":{"insertions":2,"deletions":0},"kernel/bpf/syscall.c":{"insertions":6,"deletions":5},"kernel/bpf/verifier.c":{"insertions":97,"deletions":9},"kernel/sysctl.c":{"insertions":13,"deletions":0},"net/core/filter.c":{"insertions":2,"deletions":1}}},"d56b74b9e1b8d747171dc6ff60315c00c41562ce":{"author":"Yonghong Song","email":"yhs@fb.com","date":"2020-06-18 23:46:32 UTC","message":"tools/bpf: Add verifier tests for 32bit pointer/scalar arithmetic\n\nAdded two test_verifier subtests for 32bit pointer/scalar arithmetic\nwith BPF_SUB operator. They are passing verifier now.\n\nSigned-off-by: Yonghong Song <yhs@fb.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20200618234632.3321367-1-yhs@fb.com","insertions":38,"deletions":0,"filepaths":{"tools/testing/selftests/bpf/verifier/value_ptr_arith.c":{"insertions":38,"deletions":0}}},"3a71dc366d4aa51a22f385445f2862231d3fda3b":{"author":"John Fastabend","email":"john.fastabend@gmail.com","date":"2020-05-29 17:28:40 UTC","message":"bpf: Fix a verifier issue when assigning 32bit reg states to 64bit ones\n\nWith the latest trunk llvm (llvm 11), I hit a verifier issue for\ntest_prog subtest test_verif_scale1.\n\nThe following simplified example illustrate the issue:\n    w9 = 0  /* R9_w=inv0 */\n    r8 = *(u32 *)(r1 + 80)  /* __sk_buff->data_end */\n    r7 = *(u32 *)(r1 + 76)  /* __sk_buff->data */\n    ......\n    w2 = w9 /* R2_w=inv0 */\n    r6 = r7 /* R6_w=pkt(id=0,off=0,r=0,imm=0) */\n    r6 += r2 /* R6_w=inv(id=0) */\n    r3 = r6 /* R3_w=inv(id=0) */\n    r3 += 14 /* R3_w=inv(id=0) */\n    if r3 > r8 goto end\n    r5 = *(u32 *)(r6 + 0) /* R6_w=inv(id=0) */\n       <== error here: R6 invalid mem access 'inv'\n    ...\n  end:\n\nIn real test_verif_scale1 code, \"w9 = 0\" and \"w2 = w9\" are in\ndifferent basic blocks.\n\nIn the above, after \"r6 += r2\", r6 becomes a scalar, which eventually\ncaused the memory access error. The correct register state should be\na pkt pointer.\n\nThe inprecise register state starts at \"w2 = w9\".\nThe 32bit register ","insertions":5,"deletions":5,"filepaths":{"kernel/bpf/verifier.c":{"insertions":5,"deletions":5}}},"5598b24efaf4892741c798b425d543e4bed357a1":{},"5f9562ebe710c307adc5f666bf1a2162ee7977c0":{"author":"Hangyu Hua","email":"hbh25y@gmail.com","date":"2021-12-14 10:46:59 UTC","message":"rds: memory leak in __rds_conn_create()\n\n__rds_conn_create() did not release conn->c_path when loop_trans != 0 and\ntrans->t_prefer_loopback != 0 and is_outgoing == 0.\n\nFixes: aced3ce57cd3 (\"RDS tcp loopback connection can hang\")\nSigned-off-by: Hangyu Hua <hbh25y@gmail.com>\nReviewed-by: Sharath Srinivasan <sharath.srinivasan@oracle.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":1,"deletions":0,"filepaths":{"net/rds/connection.c":{"insertions":1,"deletions":0}}},"aced3ce57cd37b5ca332bcacd370d01f5a8c5371":{"author":"Rao Shoaib","email":"rao.shoaib@oracle.com","date":"2021-05-21 18:08:06 UTC","message":"RDS tcp loopback connection can hang\n\nWhen TCP is used as transport and a program on the\nsystem connects to RDS port 16385, connection is\naccepted but denied per the rules of RDS. However,\nRDS connections object is left in the list. Next\nloopback connection will select that connection\nobject as it is at the head of list. The connection\nattempt will hang as the connection object is set\nto connect over TCP which is not allowed\n\nThe issue can be reproduced easily, use rds-ping\nto ping a local IP address. After that use any\nprogram like ncat to connect to the same IP\naddress and port 16385. This will hang so ctrl-c out.\nNow try rds-ping, it will hang.\n\nTo fix the issue this patch adds checks to disallow\nthe connection object creation and destroys the\nconnection object.\n\nSigned-off-by: Rao Shoaib <rao.shoaib@oracle.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":27,"deletions":9,"filepaths":{"net/rds/connection.c":{"insertions":17,"deletions":6},"net/rds/tcp.c":{"insertions":2,"deletions":2},"net/rds/tcp.h":{"insertions":2,"deletions":1},"net/rds/tcp_listen.c":{"insertions":6,"deletions":0}}},"62f20e068ccc50d6ab66fdb72ba90da2b9418c99":{"author":"Willy Tarreau","email":"w@1wt.eu","date":"2021-05-29 11:07:46 UTC","message":"ipv6: use prandom_u32() for ID generation\n\nThis is a complement to commit aa6dd211e4b1 (\"inet: use bigger hash\ntable for IP ID generation\"), but focusing on some specific aspects\nof IPv6.\n\nContary to IPv4, IPv6 only uses packet IDs with fragments, and with a\nminimum MTU of 1280, it's much less easy to force a remote peer to\nproduce many fragments to explore its ID sequence. In addition packet\nIDs are 32-bit in IPv6, which further complicates their analysis. On\nthe other hand, it is often easier to choose among plenty of possible\nsource addresses and partially work around the bigger hash table the\ncommit above permits, which leaves IPv6 partially exposed to some\npossibilities of remote analysis at the risk of weakening some\nprotocols like DNS if some IDs can be predicted with a good enough\nprobability.\n\nGiven the wide range of permitted IDs, the risk of collision is extremely\nlow so there's no need to rely on the positive increment algorithm that\nis shared with the IPv4 code via ip_ident","insertions":5,"deletions":23,"filepaths":{"net/ipv6/output_core.c":{"insertions":5,"deletions":23}}},"df453700e8d81b1bdafdf684365ee2b9431fb702":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2019-03-27 19:40:33 UTC","message":"inet: switch IP ID generator to siphash\n\nAccording to Amit Klein and Benny Pinkas, IP ID generation is too weak\nand might be used by attackers.\n\nEven with recent net_hash_mix() fix (netns: provide pure entropy for net_hash_mix())\nhaving 64bit key and Jenkins hash is risky.\n\nIt is time to switch to siphash and its 128bit keys.\n\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: Amit Klein <aksecurity@gmail.com>\nReported-by: Benny Pinkas <benny@pinkas.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":30,"deletions":19,"filepaths":{"include/linux/siphash.h":{"insertions":5,"deletions":0},"include/net/netns/ipv4.h":{"insertions":2,"deletions":0},"net/ipv4/route.c":{"insertions":7,"deletions":5},"net/ipv6/output_core.c":{"insertions":16,"deletions":14}}},"0508c07f5e0c94f38afd5434e8b2a55b84553077":{"author":"Vlad Yasevich","email":"vyasevich@gmail.com","date":"2015-02-03 21:36:15 UTC","message":"ipv6: Select fragment id during UFO segmentation if not set.\n\nIf the IPv6 fragment id has not been set and we perform\nfragmentation due to UFO, select a new fragment id.\nWe now consider a fragment id of 0 as unset and if id selection\nprocess returns 0 (after all the pertrubations), we set it to\n0x80000000, thus giving us ample space not to create collisions\nwith the next packet we may have to fragment.\n\nWhen doing UFO integrity checking, we also select the\nfragment id if it has not be set yet.   This is stored into\nthe skb_shinfo() thus allowing UFO to function correclty.\n\nThis patch also removes duplicate fragment id generation code\nand moves ipv6_select_ident() into the header as it may be\nused during GSO.\n\nSigned-off-by: Vladislav Yasevich <vyasevic@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":47,"deletions":21,"filepaths":{"include/net/ipv6.h":{"insertions":3,"deletions":0},"net/ipv6/ip6_output.c":{"insertions":0,"deletions":14},"net/ipv6/output_core.c":{"insertions":35,"deletions":6},"net/ipv6/udp_offload.c":{"insertions":9,"deletions":1}}},"aa6dd211e4b1dde9d5dc25d699d35f789ae7eeba":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2021-03-24 21:53:37 UTC","message":"inet: use bigger hash table for IP ID generation\n\nIn commit 73f156a6e8c1 (\"inetpeer: get rid of ip_id_count\")\nI used a very small hash table that could be abused\nby patient attackers to reveal sensitive information.\n\nSwitch to a dynamic sizing, depending on RAM size.\n\nTypical big hosts will now use 128x more storage (2 MB)\nto get a similar increase in security and reduction\nof hash collisions.\n\nAs a bonus, use of alloc_large_system_hash() spreads\nallocated memory among all NUMA nodes.\n\nFixes: 73f156a6e8c1 (\"inetpeer: get rid of ip_id_count\")\nReported-by: Amit Klein <aksecurity@gmail.com>\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nCc: Willy Tarreau <w@1wt.eu>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":28,"deletions":14,"filepaths":{"net/ipv4/route.c":{"insertions":28,"deletions":14}}},"04ca6973f7c1a0d8537f2d9906a0cf8e69886d75":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2014-07-26 06:58:10 UTC","message":"ip: make IP identifiers less predictable\n\nIn \"Counting Packets Sent Between Arbitrary Internet Hosts\", Jeffrey and\nJedidiah describe ways exploiting linux IP identifier generation to\ninfer whether two machines are exchanging packets.\n\nWith commit 73f156a6e8c1 (\"inetpeer: get rid of ip_id_count\"), we\nchanged IP id generation, but this does not really prevent this\nside-channel technique.\n\nThis patch adds a random amount of perturbation so that IP identifiers\nfor a given destination [1] are no longer monotonically increasing after\nan idle period.\n\nNote that prandom_u32_max(1) returns 0, so if generator is used at most\nonce per jiffy, this patch inserts no hole in the ID suite and do not\nincrease collision probability.\n\nThis is jiffies based, so in the worst case (HZ=1000), the id can\nrollover after ~65 seconds of idle time, which should be fine.\n\nWe also change the hash used in __ip_select_ident() to not only hash\non daddr, but also saddr and protocol, so that ICMP probes can not be\nused t","insertions":32,"deletions":13,"filepaths":{"include/net/ip.h":{"insertions":1,"deletions":10},"net/ipv4/route.c":{"insertions":29,"deletions":3},"net/ipv6/ip6_output.c":{"insertions":2,"deletions":0}}},"355b590ca24a53f5e2f6999218b5321eaf730a7e":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2015-05-01 17:37:49 UTC","message":"ipv4: speedup ip_idents_reserve()\n\nUnder stress, ip_idents_reserve() is accessing a contended\ncache line twice, with non optimal MESI transactions.\n\nIf we place timestamps in separate location, we reduce this\npressure by ~50% and allow atomic_add_return() to issue\na Request for Ownership.\n\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":9,"deletions":11,"filepaths":{"net/ipv4/route.c":{"insertions":9,"deletions":11}}},"73f156a6e8c1074ac6327e0abd1169e95eb66463":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2014-06-02 12:26:03 UTC","message":"inetpeer: get rid of ip_id_count\n\nIdeally, we would need to generate IP ID using a per destination IP\ngenerator.\n\nlinux kernels used inet_peer cache for this purpose, but this had a huge\ncost on servers disabling MTU discovery.\n\n1) each inet_peer struct consumes 192 bytes\n\n2) inetpeer cache uses a binary tree of inet_peer structs,\n   with a nominal size of ~66000 elements under load.\n\n3) lookups in this tree are hitting a lot of cache lines, as tree depth\n   is about 20.\n\n4) If server deals with many tcp flows, we have a high probability of\n   not finding the inet_peer, allocating a fresh one, inserting it in\n   the tree with same initial ip_id_count, (cf secure_ip_id())\n\n5) We garbage collect inet_peer aggressively.\n\nIP ID generation do not have to be 'perfect'\n\nGoal is trying to avoid duplicates in a short period of time,\nso that reassembly units have a chance to complete reassembly of\nfragments belonging to one message before receiving other fragments\nwith a recycled ID.\n\nWe simply u","insertions":65,"deletions":155,"filepaths":{"drivers/net/ppp/pptp.c":{"insertions":1,"deletions":1},"include/net/inetpeer.h":{"insertions":3,"deletions":20},"include/net/ip.h":{"insertions":23,"deletions":17},"include/net/ipv6.h":{"insertions":0,"deletions":2},"include/net/secure_seq.h":{"insertions":0,"deletions":2},"net/core/secure_seq.c":{"insertions":0,"deletions":25},"net/ipv4/igmp.c":{"insertions":2,"deletions":2},"net/ipv4/inetpeer.c":{"insertions":0,"deletions":18},"net/ipv4/ip_output.c":{"insertions":3,"deletions":4},"net/ipv4/ip_tunnel_core.c":{"insertions":1,"deletions":1},"net/ipv4/ipmr.c":{"insertions":1,"deletions":1},"net/ipv4/raw.c":{"insertions":1,"deletions":1},"net/ipv4/route.c":{"insertions":16,"deletions":29},"net/ipv4/xfrm4_mode_tunnel.c":{"insertions":1,"deletions":1},"net/ipv6/ip6_output.c":{"insertions":12,"deletions":0},"net/ipv6/output_core.c":{"insertions":0,"deletions":30},"net/netfilter/ipvs/ip_vs_xmit.c":{"insertions":1,"deletions":1}}},"a6211caa634da39d861a47437ffcda8b38ef421b":{"author":"Yuqi Jin","email":"jinyuqi@huawei.com","date":"2020-05-16 03:46:49 UTC","message":"net: revert \"net: get rid of an signed integer overflow in ip_idents_reserve()\"\n\nCommit adb03115f459 (\"net: get rid of an signed integer overflow in ip_idents_reserve()\")\nused atomic_cmpxchg to replace \"atomic_add_return\" inside the function\n\"ip_idents_reserve\". The reason was to avoid UBSAN warning.\nHowever, this change has caused performance degrade and in GCC-8,\nfno-strict-overflow is now mapped to -fwrapv -fwrapv-pointer\nand signed integer overflow is now undefined by default at all\noptimization levels[1]. Moreover, it was a bug in UBSAN vs -fwrapv\n/-fno-strict-overflow, so Let's revert it safely.\n\n[1] https://gcc.gnu.org/gcc-8/changes.html\n\nSuggested-by: Peter Zijlstra <peterz@infradead.org>\nSuggested-by: Eric Dumazet <edumazet@google.com>\nCc: \"David S. Miller\" <davem@davemloft.net>\nCc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>\nCc: Hideaki YOSHIFUJI <yoshfuji@linux-ipv6.org>\nCc: Jakub Kicinski <kuba@kernel.org>\nCc: Jiri Pirko <jiri@resnulli.us>\nCc: Arvind Sankar <nivedita@alum.mit.ed","insertions":6,"deletions":8,"filepaths":{"net/ipv4/route.c":{"insertions":6,"deletions":8}}},"5055c371bfd53fd369b895051b541318c2bad495":{"author":"Eric Dumazet","email":"edumazet@google.com","date":"2015-01-14 23:17:06 UTC","message":"ipv4: per cpu uncached list\n\nRAW sockets with hdrinc suffer from contention on rt_uncached_lock\nspinlock.\n\nOne solution is to use percpu lists, since most routes are destroyed\nby the cpu that created them.\n\nIt is unclear why we even have to put these routes in uncached_list,\nas all outgoing packets should be freed when a device is dismantled.\n\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nFixes: caacf05e5ad1 (\"ipv4: Properly purge netdev references on uncached routes.\")\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":13,"deletions":35,"filepaths":{"include/net/route.h":{"insertions":0,"deletions":2},"net/ipv4/route.c":{"insertions":13,"deletions":33}}},"9bf3d20331295b1ecb81f4ed9ef358c51699a050":{"author":"Zhang Yi","email":"yi.zhang@huawei.com","date":"2021-10-08 09:38:20 UTC","message":"quota: check block number when reading the block in quota file\n\nThe block number in the quota tree on disk should be smaller than the\nv2_disk_dqinfo.dqi_blocks. If the quota file was corrupted, we may be\nallocating an 'allocated' block and that would lead to a loop in a tree,\nwhich will probably trigger oops later. This patch adds a check for the\nblock number in the quota tree to prevent such potential issue.\n\nLink: https://lore.kernel.org/r/20211008093821.1001186-2-yi.zhang@huawei.com\nSigned-off-by: Zhang Yi <yi.zhang@huawei.com>\nCc: stable@kernel.org\nSigned-off-by: Jan Kara <jack@suse.cz>","insertions":14,"deletions":0,"filepaths":{"fs/quota/quota_tree.c":{"insertions":14,"deletions":0}}},"1ccd14b9c271c1ac6eec5c5ec5def433100e7248":{"author":"Jan Kara","email":"jack@suse.cz","date":"2008-09-22 03:54:49 UTC","message":"quota: Split off quota tree handling into a separate file\n\nThere is going to be a new version of quota format having 64-bit\nquota limits and a new quota format for OCFS2. They are both\ngoing to use the same tree structure as VFSv0 quota format. So\nsplit out tree handling into a separate file and make size of\nleaf blocks, amount of space usable in each block (needed for\nchecksumming) and structures contained in them configurable\nso that the code can be shared.\n\nSigned-off-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Mark Fasheh <mfasheh@suse.com>","insertions":799,"deletions":581,"filepaths":{"fs/Kconfig":{"insertions":5,"deletions":0},"fs/Makefile":{"insertions":1,"deletions":0},"fs/quota_tree.c":{"insertions":645,"deletions":0},"fs/quota_tree.h":{"insertions":25,"deletions":0},"fs/quota_v2.c":{"insertions":52,"deletions":544},"fs/quotaio_v2.h":{"insertions":7,"deletions":26},"include/linux/dqblk_qtree.h":{"insertions":56,"deletions":0},"include/linux/dqblk_v2.h":{"insertions":8,"deletions":11}}},"ad9f151e560b016b6ad3280b48e42fa11e1a5440":{"author":"Pablo Neira Ayuso","email":"pablo@netfilter.org","date":"2021-06-04 01:07:28 UTC","message":"netfilter: nf_tables: initialize set before expression setup\n\nnft_set_elem_expr_alloc() needs an initialized set if expression sets on\nthe NFT_EXPR_GC flag. Move set fields initialization before expression\nsetup.\n\n[4512935.019450] ==================================================================\n[4512935.019456] BUG: KASAN: null-ptr-deref in nft_set_elem_expr_alloc+0x84/0xd0 [nf_tables]\n[4512935.019487] Read of size 8 at addr 0000000000000070 by task nft/23532\n[4512935.019494] CPU: 1 PID: 23532 Comm: nft Not tainted 5.12.0-rc4+ #48\n[...]\n[4512935.019502] Call Trace:\n[4512935.019505]  dump_stack+0x89/0xb4\n[4512935.019512]  ? nft_set_elem_expr_alloc+0x84/0xd0 [nf_tables]\n[4512935.019536]  ? nft_set_elem_expr_alloc+0x84/0xd0 [nf_tables]\n[4512935.019560]  kasan_report.cold.12+0x5f/0xd8\n[4512935.019566]  ? nft_set_elem_expr_alloc+0x84/0xd0 [nf_tables]\n[4512935.019590]  nft_set_elem_expr_alloc+0x84/0xd0 [nf_tables]\n[4512935.019615]  nf_tables_newset+0xc7f/0x1460 [nf_tables]\n\nReported-by: syz","insertions":43,"deletions":42,"filepaths":{"net/netfilter/nf_tables_api.c":{"insertions":43,"deletions":42}}},"e6d8ecac9e68265aee9be711c5bd29406129666f":{"author":"Carlos Falgueras García","email":"carlosfg@riseup.net","date":"2016-01-05 13:03:32 UTC","message":"netfilter: nf_tables: Add new attributes into nft_set to store user data.\n\nUser data is stored at after 'nft_set_ops' private data into 'data[]'\nflexible array. The field 'udata' points to user data and 'udlen' stores\nits length.\n\nAdd new flag NFTA_SET_USERDATA.\n\nSigned-off-by: Carlos Falgueras García <carlosfg@riseup.net>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":26,"deletions":1,"filepaths":{"include/net/netfilter/nf_tables.h":{"insertions":4,"deletions":0},"include/uapi/linux/netfilter/nf_tables.h":{"insertions":2,"deletions":0},"net/netfilter/nf_tables_api.c":{"insertions":20,"deletions":1}}},"65038428b2c6c5be79d3f78a6b79c0cdc3a58a41":{"author":"Pablo Neira Ayuso","email":"pablo@netfilter.org","date":"2020-03-17 13:13:46 UTC","message":"netfilter: nf_tables: allow to specify stateful expression in set definition\n\nThis patch allows users to specify the stateful expression for the\nelements in this set via NFTA_SET_EXPR. This new feature allows you to\nturn on counters for all of the elements in this set.\n\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":52,"deletions":12,"filepaths":{"include/net/netfilter/nf_tables.h":{"insertions":2,"deletions":0},"include/uapi/linux/netfilter/nf_tables.h":{"insertions":2,"deletions":0},"net/netfilter/nf_tables_api.c":{"insertions":48,"deletions":12}}},"20a69341f2d00cd042e81c82289fba8a13c05a25":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2013-10-11 10:06:22 UTC","message":"netfilter: nf_tables: add netlink set API\n\nThis patch adds the new netlink API for maintaining nf_tables sets\nindependently of the ruleset. The API supports the following operations:\n\n- creation of sets\n- deletion of sets\n- querying of specific sets\n- dumping of all sets\n\n- addition of set elements\n- removal of set elements\n- dumping of all set elements\n\nSets are identified by name, each table defines an individual namespace.\nThe name of a set may be allocated automatically, this is mostly useful\nin combination with the NFT_SET_ANONYMOUS flag, which destroys a set\nautomatically once the last reference has been released.\n\nSets can be marked constant, meaning they're not allowed to change while\nlinked to a rule. This allows to perform lockless operation for set\ntypes that would otherwise require locking.\n\nAdditionally, if the implementation supports it, sets can (as before) be\nused as maps, associating a data value with each key (or range), by\nspecifying the NFT_SET_MAP flag and can be us","insertions":1854,"deletions":677,"filepaths":{"include/net/netfilter/nf_tables.h":{"insertions":142,"deletions":7},"include/uapi/linux/netfilter/nf_tables.h":{"insertions":139,"deletions":52},"net/netfilter/Kconfig":{"insertions":3,"deletions":3},"net/netfilter/Makefile":{"insertions":1,"deletions":1},"net/netfilter/nf_tables_api.c":{"insertions":1070,"deletions":8},"net/netfilter/nf_tables_core.c":{"insertions":0,"deletions":2},"net/netfilter/nft_hash.c":{"insertions":106,"deletions":223},"net/netfilter/nft_immediate.c":{"insertions":11,"deletions":0},"net/netfilter/nft_lookup.c":{"insertions":135,"deletions":0},"net/netfilter/nft_rbtree.c":{"insertions":247,"deletions":0},"net/netfilter/nft_set.c":{"insertions":0,"deletions":381}}},"c50b960ccc5981627628302701e93e6aceccdb1c":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2014-03-28 10:19:47 UTC","message":"netfilter: nf_tables: implement proper set selection\n\nThe current set selection simply choses the first set type that provides\nthe requested features, which always results in the rbtree being chosen\nby virtue of being the first set in the list.\n\nWhat we actually want to do is choose the implementation that can provide\nthe requested features and is optimal from either a performance or memory\nperspective depending on the characteristics of the elements and the\npreferences specified by the user.\n\nThe elements are not known when creating a set. Even if we would provide\nthem for anonymous (literal) sets, we'd still have standalone sets where\nthe elements are not known in advance. We therefore need an abstract\ndescription of the data charcteristics.\n\nThe kernel already knows the size of the key, this patch starts by\nintroducing a nested set description which so far contains only the maximum\namount of elements. Based on this the set implementations are changed to\nprovide an estimate of the req","insertions":242,"deletions":18,"filepaths":{"include/net/netfilter/nf_tables.h":{"insertions":46,"deletions":0},"include/uapi/linux/netfilter/nf_tables.h":{"insertions":27,"deletions":0},"net/netfilter/nf_tables_api.c":{"insertions":105,"deletions":16},"net/netfilter/nft_hash.c":{"insertions":43,"deletions":2},"net/netfilter/nft_rbtree.c":{"insertions":21,"deletions":0}}},"f3a2181e16f1dcbf5446ed43f6b5d9f56c459f85":{"author":"Stefano Brivio","email":"sbrivio@redhat.com","date":"2020-01-21 23:17:53 UTC","message":"netfilter: nf_tables: Support for sets with multiple ranged fields\n\nIntroduce a new nested netlink attribute, NFTA_SET_DESC_CONCAT, used\nto specify the length of each field in a set concatenation.\n\nThis allows set implementations to support concatenation of multiple\nranged items, as they can divide the input key into matching data for\nevery single field. Such set implementations would be selected as\nthey specify support for NFT_SET_INTERVAL and allow desc->field_count\nto be greater than one. Explicitly disallow this for nft_set_rbtree.\n\nIn order to specify the interval for a set entry, userspace would\ninclude in NFTA_SET_DESC_CONCAT attributes field lengths, and pass\nrange endpoints as two separate keys, represented by attributes\nNFTA_SET_ELEM_KEY and NFTA_SET_ELEM_KEY_END.\n\nWhile at it, export the number of 32-bit registers available for\npacket matching, as nftables will need this to know the maximum\nnumber of field lengths that can be specified.\n\nFor example, \"packets with an IPv4 add","insertions":115,"deletions":1,"filepaths":{"include/net/netfilter/nf_tables.h":{"insertions":8,"deletions":0},"include/uapi/linux/netfilter/nf_tables.h":{"insertions":15,"deletions":0},"net/netfilter/nf_tables_api.c":{"insertions":89,"deletions":1},"net/netfilter/nft_set_rbtree.c":{"insertions":3,"deletions":0}}},"48b0ae046ee96eac999839f6d26c624b8c93ed66":{"author":"Pablo Neira Ayuso","email":"pablo@netfilter.org","date":"2020-12-07 16:37:14 UTC","message":"netfilter: nftables: netlink support for several set element expressions\n\nThis patch adds three new netlink attributes to encapsulate a list of\nexpressions per set elements:\n\n- NFTA_SET_EXPRESSIONS: this attribute provides the set definition in\n  terms of expressions. New set elements get attached the list of\n  expressions that is specified by this new netlink attribute.\n- NFTA_SET_ELEM_EXPRESSIONS: this attribute allows users to restore (or\n  initialize) the stateful information of set elements when adding an\n  element to the set.\n- NFTA_DYNSET_EXPRESSIONS: this attribute specifies the list of\n  expressions that the set element gets when it is inserted from the\n  packet path.\n\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":149,"deletions":6,"filepaths":{"include/uapi/linux/netfilter/nf_tables.h":{"insertions":6,"deletions":0},"net/netfilter/nf_tables_api.c":{"insertions":90,"deletions":3},"net/netfilter/nft_dynset.c":{"insertions":53,"deletions":3}}},"3453c92731884bad7c4c3a0667228b964747f3d5":{"author":"Pablo Neira Ayuso","email":"pablo@netfilter.org","date":"2018-06-02 21:38:48 UTC","message":"netfilter: nf_tables: pass ctx to nf_tables_expr_destroy()\n\nnft_set_elem_destroy() can be called from call_rcu context. Annotate\nnetns and table in set object so we can populate the context object.\nMoreover, pass context object to nf_tables_set_elem_destroy() from the\ncommit phase, since it is already available from there.\n\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":16,"deletions":4,"filepaths":{"include/net/netfilter/nf_tables.h":{"insertions":4,"deletions":0},"net/netfilter/nf_tables_api.c":{"insertions":12,"deletions":4}}},"761da2935d6e18d178582dbdf315a3a458555505":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2015-03-26 12:39:36 UTC","message":"netfilter: nf_tables: add set timeout API support\n\nAdd set timeout support to the netlink API. Sets with timeout support\nenabled can have a default timeout value and garbage collection interval\nspecified.\n\nSigned-off-by: Patrick McHardy <kaber@trash.net>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":43,"deletions":2,"filepaths":{"include/net/netfilter/nf_tables.h":{"insertions":9,"deletions":0},"include/uapi/linux/netfilter/nf_tables.h":{"insertions":6,"deletions":0},"net/netfilter/nf_tables_api.c":{"insertions":28,"deletions":2}}},"b4e70d8dd9ea6bd5d5fb3122586f652326ca09cd":{"author":"Pablo Neira Ayuso","email":"pablo@netfilter.org","date":"2020-12-27 11:35:43 UTC","message":"netfilter: nftables: add set expression flags\n\nThe set flag NFT_SET_EXPR provides a hint to the kernel that userspace\nsupports for multiple expressions per set element. In the same\ndirection, NFT_DYNSET_F_EXPR specifies that dynset expression defines\nmultiple expressions per set element.\n\nThis allows new userspace software with old kernels to bail out with\nEOPNOTSUPP. This update is similar to ef516e8625dd (\"netfilter:\nnf_tables: reintroduce the NFT_SET_CONCAT flag\"). The NFT_SET_EXPR flag\nneeds to be set on when the NFTA_SET_EXPRESSIONS attribute is specified.\nThe NFT_SET_EXPR flag is not set on with NFTA_SET_EXPR to retain\nbackward compatibility in old userspace binaries.\n\nFixes: 48b0ae046ee9 (\"netfilter: nftables: netlink support for several set element expressions\")\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":15,"deletions":3,"filepaths":{"include/uapi/linux/netfilter/nf_tables.h":{"insertions":3,"deletions":0},"net/netfilter/nf_tables_api.c":{"insertions":5,"deletions":1},"net/netfilter/nft_dynset.c":{"insertions":7,"deletions":2}}},"aaa31047a6d25da0fa101da1ed544e1247949b40":{"author":"Pablo Neira Ayuso","email":"pablo@netfilter.org","date":"2021-04-27 16:05:55 UTC","message":"netfilter: nftables: add catch-all set element support\n\nThis patch extends the set infrastructure to add a special catch-all set\nelement. If the lookup fails to find an element (or range) in the set,\nthen the catch-all element is selected. Users can specify a mapping,\nexpression(s) and timeout to be attached to the catch-all element.\n\nThis patch adds a catchall list to the set, this list might contain more\nthan one single catch-all element (e.g. in case that the catch-all\nelement is removed and a new one is added in the same transaction).\nHowever, most of the time, there will be either one element or no\nelements at all in this list.\n\nThe catch-all element is identified via NFT_SET_ELEM_CATCHALL flag and\nsuch special element has no NFTA_SET_ELEM_KEY attribute. There is a new\nnft_set_elem_catchall object that stores a reference to the dummy\ncatch-all element (catchall->elem) whose layout is the same of the set\nelement type to reuse the existing set element codebase.\n\nThe set size does not","insertions":465,"deletions":63,"filepaths":{"include/net/netfilter/nf_tables.h":{"insertions":5,"deletions":0},"include/uapi/linux/netfilter/nf_tables.h":{"insertions":2,"deletions":0},"net/netfilter/nf_tables_api.c":{"insertions":426,"deletions":54},"net/netfilter/nft_lookup.c":{"insertions":8,"deletions":4},"net/netfilter/nft_objref.c":{"insertions":7,"deletions":4},"net/netfilter/nft_set_hash.c":{"insertions":6,"deletions":0},"net/netfilter/nft_set_pipapo.c":{"insertions":5,"deletions":1},"net/netfilter/nft_set_rbtree.c":{"insertions":6,"deletions":0}}},"8aeff920dcc9b3f8cf43042a76428582634d9208":{"author":"Pablo Neira Ayuso","email":"pablo@netfilter.org","date":"2016-11-27 23:06:00 UTC","message":"netfilter: nf_tables: add stateful object reference to set elements\n\nThis patch allows you to refer to stateful objects from set elements.\nThis provides the infrastructure to create maps where the right hand\nside of the mapping is a stateful object.\n\nThis allows us to build dictionaries of stateful objects, that you can\nuse to perform fast lookups using any arbitrary key combination.\n\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":79,"deletions":10,"filepaths":{"include/net/netfilter/nf_tables.h":{"insertions":9,"deletions":0},"include/uapi/linux/netfilter/nf_tables.h":{"insertions":8,"deletions":0},"net/netfilter/nf_tables_api.c":{"insertions":62,"deletions":10}}},"9363dc4b599949bde338cdaba1cf7cac243e4e97":{"author":"Arturo Borrero","email":"arturo.borrero.glez@gmail.com","date":"2014-09-23 11:30:41 UTC","message":"netfilter: nf_tables: store and dump set policy\n\nWe want to know in which cases the user explicitly sets the policy\noptions. In that case, we also want to dump back the info.\n\nSigned-off-by: Arturo Borrero Gonzalez <arturo.borrero.glez@gmail.com>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":8,"deletions":0,"filepaths":{"include/net/netfilter/nf_tables.h":{"insertions":2,"deletions":0},"net/netfilter/nf_tables_api.c":{"insertions":6,"deletions":0}}},"c17c3cdff10b9f59ef1244a14604f10949f17117":{"author":"Liping Zhang","email":"zlpnobody@gmail.com","date":"2016-10-29 14:03:05 UTC","message":"netfilter: nf_tables: destroy the set if fail to add transaction\n\nWhen the memory is exhausted, then we will fail to add the NFT_MSG_NEWSET\ntransaction. In such case, we should destroy the set before we free it.\n\nFixes: 958bee14d071 (\"netfilter: nf_tables: use new transaction infrastructure to handle sets\")\nSigned-off-by: Liping Zhang <zlpnobody@gmail.com>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>","insertions":3,"deletions":1,"filepaths":{"net/netfilter/nf_tables_api.c":{"insertions":3,"deletions":1}}},"1da177e4c3f41524e886b7f1b8a0c1fc7321cac2":{"author":"Linus Torvalds","email":"torvalds@ppc970.osdl.org","date":"2005-04-16 22:20:36 UTC","filepaths":{},"message":"        CURATOR NOTE\n          This is a very large commit.\n          The curators of VHP have decided not to show all of the file information for brevity.\n\n        ORIGINAL MESSAGE: Linux-2.6.12-rc2\n\nInitial git repository build. I'm not bothering with the full history,\neven though we have it. We can create a separate \"historical\" git\narchive of that later if we want to, and in the meantime it's about\n3.2GB when imported into git - space that would just make the early\ngit days unnecessarily complicated, when we don't have a lot of good\ninfrastructure for it.\n\nLet it rip!\n"},"8913336a7e8d56e984109a3137d6c0e3362596a4":{"author":"Patrick McHardy","email":"kaber@trash.net","date":"2008-07-19 01:05:19 UTC","message":"packet: add PACKET_RESERVE sockopt\n\nAdd new sockopt to reserve some headroom in the mmaped ring frames in\nfront of the packet payload. This can be used f.i. when the VLAN header\nneeds to be (re)constructed to avoid moving the entire payload.\n\nSigned-off-by: Patrick McHardy <kaber@trash.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":27,"deletions":3,"filepaths":{"include/linux/if_packet.h":{"insertions":1,"deletions":0},"net/packet/af_packet.c":{"insertions":26,"deletions":3}}},"58d19b19cd99b438541eea4cdbf5c171900b25e5":{"author":"Willem de Bruijn","email":"willemb@google.com","date":"2016-02-03 23:02:15 UTC","message":"packet: vnet_hdr support for tpacket_rcv\n\nSupport socket option PACKET_VNET_HDR together with PACKET_RX_RING.\nWhen enabled, a struct virtio_net_hdr will precede the data in the\npacket ring slots.\n\nVerified with test program at\ngithub.com/wdebruij/kerneltools/blob/master/tests/psock_rxring_vnet.c\n\n  pkt: 1454269209.798420 len=5066\n  vnet: gso_type=tcpv4 gso_size=1448 hlen=66 ecn=off\n  csum: start=34 off=16\n  eth: proto=0x800\n  ip: src=<masked> dst=<masked> proto=6 len=5052\n\nSigned-off-by: Willem de Bruijn <willemb@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>","insertions":15,"deletions":4,"filepaths":{"net/packet/af_packet.c":{"insertions":15,"deletions":4}}},"47057abde515155a4fee53038e7772d6b387e0aa":{"author":"Andreas Gruenbacher","email":"agruenba@redhat.com","date":"2016-01-12 19:24:14 UTC","message":"nfsd: add support for the umask attribute\n\nClients can set the umask attribute when creating files to cause the\nserver to apply it always except when inheriting permissions from the\nparent directory.  That way, the new files will end up with the same\npermissions as files created locally.\n\nSee https://tools.ietf.org/html/draft-ietf-nfsv4-umask-02 for more\ndetails.\n\nSigned-off-by: Andreas Gruenbacher <agruenba@redhat.com>\nSigned-off-by: J. Bruce Fields <bfields@redhat.com>","insertions":34,"deletions":9,"filepaths":{"fs/nfsd/nfs4proc.c":{"insertions":3,"deletions":0},"fs/nfsd/nfs4xdr.c":{"insertions":21,"deletions":5},"fs/nfsd/nfsd.h":{"insertions":7,"deletions":2},"fs/nfsd/nfssvc.c":{"insertions":2,"deletions":2},"include/linux/nfs4.h":{"insertions":1,"deletions":0}}},"8be8f932e3db5fe4ed178b8892eeffeab530273a":{"author":"Paolo Bonzini","email":"pbonzini@redhat.com","date":"2020-05-04 16:19:45 UTC","message":"kvm: ioapic: Restrict lazy EOI update to edge-triggered interrupts\n\nCommit f458d039db7e (\"kvm: ioapic: Lazy update IOAPIC EOI\") introduces\nthe following infinite loop:\n\nBUG: stack guard page was hit at 000000008f595917 \\\n(stack is 00000000bdefe5a4..00000000ae2b06f5)\nkernel stack overflow (double-fault): 0000 [#1] SMP NOPTI\nRIP: 0010:kvm_set_irq+0x51/0x160 [kvm]\nCall Trace:\n irqfd_resampler_ack+0x32/0x90 [kvm]\n kvm_notify_acked_irq+0x62/0xd0 [kvm]\n kvm_ioapic_update_eoi_one.isra.0+0x30/0x120 [kvm]\n ioapic_set_irq+0x20e/0x240 [kvm]\n kvm_ioapic_set_irq+0x5c/0x80 [kvm]\n kvm_set_irq+0xbb/0x160 [kvm]\n ? kvm_hv_set_sint+0x20/0x20 [kvm]\n irqfd_resampler_ack+0x32/0x90 [kvm]\n kvm_notify_acked_irq+0x62/0xd0 [kvm]\n kvm_ioapic_update_eoi_one.isra.0+0x30/0x120 [kvm]\n ioapic_set_irq+0x20e/0x240 [kvm]\n kvm_ioapic_set_irq+0x5c/0x80 [kvm]\n kvm_set_irq+0xbb/0x160 [kvm]\n ? kvm_hv_set_sint+0x20/0x20 [kvm]\n....\n\nThe re-entrancy happens because the irq state is the OR of\nthe interrupt state and the resamplefd","insertions":5,"deletions":5,"filepaths":{"arch/x86/kvm/ioapic.c":{"insertions":5,"deletions":5}}},"6bf7609666f6b2a9169c39c79a47ef8d6082afae":{},"5d069dbe8aaf2a197142558b6fb2978189ba3454":{"author":"Miklos Szeredi","email":"mszeredi@redhat.com","date":"2020-12-10 14:33:14 UTC","message":"fuse: fix bad inode\n\nJan Kara's analysis of the syzbot report (edited):\n\n  The reproducer opens a directory on FUSE filesystem, it then attaches\n  dnotify mark to the open directory.  After that a fuse_do_getattr() call\n  finds that attributes returned by the server are inconsistent, and calls\n  make_bad_inode() which, among other things does:\n\n          inode->i_mode = S_IFREG;\n\n  This then confuses dnotify which doesn't tear down its structures\n  properly and eventually crashes.\n\nAvoid calling make_bad_inode() on a live inode: switch to a private flag on\nthe fuse inode.  Also add the test to ops which the bad_inode_ops would\nhave caught.\n\nThis bug goes back to the initial merge of fuse in 2.6.14...\n\nReported-by: syzbot+f427adf9324b92652ccc@syzkaller.appspotmail.com\nSigned-off-by: Miklos Szeredi <mszeredi@redhat.com>\nTested-by: Jan Kara <jack@suse.cz>\nCc: <stable@vger.kernel.org>","insertions":74,"deletions":17,"filepaths":{"fs/fuse/acl.c":{"insertions":6,"deletions":0},"fs/fuse/dir.c":{"insertions":32,"deletions":5},"fs/fuse/file.c":{"insertions":11,"deletions":8},"fs/fuse/fuse_i.h":{"insertions":12,"deletions":0},"fs/fuse/inode.c":{"insertions":2,"deletions":2},"fs/fuse/readdir.c":{"insertions":2,"deletions":2},"fs/fuse/xattr.c":{"insertions":9,"deletions":0}}},"d8a5ba45457e4a22aa39c939121efd7bb6c76672":{"author":"Miklos Szeredi","email":"miklos@szeredi.hu","date":"2005-09-09 20:10:26 UTC","message":"[PATCH] FUSE - core\n\nThis patch adds FUSE core.\n\nThis contains the following files:\n\n o inode.c\n    - superblock operations (alloc_inode, destroy_inode, read_inode,\n      clear_inode, put_super, show_options)\n    - registers FUSE filesystem\n\n o fuse_i.h\n    - private header file\n\nRequirements\n============\n\n The most important difference between orinary filesystems and FUSE is\n the fact, that the filesystem data/metadata is provided by a userspace\n process run with the privileges of the mount \"owner\" instead of the\n kernel, or some remote entity usually running with elevated\n privileges.\n\n The security implication of this is that a non-privileged user must\n not be able to use this capability to compromise the system.  Obvious\n requirements arising from this are:\n\n  - mount owner should not be able to get elevated privileges with the\n    help of the mounted filesystem\n\n  - mount owner should not be able to induce undesired behavior in\n    other users' or the super user's processes\n\n  - mo","insertions":562,"deletions":0,"filepaths":{"fs/fuse/Makefile":{"insertions":7,"deletions":0},"fs/fuse/fuse_i.h":{"insertions":89,"deletions":0},"fs/fuse/inode.c":{"insertions":428,"deletions":0},"include/linux/fuse.h":{"insertions":38,"deletions":0}}},"5329722057d41aebc31e391907a501feaa42f7d9":{"author":"Andrii Nakryiko","email":"andrii@kernel.org","date":"2020-11-10 01:19:29 UTC","message":"bpf: Assign ID to vmlinux BTF and return extra info for BTF in GET_OBJ_INFO\n\nAllocate ID for vmlinux BTF. This makes it visible when iterating over all BTF\nobjects in the system. To allow distinguishing vmlinux BTF (and later kernel\nmodule BTF) from user-provided BTFs, expose extra kernel_btf flag, as well as\nBTF name (\"vmlinux\" for vmlinux BTF, will equal to module's name for module\nBTF).  We might want to later allow specifying BTF name for user-provided BTFs\nas well, if that makes sense. But currently this is reserved only for\nin-kernel BTFs.\n\nHaving in-kernel BTFs exposed IDs will allow to extend BPF APIs that require\nin-kernel BTF type with ability to specify BTF types from kernel modules, not\njust vmlinux BTF. This will be implemented in a follow up patch set for\nfentry/fexit/fmod_ret/lsm/etc.\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nAcked-by: Song Liu <songliubraving@fb.com>\nLink: https://lore.kernel.org/bpf/2020111001","insertions":46,"deletions":3,"filepaths":{"include/uapi/linux/bpf.h":{"insertions":3,"deletions":0},"kernel/bpf/btf.c":{"insertions":40,"deletions":3},"tools/include/uapi/linux/bpf.h":{"insertions":3,"deletions":0}}},"04b8e4fdbbfd201a35bac965cd48ad9b74674c94":{},"b02709587ea3d699a608568ee8157d8db4fd8cae":{"author":"Alexei Starovoitov","email":"ast@kernel.org","date":"2020-12-08 18:01:51 UTC","message":"bpf: Fix propagation of 32-bit signed bounds from 64-bit bounds.\n\nThe 64-bit signed bounds should not affect 32-bit signed bounds unless the\nverifier knows that upper 32-bits are either all 1s or all 0s. For example the\nregister with smin_value==1 doesn't mean that s32_min_value is also equal to 1,\nsince smax_value could be larger than 32-bit subregister can hold.\nThe verifier refines the smax/s32_max return value from certain helpers in\ndo_refine_retval_range(). Teach the verifier to recognize that smin/s32_min\nvalue is also bounded. When both smin and smax bounds fit into 32-bit\nsubregister the verifier can propagate those bounds.\n\nFixes: 3f50f132d840 (\"bpf: Verifier, do explicit ALU32 bounds tracking\")\nReported-by: Jean-Philippe Brucker <jean-philippe@linaro.org>\nAcked-by: John Fastabend <john.fastabend@gmail.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>","insertions":5,"deletions":5,"filepaths":{"kernel/bpf/verifier.c":{"insertions":5,"deletions":5}}},"d203b0fd863a2261e5d00b97f3d060c4c2a6db71":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-05-28 13:03:30 UTC","message":"bpf: Inherit expanded/patched seen count from old aux data\n\nInstead of relying on current env->pass_cnt, use the seen count from the\nold aux data in adjust_insn_aux_data(), and expand it to the new range of\npatched instructions. This change is valid given we always expand 1:n\nwith n>=1, so what applies to the old/original instruction needs to apply\nfor the replacement as well.\n\nNot relying on env->pass_cnt is a prerequisite for a later change where we\nwant to avoid marking an instruction seen when verified under speculative\nexecution path.\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: John Fastabend <john.fastabend@gmail.com>\nReviewed-by: Benedict Schlueter <benedict.schlueter@rub.de>\nReviewed-by: Piotr Krysiuk <piotras@gmail.com>\nAcked-by: Alexei Starovoitov <ast@kernel.org>","insertions":3,"deletions":1,"filepaths":{"kernel/bpf/verifier.c":{"insertions":3,"deletions":1}}},"fe9a5ca7e370e613a9a75a13008a3845ea759d6e":{"author":"Daniel Borkmann","email":"daniel@iogearbox.net","date":"2021-05-28 13:47:27 UTC","message":"bpf: Do not mark insn as seen under speculative path verification\n\n... in such circumstances, we do not want to mark the instruction as seen given\nthe goal is still to jmp-1 rewrite/sanitize dead code, if it is not reachable\nfrom the non-speculative path verification. We do however want to verify it for\nsafety regardless.\n\nWith the patch as-is all the insns that have been marked as seen before the\npatch will also be marked as seen after the patch (just with a potentially\ndifferent non-zero count). An upcoming patch will also verify paths that are\nunreachable in the non-speculative domain, hence this extension is needed.\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: John Fastabend <john.fastabend@gmail.com>\nReviewed-by: Benedict Schlueter <benedict.schlueter@rub.de>\nReviewed-by: Piotr Krysiuk <piotras@gmail.com>\nAcked-by: Alexei Starovoitov <ast@kernel.org>","insertions":18,"deletions":2,"filepaths":{"kernel/bpf/verifier.c":{"insertions":18,"deletions":2}}},"41f70fe0649dddf02046315dc566e06da5a2dc91":{"author":"John Fastabend","email":"john.fastabend@gmail.com","date":"2020-03-30 21:38:21 UTC","message":"bpf: Test_verifier, add alu32 bounds tracking tests\n\nIts possible to have divergent ALU32 and ALU64 bounds when using JMP32\ninstructins and ALU64 arithmatic operations. Sometimes the clang will\neven generate this code. Because the case is a bit tricky lets add\na specific test for it.\n\nHere is  pseudocode asm version to illustrate the idea,\n\n 1 r0 = 0xffffffff00000001;\n 2 if w0 > 1 goto %l[fail];\n 3 r0 += 1\n 5 if w0 > 2 goto %l[fail]\n 6 exit\n\nThe intent here is the verifier will fail the load if the 32bit bounds\nare not tracked correctly through ALU64 op. Similarly we can check the\n64bit bounds are correctly zero extended after ALU32 ops.\n\n 1 r0 = 0xffffffff00000001;\n 2 w0 += 1\n 2 if r0 > 3 goto %l[fail];\n 6 exit\n\nThe above will fail if we do not correctly zero extend 64bit bounds\nafter 32bit op.\n\nSigned-off-by: John Fastabend <john.fastabend@gmail.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nLink: https://lore.kernel.org/bpf/158560430155.10843.514209255758200922.stgit@john-Pr","insertions":39,"deletions":0,"filepaths":{"tools/testing/selftests/bpf/verifier/bounds.c":{"insertions":39,"deletions":0}}},"bb00bd9c0862558c6528e3ac97470aee222436ef":{"author":"Vitaly Kuznetsov","email":"vkuznets@redhat.com","date":"2021-06-28 10:44:24 UTC","message":"KVM: nSVM: Restore nested control upon leaving SMM\n\nIf the VM was migrated while in SMM, no nested state was saved/restored,\nand therefore svm_leave_smm has to load both save and control area\nof the vmcb12. Save area is already loaded from HSAVE area,\nso now load the control area as well from the vmcb12.\n\nSigned-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>\nMessage-Id: <20210628104425.391276-6-vkuznets@redhat.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>","insertions":10,"deletions":3,"filepaths":{"arch/x86/kvm/svm/nested.c":{"insertions":2,"deletions":2},"arch/x86/kvm/svm/svm.c":{"insertions":6,"deletions":1},"arch/x86/kvm/svm/svm.h":{"insertions":2,"deletions":0}}},"1a15eb724aaef8656f8cc01d9355797cfe7c618e":{"author":"Josef Bacik","email":"josef@toxicpanda.com","date":"2021-10-05 20:12:44 UTC","message":"btrfs: use btrfs_get_dev_args_from_path in dev removal ioctls\n\nFor device removal and replace we call btrfs_find_device_by_devspec,\nwhich if we give it a device path and nothing else will call\nbtrfs_get_dev_args_from_path, which opens the block device and reads the\nsuper block and then looks up our device based on that.\n\nHowever at this point we're holding the sb write \"lock\", so reading the\nblock device pulls in the dependency of ->open_mutex, which produces the\nfollowing lockdep splat\n\n======================================================\nWARNING: possible circular locking dependency detected\n5.14.0-rc2+ #405 Not tainted\n------------------------------------------------------\nlosetup/11576 is trying to acquire lock:\nffff9bbe8cded938 ((wq_completion)loop0){+.+.}-{0:0}, at: flush_workqueue+0x67/0x5e0\n\nbut task is already holding lock:\nffff9bbe88e4fc68 (&lo->lo_mutex){+.+.}-{3:3}, at: __loop_clr_fd+0x41/0x660 [loop]\n\nwhich lock already depends on the new lock.\n\nthe existing dependency ch","insertions":48,"deletions":36,"filepaths":{"fs/btrfs/ioctl.c":{"insertions":40,"deletions":27},"fs/btrfs/volumes.c":{"insertions":7,"deletions":8},"fs/btrfs/volumes.h":{"insertions":1,"deletions":1}}},"128c66429247add5128c03dc1e144ca56f05a4e2":{"author":"Navid Emamdoost","email":"navid.emamdoost@gmail.com","date":"2019-09-19 16:04:48 UTC","message":"crypto: ccp - Release all allocated memory if sha type is invalid\n\nRelease all allocated memory if sha type is invalid:\nIn ccp_run_sha_cmd, if the type of sha is invalid, the allocated\nhmac_buf should be released.\n\nv2: fix the goto.\n\nSigned-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>\nAcked-by: Gary R Hook <gary.hook@amd.com>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>","insertions":2,"deletions":1,"filepaths":{"drivers/crypto/ccp/ccp-ops.c":{"insertions":2,"deletions":1}}}}